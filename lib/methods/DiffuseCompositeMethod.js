var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShadingMethodEvent = require("awayjs-renderergl/lib/events/ShadingMethodEvent");
var DiffuseBasicMethod = require("awayjs-methodmaterials/lib/methods/DiffuseBasicMethod");
/**
 * DiffuseCompositeMethod provides a base class for diffuse methods that wrap a diffuse method to alter the
 * calculated diffuse reflection strength.
 */
var DiffuseCompositeMethod = (function (_super) {
    __extends(DiffuseCompositeMethod, _super);
    /**
     * Creates a new <code>DiffuseCompositeMethod</code> object.
     *
     * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature clampDiffuse(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the diffuse strength.
     * @param baseMethod The base diffuse method on which this method's shading is based.
     */
    function DiffuseCompositeMethod(modulateMethod, baseMethod) {
        var _this = this;
        if (baseMethod === void 0) { baseMethod = null; }
        _super.call(this);
        this._onShaderInvalidatedDelegate = function (event) { return _this.onShaderInvalidated(event); };
        this.pBaseMethod = baseMethod || new DiffuseBasicMethod();
        this.pBaseMethod._iModulateMethod = modulateMethod;
        this.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
    }
    Object.defineProperty(DiffuseCompositeMethod.prototype, "baseMethod", {
        /**
         * The base diffuse method on which this method's shading is based.
         */
        get: function () {
            return this.pBaseMethod;
        },
        set: function (value) {
            if (this.pBaseMethod == value)
                return;
            this.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
            this.pBaseMethod = value;
            this.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
            this.iInvalidateShaderProgram();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iInitVO = function (shaderObject, methodVO) {
        this.pBaseMethod.iInitVO(shaderObject, methodVO);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iInitConstants = function (shaderObject, methodVO) {
        this.pBaseMethod.iInitConstants(shaderObject, methodVO);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.dispose = function () {
        this.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);
        this.pBaseMethod.dispose();
    };
    Object.defineProperty(DiffuseCompositeMethod.prototype, "texture", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.pBaseMethod.texture;
        },
        /**
         * @inheritDoc
         */
        set: function (value) {
            this.pBaseMethod.texture = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiffuseCompositeMethod.prototype, "diffuseColor", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.pBaseMethod.diffuseColor;
        },
        /**
         * @inheritDoc
         */
        set: function (value) {
            this.pBaseMethod.diffuseColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiffuseCompositeMethod.prototype, "ambientColor", {
        /**
         * @inheritDoc
         */
        get: function () {
            return this.pBaseMethod.ambientColor;
        },
        /**
         * @inheritDoc
         */
        set: function (value) {
            this.pBaseMethod.ambientColor = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iGetFragmentPreLightingCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return this.pBaseMethod.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iGetFragmentCodePerLight = function (shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters) {
        var code = this.pBaseMethod.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);
        this._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;
        return code;
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iGetFragmentCodePerProbe = function (shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters) {
        var code = this.pBaseMethod.iGetFragmentCodePerProbe(shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);
        this._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;
        return code;
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iActivate = function (shaderObject, methodVO, stage) {
        this.pBaseMethod.iActivate(shaderObject, methodVO, stage);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iSetRenderState = function (shaderObject, methodVO, renderable, stage, camera) {
        this.pBaseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iDeactivate = function (shaderObject, methodVO, stage) {
        this.pBaseMethod.iDeactivate(shaderObject, methodVO, stage);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iGetVertexCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return this.pBaseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        return this.pBaseMethod.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iReset = function () {
        this.pBaseMethod.iReset();
    };
    /**
     * @inheritDoc
     */
    DiffuseCompositeMethod.prototype.iCleanCompilationData = function () {
        _super.prototype.iCleanCompilationData.call(this);
        this.pBaseMethod.iCleanCompilationData();
    };
    /**
     * Called when the base method's shader code is invalidated.
     */
    DiffuseCompositeMethod.prototype.onShaderInvalidated = function (event) {
        this.iInvalidateShaderProgram();
    };
    return DiffuseCompositeMethod;
})(DiffuseBasicMethod);
module.exports = DiffuseCompositeMethod;

//# sourceMappingURL=data:application/json;base64,
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/base/BitmapData");
var BitmapTexture = require("awayjs-core/lib/textures/BitmapTexture");
var ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
/**
 * ShadowDitheredMethod provides a soft shadowing technique by randomly distributing sample points differently for each fragment.
 */
var ShadowDitheredMethod = (function (_super) {
    __extends(ShadowDitheredMethod, _super);
    /**
     * Creates a new ShadowDitheredMethod object.
     * @param castingLight The light casting the shadows
     * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 24.
     */
    function ShadowDitheredMethod(castingLight, numSamples, range) {
        if (numSamples === void 0) { numSamples = 4; }
        if (range === void 0) { range = 1; }
        _super.call(this, castingLight);
        this._depthMapSize = this._pCastingLight.shadowMapper.depthMapSize;
        this.numSamples = numSamples;
        this.range = range;
        ++ShadowDitheredMethod._grainUsages;
        if (!ShadowDitheredMethod._grainTexture)
            this.initGrainTexture();
    }
    Object.defineProperty(ShadowDitheredMethod.prototype, "numSamples", {
        /**
         * The amount of samples to take for dithering. Minimum 1, maximum 24. The actual maximum may depend on the
         * complexity of the shader.
         */
        get: function () {
            return this._numSamples;
        },
        set: function (value /*int*/) {
            this._numSamples = value;
            if (this._numSamples < 1)
                this._numSamples = 1;
            else if (this._numSamples > 24)
                this._numSamples = 24;
            this.iInvalidateShaderProgram();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype.iInitVO = function (shaderObject, methodVO) {
        _super.prototype.iInitVO.call(this, shaderObject, methodVO);
        methodVO.needsProjection = true;
    };
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype.iInitConstants = function (shaderObject, methodVO) {
        _super.prototype.iInitConstants.call(this, shaderObject, methodVO);
        var fragmentData = shaderObject.fragmentConstantData;
        var index = methodVO.fragmentConstantsIndex;
        fragmentData[index + 8] = 1 / this._numSamples;
    };
    Object.defineProperty(ShadowDitheredMethod.prototype, "range", {
        /**
         * The range in the shadow map in which to distribute the samples.
         */
        get: function () {
            return this._range * 2;
        },
        set: function (value) {
            this._range = value / 2;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a texture containing the dithering noise texture.
     */
    ShadowDitheredMethod.prototype.initGrainTexture = function () {
        ShadowDitheredMethod._grainBitmapData = new BitmapData(64, 64, false);
        var vec = new Array();
        var len = 4096;
        var step = 1 / (this._depthMapSize * this._range);
        var r, g;
        for (var i = 0; i < len; ++i) {
            r = 2 * (Math.random() - .5);
            g = 2 * (Math.random() - .5);
            if (r < 0)
                r -= step;
            else
                r += step;
            if (g < 0)
                g -= step;
            else
                g += step;
            if (r > 1)
                r = 1;
            else if (r < -1)
                r = -1;
            if (g > 1)
                g = 1;
            else if (g < -1)
                g = -1;
            vec[i] = (Math.floor((r * .5 + .5) * 0xff) << 16) | (Math.floor((g * .5 + .5) * 0xff) << 8);
        }
        ShadowDitheredMethod._grainBitmapData.setVector(ShadowDitheredMethod._grainBitmapData.rect, vec);
        ShadowDitheredMethod._grainTexture = new BitmapTexture(ShadowDitheredMethod._grainBitmapData);
    };
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype.dispose = function () {
        if (--ShadowDitheredMethod._grainUsages == 0) {
            ShadowDitheredMethod._grainTexture.dispose();
            ShadowDitheredMethod._grainBitmapData.dispose();
            ShadowDitheredMethod._grainTexture = null;
        }
    };
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype.iActivate = function (shaderObject, methodVO, stage) {
        _super.prototype.iActivate.call(this, shaderObject, methodVO, stage);
        var data = shaderObject.fragmentConstantData;
        var index = methodVO.fragmentConstantsIndex;
        data[index + 9] = (stage.width - 1) / 63;
        data[index + 10] = (stage.height - 1) / 63;
        data[index + 11] = 2 * this._range / this._depthMapSize;
        stage.activateTexture(methodVO.texturesIndex + 1, ShadowDitheredMethod._grainTexture);
    };
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype._pGetPlanarFragmentCode = function (methodVO, targetReg, regCache, sharedRegisters) {
        var depthMapRegister = regCache.getFreeTextureReg();
        var decReg = regCache.getFreeFragmentConstant();
        var dataReg = regCache.getFreeFragmentConstant();
        var customDataReg = regCache.getFreeFragmentConstant();
        methodVO.fragmentConstantsIndex = decReg.index * 4;
        methodVO.texturesIndex = depthMapRegister.index;
        return this.getSampleCode(customDataReg, depthMapRegister, decReg, targetReg, regCache, sharedRegisters);
    };
    /**
     * Get the actual shader code for shadow mapping
     * @param regCache The register cache managing the registers.
     * @param depthMapRegister The texture register containing the depth map.
     * @param decReg The register containing the depth map decoding data.
     * @param targetReg The target register to add the shadow coverage.
     */
    ShadowDitheredMethod.prototype.getSampleCode = function (customDataReg, depthMapRegister, decReg, targetReg, regCache, sharedRegisters) {
        var code = "";
        var grainRegister = regCache.getFreeTextureReg();
        var uvReg = regCache.getFreeFragmentVectorTemp();
        var numSamples = this._numSamples;
        regCache.addFragmentTempUsages(uvReg, 1);
        var temp = regCache.getFreeFragmentVectorTemp();
        var projectionReg = sharedRegisters.projectionFragment;
        code += "div " + uvReg + ", " + projectionReg + ", " + projectionReg + ".w\n" + "mul " + uvReg + ".xy, " + uvReg + ".xy, " + customDataReg + ".yz\n";
        while (numSamples > 0) {
            if (numSamples == this._numSamples)
                code += "tex " + uvReg + ", " + uvReg + ", " + grainRegister + " <2d,nearest,repeat,mipnone>\n";
            else
                code += "tex " + uvReg + ", " + uvReg + ".zwxy, " + grainRegister + " <2d,nearest,repeat,mipnone>\n";
            // keep grain in uvReg.zw
            code += "sub " + uvReg + ".zw, " + uvReg + ".xy, fc0.xx\n" + "mul " + uvReg + ".zw, " + uvReg + ".zw, " + customDataReg + ".w\n"; // (tex unpack scale and tex scale in one)
            if (numSamples == this._numSamples) {
                // first sample
                code += "add " + uvReg + ".xy, " + uvReg + ".zw, " + this._pDepthMapCoordReg + ".xy\n" + "tex " + temp + ", " + uvReg + ", " + depthMapRegister + " <2d,nearest,clamp,mipnone>\n" + "dp4 " + temp + ".z, " + temp + ", " + decReg + "\n" + "slt " + targetReg + ".w, " + this._pDepthMapCoordReg + ".z, " + temp + ".z\n"; // 0 if in shadow
            }
            else {
                code += this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            }
            if (numSamples > 4)
                code += "add " + uvReg + ".xy, " + uvReg + ".xy, " + uvReg + ".zw\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            if (numSamples > 1)
                code += "sub " + uvReg + ".xy, " + this._pDepthMapCoordReg + ".xy, " + uvReg + ".zw\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            if (numSamples > 5)
                code += "sub " + uvReg + ".xy, " + uvReg + ".xy, " + uvReg + ".zw\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            if (numSamples > 2) {
                code += "neg " + uvReg + ".w, " + uvReg + ".w\n"; // will be rotated 90 degrees when being accessed as wz
                code += "add " + uvReg + ".xy, " + uvReg + ".wz, " + this._pDepthMapCoordReg + ".xy\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            }
            if (numSamples > 6)
                code += "add " + uvReg + ".xy, " + uvReg + ".xy, " + uvReg + ".wz\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            if (numSamples > 3)
                code += "sub " + uvReg + ".xy, " + this._pDepthMapCoordReg + ".xy, " + uvReg + ".wz\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            if (numSamples > 7)
                code += "sub " + uvReg + ".xy, " + uvReg + ".xy, " + uvReg + ".wz\n" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);
            numSamples -= 8;
        }
        regCache.removeFragmentTempUsage(uvReg);
        code += "mul " + targetReg + ".w, " + targetReg + ".w, " + customDataReg + ".x\n"; // average
        return code;
    };
    /**
     * Adds the code for another tap to the shader code.
     * @param uvReg The uv register for the tap.
     * @param depthMapRegister The texture register containing the depth map.
     * @param decReg The register containing the depth map decoding data.
     * @param targetReg The target register to add the tap comparison result.
     * @param regCache The register cache managing the registers.
     * @return
     */
    ShadowDitheredMethod.prototype.addSample = function (uvReg, depthMapRegister, decReg, targetReg, regCache) {
        var temp = regCache.getFreeFragmentVectorTemp();
        return "tex " + temp + ", " + uvReg + ", " + depthMapRegister + " <2d,nearest,clamp,mipnone>\n" + "dp4 " + temp + ".z, " + temp + ", " + decReg + "\n" + "slt " + temp + ".z, " + this._pDepthMapCoordReg + ".z, " + temp + ".z\n" + "add " + targetReg + ".w, " + targetReg + ".w, " + temp + ".z\n";
    };
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype.iActivateForCascade = function (shaderObject, methodVO, stage) {
        var data = shaderObject.fragmentConstantData;
        var index = methodVO.secondaryFragmentConstantsIndex;
        data[index] = 1 / this._numSamples;
        data[index + 1] = (stage.width - 1) / 63;
        data[index + 2] = (stage.height - 1) / 63;
        data[index + 3] = 2 * this._range / this._depthMapSize;
        stage.activateTexture(methodVO.texturesIndex + 1, ShadowDitheredMethod._grainTexture);
    };
    /**
     * @inheritDoc
     */
    ShadowDitheredMethod.prototype._iGetCascadeFragmentCode = function (shaderObject, methodVO, decodeRegister, depthTexture, depthProjection, targetRegister, registerCache, sharedRegisters) {
        this._pDepthMapCoordReg = depthProjection;
        var dataReg = registerCache.getFreeFragmentConstant();
        methodVO.secondaryFragmentConstantsIndex = dataReg.index * 4;
        return this.getSampleCode(dataReg, depthTexture, decodeRegister, targetRegister, registerCache, sharedRegisters);
    };
    return ShadowDitheredMethod;
})(ShadowMethodBase);
module.exports = ShadowDitheredMethod;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvU2hhZG93RGl0aGVyZWRNZXRob2QudHMiXSwibmFtZXMiOlsiU2hhZG93RGl0aGVyZWRNZXRob2QiLCJTaGFkb3dEaXRoZXJlZE1ldGhvZC5jb25zdHJ1Y3RvciIsIlNoYWRvd0RpdGhlcmVkTWV0aG9kLm51bVNhbXBsZXMiLCJTaGFkb3dEaXRoZXJlZE1ldGhvZC5pSW5pdFZPIiwiU2hhZG93RGl0aGVyZWRNZXRob2QuaUluaXRDb25zdGFudHMiLCJTaGFkb3dEaXRoZXJlZE1ldGhvZC5yYW5nZSIsIlNoYWRvd0RpdGhlcmVkTWV0aG9kLmluaXRHcmFpblRleHR1cmUiLCJTaGFkb3dEaXRoZXJlZE1ldGhvZC5kaXNwb3NlIiwiU2hhZG93RGl0aGVyZWRNZXRob2QuaUFjdGl2YXRlIiwiU2hhZG93RGl0aGVyZWRNZXRob2QuX3BHZXRQbGFuYXJGcmFnbWVudENvZGUiLCJTaGFkb3dEaXRoZXJlZE1ldGhvZC5nZXRTYW1wbGVDb2RlIiwiU2hhZG93RGl0aGVyZWRNZXRob2QuYWRkU2FtcGxlIiwiU2hhZG93RGl0aGVyZWRNZXRob2QuaUFjdGl2YXRlRm9yQ2FzY2FkZSIsIlNoYWRvd0RpdGhlcmVkTWV0aG9kLl9pR2V0Q2FzY2FkZUZyYWdtZW50Q29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxVQUFVLFdBQWdCLGlDQUFpQyxDQUFDLENBQUM7QUFDcEUsSUFBTyxhQUFhLFdBQWUsd0NBQXdDLENBQUMsQ0FBQztBQWE3RSxJQUFPLGdCQUFnQixXQUFlLHFEQUFxRCxDQUFDLENBQUM7QUFFN0YsQUFHQTs7R0FERztJQUNHLG9CQUFvQjtJQUFTQSxVQUE3QkEsb0JBQW9CQSxVQUF5QkE7SUFTbERBOzs7O09BSUdBO0lBQ0hBLFNBZEtBLG9CQUFvQkEsQ0FjYkEsWUFBNkJBLEVBQUVBLFVBQTZCQSxFQUFFQSxLQUFnQkE7UUFBL0NDLDBCQUE2QkEsR0FBN0JBLGNBQTZCQTtRQUFFQSxx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QSxHQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUNyREEsSUFBSUEsQ0FBUUEsRUFBRUEsQ0FBUUEsQ0FBQ0E7UUFFdkJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQW1CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUM5Q0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDM0JBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBO1lBQzNCQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDVEEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7WUFBQ0EsSUFBSUE7Z0JBQ2ZBLENBQUNBLElBQUlBLElBQUlBLENBQUNBO1lBQ1hBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNUQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQTtZQUFDQSxJQUFJQTtnQkFDZkEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7WUFDWEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUN2QkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDUkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ1RBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO2dCQUN2QkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDUkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsRUFBRUEsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckZBLENBQUNBO1FBRURBLG9CQUFvQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxTQUFTQSxDQUFDQSxvQkFBb0JBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakdBLG9CQUFvQkEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsYUFBYUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxnQkFBZ0JBLENBQUNBLENBQUNBO0lBQy9GQSxDQUFDQTtJQUVETjs7T0FFR0E7SUFDSUEsc0NBQU9BLEdBQWRBO1FBRUNPLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsWUFBWUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUNBLG9CQUFvQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7WUFDN0NBLG9CQUFvQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtZQUNoREEsb0JBQW9CQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUMzQ0EsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFRFA7O09BRUdBO0lBQ0lBLHdDQUFTQSxHQUFoQkEsVUFBaUJBLFlBQTZCQSxFQUFFQSxRQUFpQkEsRUFBRUEsS0FBV0E7UUFFN0VRLGdCQUFLQSxDQUFDQSxTQUFTQSxZQUFDQSxZQUFZQSxFQUFFQSxRQUFRQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUUvQ0EsSUFBSUEsSUFBSUEsR0FBaUJBLFlBQVlBLENBQUNBLG9CQUFvQkEsQ0FBQ0E7UUFDM0RBLElBQUlBLEtBQUtBLEdBQW1CQSxRQUFRQSxDQUFDQSxzQkFBc0JBLENBQUNBO1FBQzVEQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFDQSxFQUFFQSxDQUFDQTtRQUN2Q0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsRUFBRUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDekNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEdBQUNBLElBQUlBLENBQUNBLE1BQU1BLEdBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBO1FBRXBEQSxLQUFLQSxDQUFDQSxlQUFlQSxDQUFDQSxRQUFRQSxDQUFDQSxhQUFhQSxHQUFHQSxDQUFDQSxFQUFFQSxvQkFBb0JBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO0lBQ3ZGQSxDQUFDQTtJQUVEUjs7T0FFR0E7SUFDSUEsc0RBQXVCQSxHQUE5QkEsVUFBK0JBLFFBQWlCQSxFQUFFQSxTQUErQkEsRUFBRUEsUUFBNEJBLEVBQUVBLGVBQWtDQTtRQUVsSlMsSUFBSUEsZ0JBQWdCQSxHQUF5QkEsUUFBUUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtRQUMxRUEsSUFBSUEsTUFBTUEsR0FBeUJBLFFBQVFBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0E7UUFDdEVBLElBQUlBLE9BQU9BLEdBQXlCQSxRQUFRQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO1FBQ3ZFQSxJQUFJQSxhQUFhQSxHQUF5QkEsUUFBUUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtRQUU3RUEsUUFBUUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUNqREEsUUFBUUEsQ0FBQ0EsYUFBYUEsR0FBR0EsZ0JBQWdCQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUVoREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsYUFBYUEsRUFBRUEsZ0JBQWdCQSxFQUFFQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxRQUFRQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtJQUMxR0EsQ0FBQ0E7SUFFRFQ7Ozs7OztPQU1HQTtJQUNLQSw0Q0FBYUEsR0FBckJBLFVBQXNCQSxhQUFtQ0EsRUFBRUEsZ0JBQXNDQSxFQUFFQSxNQUE0QkEsRUFBRUEsU0FBK0JBLEVBQUVBLFFBQTRCQSxFQUFFQSxlQUFrQ0E7UUFFak9VLElBQUlBLElBQUlBLEdBQVVBLEVBQUVBLENBQUNBO1FBQ3JCQSxJQUFJQSxhQUFhQSxHQUF5QkEsUUFBUUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtRQUN2RUEsSUFBSUEsS0FBS0EsR0FBeUJBLFFBQVFBLENBQUNBLHlCQUF5QkEsRUFBRUEsQ0FBQ0E7UUFDdkVBLElBQUlBLFVBQVVBLEdBQWtCQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQTtRQUNqREEsUUFBUUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV6Q0EsSUFBSUEsSUFBSUEsR0FBeUJBLFFBQVFBLENBQUNBLHlCQUF5QkEsRUFBRUEsQ0FBQ0E7UUFFdEVBLElBQUlBLGFBQWFBLEdBQXlCQSxlQUFlQSxDQUFDQSxrQkFBa0JBLENBQUNBO1FBRTdFQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxHQUFHQSxhQUFhQSxHQUFHQSxJQUFJQSxHQUFHQSxhQUFhQSxHQUFHQSxNQUFNQSxHQUFHQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxhQUFhQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUVySkEsT0FBT0EsVUFBVUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFDdkJBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLElBQUlBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO2dCQUNsQ0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsR0FBR0EsYUFBYUEsR0FBR0EsZ0NBQWdDQSxDQUFDQTtZQUNqR0EsSUFBSUE7Z0JBQ0hBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLElBQUlBLEdBQUdBLEtBQUtBLEdBQUdBLFNBQVNBLEdBQUdBLGFBQWFBLEdBQUdBLGdDQUFnQ0EsQ0FBQ0E7WUFFdEdBLEFBQ0FBLHlCQUR5QkE7WUFDekJBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLGVBQWVBLEdBQ3pEQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxhQUFhQSxHQUFHQSxNQUFNQSxFQUFFQSwwQ0FBMENBO1lBRWhIQSxFQUFFQSxDQUFDQSxDQUFDQSxVQUFVQSxJQUFJQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDcENBLEFBQ0FBLGVBRGVBO2dCQUNmQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLE9BQU9BLEdBQ3JGQSxNQUFNQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxLQUFLQSxHQUFHQSxJQUFJQSxHQUFHQSxnQkFBZ0JBLEdBQUdBLCtCQUErQkEsR0FDeEZBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQ3BEQSxNQUFNQSxHQUFHQSxTQUFTQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEVBQUVBLGlCQUFpQkE7WUFDbkdBLENBQUNBLEdBRGdGQTtZQUMvRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ1BBLElBQUlBLElBQUlBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEVBQUVBLGdCQUFnQkEsRUFBRUEsTUFBTUEsRUFBRUEsU0FBU0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDOUVBLENBQUNBO1lBRURBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNsQkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsRUFBRUEsZ0JBQWdCQSxFQUFFQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUU3SUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ2xCQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEVBQUVBLGdCQUFnQkEsRUFBRUEsTUFBTUEsRUFBRUEsU0FBU0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFFL0pBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNsQkEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsRUFBRUEsZ0JBQWdCQSxFQUFFQSxNQUFNQSxFQUFFQSxTQUFTQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUU3SUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3BCQSxJQUFJQSxJQUFJQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxNQUFNQSxFQUFFQSx1REFBdURBO2dCQUN6R0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsS0FBS0EsR0FBR0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxFQUFFQSxnQkFBZ0JBLEVBQUVBLE1BQU1BLEVBQUVBLFNBQVNBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1lBQy9KQSxDQUFDQTtZQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxVQUFVQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDbEJBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLEtBQUtBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBLEtBQUtBLEVBQUVBLGdCQUFnQkEsRUFBRUEsTUFBTUEsRUFBRUEsU0FBU0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFFN0lBLEVBQUVBLENBQUNBLENBQUNBLFVBQVVBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNsQkEsSUFBSUEsSUFBSUEsTUFB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QSxDQUFDQTtRQUVuREEsS0FBS0EsQ0FBQ0EsZUFBZUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsb0JBQW9CQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtJQUN2RkEsQ0FBQ0E7SUFFRFo7O09BRUdBO0lBQ0lBLHVEQUF3QkEsR0FBL0JBLFVBQWdDQSxZQUE2QkEsRUFBRUEsUUFBaUJBLEVBQUVBLGNBQW9DQSxFQUFFQSxZQUFrQ0EsRUFBRUEsZUFBcUNBLEVBQUVBLGNBQW9DQSxFQUFFQSxhQUFpQ0EsRUFBRUEsZUFBa0NBO1FBRTdTYSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLGVBQWVBLENBQUNBO1FBRTFDQSxJQUFJQSxPQUFPQSxHQUF5QkEsYUFBYUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtRQUM1RUEsUUFBUUEsQ0FBQ0EsK0JBQStCQSxHQUFHQSxPQUFPQSxDQUFDQSxLQUFLQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUUzREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsT0FBT0EsRUFBRUEsWUFBWUEsRUFBRUEsY0FBY0EsRUFBRUEsY0FBY0EsRUFBRUEsYUFBYUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7SUFDbEhBLENBQUNBO0lBQ0ZiLDJCQUFDQTtBQUFEQSxDQXJSQSxBQXFSQ0EsRUFyUmtDLGdCQUFnQixFQXFSbEQ7QUFFRCxBQUE4QixpQkFBckIsb0JBQW9CLENBQUMiLCJmaWxlIjoibWV0aG9kcy9TaGFkb3dEaXRoZXJlZE1ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQml0bWFwRGF0YVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9iYXNlL0JpdG1hcERhdGFcIik7XG5pbXBvcnQgQml0bWFwVGV4dHVyZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQml0bWFwVGV4dHVyZVwiKTtcblxuaW1wb3J0IERpcmVjdGlvbmFsTGlnaHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0RpcmVjdGlvbmFsTGlnaHRcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvU3RhZ2VcIik7XG5cbmltcG9ydCBTaGFkZXJMaWdodGluZ09iamVjdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlckxpZ2h0aW5nT2JqZWN0XCIpO1xuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJEYXRhXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckVsZW1lbnRcIik7XG5cbmltcG9ydCBNZXRob2RWT1x0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvZGF0YS9NZXRob2RWT1wiKTtcbmltcG9ydCBTaGFkb3dNZXRob2RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvU2hhZG93TWV0aG9kQmFzZVwiKTtcblxuLyoqXG4gKiBTaGFkb3dEaXRoZXJlZE1ldGhvZCBwcm92aWRlcyBhIHNvZnQgc2hhZG93aW5nIHRlY2huaXF1ZSBieSByYW5kb21seSBkaXN0cmlidXRpbmcgc2FtcGxlIHBvaW50cyBkaWZmZXJlbnRseSBmb3IgZWFjaCBmcmFnbWVudC5cbiAqL1xuY2xhc3MgU2hhZG93RGl0aGVyZWRNZXRob2QgZXh0ZW5kcyBTaGFkb3dNZXRob2RCYXNlXG57XG5cdHByaXZhdGUgc3RhdGljIF9ncmFpblRleHR1cmU6Qml0bWFwVGV4dHVyZTtcblx0cHJpdmF0ZSBzdGF0aWMgX2dyYWluVXNhZ2VzOm51bWJlciAvKmludCovO1xuXHRwcml2YXRlIHN0YXRpYyBfZ3JhaW5CaXRtYXBEYXRhOkJpdG1hcERhdGE7XG5cdHByaXZhdGUgX2RlcHRoTWFwU2l6ZTpudW1iZXIgLyppbnQqLztcblx0cHJpdmF0ZSBfcmFuZ2U6bnVtYmVyO1xuXHRwcml2YXRlIF9udW1TYW1wbGVzOm51bWJlciAvKmludCovO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IFNoYWRvd0RpdGhlcmVkTWV0aG9kIG9iamVjdC5cblx0ICogQHBhcmFtIGNhc3RpbmdMaWdodCBUaGUgbGlnaHQgY2FzdGluZyB0aGUgc2hhZG93c1xuXHQgKiBAcGFyYW0gbnVtU2FtcGxlcyBUaGUgYW1vdW50IG9mIHNhbXBsZXMgdG8gdGFrZSBmb3IgZGl0aGVyaW5nLiBNaW5pbXVtIDEsIG1heGltdW0gMjQuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihjYXN0aW5nTGlnaHQ6RGlyZWN0aW9uYWxMaWdodCwgbnVtU2FtcGxlczpudW1iZXIgLyppbnQqLyA9IDQsIHJhbmdlOm51bWJlciA9IDEpXG5cdHtcblx0XHRzdXBlcihjYXN0aW5nTGlnaHQpO1xuXG5cdFx0dGhpcy5fZGVwdGhNYXBTaXplID0gdGhpcy5fcENhc3RpbmdMaWdodC5zaGFkb3dNYXBwZXIuZGVwdGhNYXBTaXplO1xuXG5cdFx0dGhpcy5udW1TYW1wbGVzID0gbnVtU2FtcGxlcztcblx0XHR0aGlzLnJhbmdlID0gcmFuZ2U7XG5cblx0XHQrK1NoYWRvd0RpdGhlcmVkTWV0aG9kLl9ncmFpblVzYWdlcztcblxuXHRcdGlmICghU2hhZG93RGl0aGVyZWRNZXRob2QuX2dyYWluVGV4dHVyZSlcblx0XHRcdHRoaXMuaW5pdEdyYWluVGV4dHVyZSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBhbW91bnQgb2Ygc2FtcGxlcyB0byB0YWtlIGZvciBkaXRoZXJpbmcuIE1pbmltdW0gMSwgbWF4aW11bSAyNC4gVGhlIGFjdHVhbCBtYXhpbXVtIG1heSBkZXBlbmQgb24gdGhlXG5cdCAqIGNvbXBsZXhpdHkgb2YgdGhlIHNoYWRlci5cblx0ICovXG5cdHB1YmxpYyBnZXQgbnVtU2FtcGxlcygpOm51bWJlciAvKmludCovXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fbnVtU2FtcGxlcztcblx0fVxuXG5cdHB1YmxpYyBzZXQgbnVtU2FtcGxlcyh2YWx1ZTpudW1iZXIgLyppbnQqLylcblx0e1xuXHRcdHRoaXMuX251bVNhbXBsZXMgPSB2YWx1ZTtcblx0XHRpZiAodGhpcy5fbnVtU2FtcGxlcyA8IDEpXG5cdFx0XHR0aGlzLl9udW1TYW1wbGVzID0gMTsgZWxzZSBpZiAodGhpcy5fbnVtU2FtcGxlcyA+IDI0KVxuXHRcdFx0dGhpcy5fbnVtU2FtcGxlcyA9IDI0O1xuXHRcdHRoaXMuaUludmFsaWRhdGVTaGFkZXJQcm9ncmFtKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBpSW5pdFZPKHNoYWRlck9iamVjdDpTaGFkZXJMaWdodGluZ09iamVjdCwgbWV0aG9kVk86TWV0aG9kVk8pXG5cdHtcblx0XHRzdXBlci5pSW5pdFZPKHNoYWRlck9iamVjdCwgbWV0aG9kVk8pO1xuXG5cdFx0bWV0aG9kVk8ubmVlZHNQcm9qZWN0aW9uID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlJbml0Q29uc3RhbnRzKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCBtZXRob2RWTzpNZXRob2RWTylcblx0e1xuXHRcdHN1cGVyLmlJbml0Q29uc3RhbnRzKHNoYWRlck9iamVjdCwgbWV0aG9kVk8pO1xuXG5cdFx0dmFyIGZyYWdtZW50RGF0YTpBcnJheTxudW1iZXI+ID0gc2hhZGVyT2JqZWN0LmZyYWdtZW50Q29uc3RhbnREYXRhO1xuXHRcdHZhciBpbmRleDpudW1iZXIgLyppbnQqLyA9IG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XG5cdFx0ZnJhZ21lbnREYXRhW2luZGV4ICsgOF0gPSAxL3RoaXMuX251bVNhbXBsZXM7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIHJhbmdlIGluIHRoZSBzaGFkb3cgbWFwIGluIHdoaWNoIHRvIGRpc3RyaWJ1dGUgdGhlIHNhbXBsZXMuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IHJhbmdlKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fcmFuZ2UqMjtcblx0fVxuXG5cdHB1YmxpYyBzZXQgcmFuZ2UodmFsdWU6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fcmFuZ2UgPSB2YWx1ZS8yO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB0ZXh0dXJlIGNvbnRhaW5pbmcgdGhlIGRpdGhlcmluZyBub2lzZSB0ZXh0dXJlLlxuXHQgKi9cblx0cHJpdmF0ZSBpbml0R3JhaW5UZXh0dXJlKClcblx0e1xuXHRcdFNoYWRvd0RpdGhlcmVkTWV0aG9kLl9ncmFpbkJpdG1hcERhdGEgPSBuZXcgQml0bWFwRGF0YSg2NCwgNjQsIGZhbHNlKTtcblx0XHR2YXIgdmVjOkFycmF5PG51bWJlcj4gLyp1aW50Ki8gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXHRcdHZhciBsZW46bnVtYmVyIC8qdWludCovID0gNDA5Njtcblx0XHR2YXIgc3RlcDpudW1iZXIgPSAxLyh0aGlzLl9kZXB0aE1hcFNpemUqdGhpcy5fcmFuZ2UpO1xuXHRcdHZhciByOm51bWJlciwgZzpudW1iZXI7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciAvKnVpbnQqLyA9IDA7IGkgPCBsZW47ICsraSkge1xuXHRcdFx0ciA9IDIqKE1hdGgucmFuZG9tKCkgLSAuNSk7XG5cdFx0XHRnID0gMiooTWF0aC5yYW5kb20oKSAtIC41KTtcblx0XHRcdGlmIChyIDwgMClcblx0XHRcdFx0ciAtPSBzdGVwOyBlbHNlXG5cdFx0XHRcdHIgKz0gc3RlcDtcblx0XHRcdGlmIChnIDwgMClcblx0XHRcdFx0ZyAtPSBzdGVwOyBlbHNlXG5cdFx0XHRcdGcgKz0gc3RlcDtcblx0XHRcdGlmIChyID4gMSlcblx0XHRcdFx0ciA9IDE7IGVsc2UgaWYgKHIgPCAtMSlcblx0XHRcdFx0ciA9IC0xO1xuXHRcdFx0aWYgKGcgPiAxKVxuXHRcdFx0XHRnID0gMTsgZWxzZSBpZiAoZyA8IC0xKVxuXHRcdFx0XHRnID0gLTE7XG5cdFx0XHR2ZWNbaV0gPSAoTWF0aC5mbG9vcigociouNSArIC41KSoweGZmKSA8PCAxNikgfCAoTWF0aC5mbG9vcigoZyouNSArIC41KSoweGZmKSA8PCA4KTtcblx0XHR9XG5cblx0XHRTaGFkb3dEaXRoZXJlZE1ldGhvZC5fZ3JhaW5CaXRtYXBEYXRhLnNldFZlY3RvcihTaGFkb3dEaXRoZXJlZE1ldGhvZC5fZ3JhaW5CaXRtYXBEYXRhLnJlY3QsIHZlYyk7XG5cdFx0U2hhZG93RGl0aGVyZWRNZXRob2QuX2dyYWluVGV4dHVyZSA9IG5ldyBCaXRtYXBUZXh0dXJlKFNoYWRvd0RpdGhlcmVkTWV0aG9kLl9ncmFpbkJpdG1hcERhdGEpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHRpZiAoLS1TaGFkb3dEaXRoZXJlZE1ldGhvZC5fZ3JhaW5Vc2FnZXMgPT0gMCkge1xuXHRcdFx0U2hhZG93RGl0aGVyZWRNZXRob2QuX2dyYWluVGV4dHVyZS5kaXNwb3NlKCk7XG5cdFx0XHRTaGFkb3dEaXRoZXJlZE1ldGhvZC5fZ3JhaW5CaXRtYXBEYXRhLmRpc3Bvc2UoKTtcblx0XHRcdFNoYWRvd0RpdGhlcmVkTWV0aG9kLl9ncmFpblRleHR1cmUgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlBY3RpdmF0ZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIHN0YWdlOlN0YWdlKVxuXHR7XG5cdFx0c3VwZXIuaUFjdGl2YXRlKHNoYWRlck9iamVjdCwgbWV0aG9kVk8sIHN0YWdlKTtcblxuXHRcdHZhciBkYXRhOkFycmF5PG51bWJlcj4gPSBzaGFkZXJPYmplY3QuZnJhZ21lbnRDb25zdGFudERhdGE7XG5cdFx0dmFyIGluZGV4Om51bWJlciAvKnVpbnQqLyA9IG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XG5cdFx0ZGF0YVtpbmRleCArIDldID0gKHN0YWdlLndpZHRoIC0gMSkvNjM7XG5cdFx0ZGF0YVtpbmRleCArIDEwXSA9IChzdGFnZS5oZWlnaHQgLSAxKS82Mztcblx0XHRkYXRhW2luZGV4ICsgMTFdID0gMip0aGlzLl9yYW5nZS90aGlzLl9kZXB0aE1hcFNpemU7XG5cblx0XHRzdGFnZS5hY3RpdmF0ZVRleHR1cmUobWV0aG9kVk8udGV4dHVyZXNJbmRleCArIDEsIFNoYWRvd0RpdGhlcmVkTWV0aG9kLl9ncmFpblRleHR1cmUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX3BHZXRQbGFuYXJGcmFnbWVudENvZGUobWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ0NhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIGRlcHRoTWFwUmVnaXN0ZXI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnQ2FjaGUuZ2V0RnJlZVRleHR1cmVSZWcoKTtcblx0XHR2YXIgZGVjUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ0NhY2hlLmdldEZyZWVGcmFnbWVudENvbnN0YW50KCk7XG5cdFx0dmFyIGRhdGFSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnQ2FjaGUuZ2V0RnJlZUZyYWdtZW50Q29uc3RhbnQoKTtcblx0XHR2YXIgY3VzdG9tRGF0YVJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdDYWNoZS5nZXRGcmVlRnJhZ21lbnRDb25zdGFudCgpO1xuXG5cdFx0bWV0aG9kVk8uZnJhZ21lbnRDb25zdGFudHNJbmRleCA9IGRlY1JlZy5pbmRleCo0O1xuXHRcdG1ldGhvZFZPLnRleHR1cmVzSW5kZXggPSBkZXB0aE1hcFJlZ2lzdGVyLmluZGV4O1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2FtcGxlQ29kZShjdXN0b21EYXRhUmVnLCBkZXB0aE1hcFJlZ2lzdGVyLCBkZWNSZWcsIHRhcmdldFJlZywgcmVnQ2FjaGUsIHNoYXJlZFJlZ2lzdGVycyk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBhY3R1YWwgc2hhZGVyIGNvZGUgZm9yIHNoYWRvdyBtYXBwaW5nXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgbWFuYWdpbmcgdGhlIHJlZ2lzdGVycy5cblx0ICogQHBhcmFtIGRlcHRoTWFwUmVnaXN0ZXIgVGhlIHRleHR1cmUgcmVnaXN0ZXIgY29udGFpbmluZyB0aGUgZGVwdGggbWFwLlxuXHQgKiBAcGFyYW0gZGVjUmVnIFRoZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBkZXB0aCBtYXAgZGVjb2RpbmcgZGF0YS5cblx0ICogQHBhcmFtIHRhcmdldFJlZyBUaGUgdGFyZ2V0IHJlZ2lzdGVyIHRvIGFkZCB0aGUgc2hhZG93IGNvdmVyYWdlLlxuXHQgKi9cblx0cHJpdmF0ZSBnZXRTYW1wbGVDb2RlKGN1c3RvbURhdGFSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50LCBkZXB0aE1hcFJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgZGVjUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgdGFyZ2V0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgY29kZTpzdHJpbmcgPSBcIlwiO1xuXHRcdHZhciBncmFpblJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ0NhY2hlLmdldEZyZWVUZXh0dXJlUmVnKCk7XG5cdFx0dmFyIHV2UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ0NhY2hlLmdldEZyZWVGcmFnbWVudFZlY3RvclRlbXAoKTtcblx0XHR2YXIgbnVtU2FtcGxlczpudW1iZXIgLyppbnQqLyA9IHRoaXMuX251bVNhbXBsZXM7XG5cdFx0cmVnQ2FjaGUuYWRkRnJhZ21lbnRUZW1wVXNhZ2VzKHV2UmVnLCAxKTtcblxuXHRcdHZhciB0ZW1wOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ0NhY2hlLmdldEZyZWVGcmFnbWVudFZlY3RvclRlbXAoKTtcblxuXHRcdHZhciBwcm9qZWN0aW9uUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHNoYXJlZFJlZ2lzdGVycy5wcm9qZWN0aW9uRnJhZ21lbnQ7XG5cblx0XHRjb2RlICs9IFwiZGl2IFwiICsgdXZSZWcgKyBcIiwgXCIgKyBwcm9qZWN0aW9uUmVnICsgXCIsIFwiICsgcHJvamVjdGlvblJlZyArIFwiLndcXG5cIiArIFwibXVsIFwiICsgdXZSZWcgKyBcIi54eSwgXCIgKyB1dlJlZyArIFwiLnh5LCBcIiArIGN1c3RvbURhdGFSZWcgKyBcIi55elxcblwiO1xuXG5cdFx0d2hpbGUgKG51bVNhbXBsZXMgPiAwKSB7XG5cdFx0XHRpZiAobnVtU2FtcGxlcyA9PSB0aGlzLl9udW1TYW1wbGVzKVxuXHRcdFx0XHRjb2RlICs9IFwidGV4IFwiICsgdXZSZWcgKyBcIiwgXCIgKyB1dlJlZyArIFwiLCBcIiArIGdyYWluUmVnaXN0ZXIgKyBcIiA8MmQsbmVhcmVzdCxyZXBlYXQsbWlwbm9uZT5cXG5cIjtcblx0XHRcdGVsc2Vcblx0XHRcdFx0Y29kZSArPSBcInRleCBcIiArIHV2UmVnICsgXCIsIFwiICsgdXZSZWcgKyBcIi56d3h5LCBcIiArIGdyYWluUmVnaXN0ZXIgKyBcIiA8MmQsbmVhcmVzdCxyZXBlYXQsbWlwbm9uZT5cXG5cIjtcblxuXHRcdFx0Ly8ga2VlcCBncmFpbiBpbiB1dlJlZy56d1xuXHRcdFx0Y29kZSArPSBcInN1YiBcIiArIHV2UmVnICsgXCIuencsIFwiICsgdXZSZWcgKyBcIi54eSwgZmMwLnh4XFxuXCIgKyAvLyB1di0uNVxuXHRcdFx0XHRcIm11bCBcIiArIHV2UmVnICsgXCIuencsIFwiICsgdXZSZWcgKyBcIi56dywgXCIgKyBjdXN0b21EYXRhUmVnICsgXCIud1xcblwiOyAvLyAodGV4IHVucGFjayBzY2FsZSBhbmQgdGV4IHNjYWxlIGluIG9uZSlcblxuXHRcdFx0aWYgKG51bVNhbXBsZXMgPT0gdGhpcy5fbnVtU2FtcGxlcykge1xuXHRcdFx0XHQvLyBmaXJzdCBzYW1wbGVcblx0XHRcdFx0Y29kZSArPSBcImFkZCBcIiArIHV2UmVnICsgXCIueHksIFwiICsgdXZSZWcgKyBcIi56dywgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnh5XFxuXCIgK1xuXHRcdFx0XHRcdFwidGV4IFwiICsgdGVtcCArIFwiLCBcIiArIHV2UmVnICsgXCIsIFwiICsgZGVwdGhNYXBSZWdpc3RlciArIFwiIDwyZCxuZWFyZXN0LGNsYW1wLG1pcG5vbmU+XFxuXCIgK1xuXHRcdFx0XHRcdFwiZHA0IFwiICsgdGVtcCArIFwiLnosIFwiICsgdGVtcCArIFwiLCBcIiArIGRlY1JlZyArIFwiXFxuXCIgK1xuXHRcdFx0XHRcdFwic2x0IFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnosIFwiICsgdGVtcCArIFwiLnpcXG5cIjsgLy8gMCBpZiBpbiBzaGFkb3dcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvZGUgKz0gdGhpcy5hZGRTYW1wbGUodXZSZWcsIGRlcHRoTWFwUmVnaXN0ZXIsIGRlY1JlZywgdGFyZ2V0UmVnLCByZWdDYWNoZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChudW1TYW1wbGVzID4gNClcblx0XHRcdFx0Y29kZSArPSBcImFkZCBcIiArIHV2UmVnICsgXCIueHksIFwiICsgdXZSZWcgKyBcIi54eSwgXCIgKyB1dlJlZyArIFwiLnp3XFxuXCIgKyB0aGlzLmFkZFNhbXBsZSh1dlJlZywgZGVwdGhNYXBSZWdpc3RlciwgZGVjUmVnLCB0YXJnZXRSZWcsIHJlZ0NhY2hlKTtcblxuXHRcdFx0aWYgKG51bVNhbXBsZXMgPiAxKVxuXHRcdFx0XHRjb2RlICs9IFwic3ViIFwiICsgdXZSZWcgKyBcIi54eSwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnh5LCBcIiArIHV2UmVnICsgXCIuendcXG5cIiArIHRoaXMuYWRkU2FtcGxlKHV2UmVnLCBkZXB0aE1hcFJlZ2lzdGVyLCBkZWNSZWcsIHRhcmdldFJlZywgcmVnQ2FjaGUpO1xuXG5cdFx0XHRpZiAobnVtU2FtcGxlcyA+IDUpXG5cdFx0XHRcdGNvZGUgKz0gXCJzdWIgXCIgKyB1dlJlZyArIFwiLnh5LCBcIiArIHV2UmVnICsgXCIueHksIFwiICsgdXZSZWcgKyBcIi56d1xcblwiICsgdGhpcy5hZGRTYW1wbGUodXZSZWcsIGRlcHRoTWFwUmVnaXN0ZXIsIGRlY1JlZywgdGFyZ2V0UmVnLCByZWdDYWNoZSk7XG5cblx0XHRcdGlmIChudW1TYW1wbGVzID4gMikge1xuXHRcdFx0XHRjb2RlICs9IFwibmVnIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIud1xcblwiOyAvLyB3aWxsIGJlIHJvdGF0ZWQgOTAgZGVncmVlcyB3aGVuIGJlaW5nIGFjY2Vzc2VkIGFzIHd6XG5cdFx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyB1dlJlZyArIFwiLnh5LCBcIiArIHV2UmVnICsgXCIud3osIFwiICsgdGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgKyBcIi54eVxcblwiICsgdGhpcy5hZGRTYW1wbGUodXZSZWcsIGRlcHRoTWFwUmVnaXN0ZXIsIGRlY1JlZywgdGFyZ2V0UmVnLCByZWdDYWNoZSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChudW1TYW1wbGVzID4gNilcblx0XHRcdFx0Y29kZSArPSBcImFkZCBcIiArIHV2UmVnICsgXCIueHksIFwiICsgdXZSZWcgKyBcIi54eSwgXCIgKyB1dlJlZyArIFwiLnd6XFxuXCIgKyB0aGlzLmFkZFNhbXBsZSh1dlJlZywgZGVwdGhNYXBSZWdpc3RlciwgZGVjUmVnLCB0YXJnZXRSZWcsIHJlZ0NhY2hlKTtcblxuXHRcdFx0aWYgKG51bVNhbXBsZXMgPiAzKVxuXHRcdFx0XHRjb2RlICs9IFwic3ViIFwiICsgdXZSZWcgKyBcIi54eSwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnh5LCBcIiArIHV2UmVnICsgXCIud3pcXG5cIiArIHRoaXMuYWRkU2FtcGxlKHV2UmVnLCBkZXB0aE1hcFJlZ2lzdGVyLCBkZWNSZWcsIHRhcmdldFJlZywgcmVnQ2FjaGUpO1xuXG5cdFx0XHRpZiAobnVtU2FtcGxlcyA+IDcpXG5cdFx0XHRcdGNvZGUgKz0gXCJzdWIgXCIgKyB1dlJlZyArIFwiLnh5LCBcIiArIHV2UmVnICsgXCIueHksIFwiICsgdXZSZWcgKyBcIi53elxcblwiICsgdGhpcy5hZGRTYW1wbGUodXZSZWcsIGRlcHRoTWFwUmVnaXN0ZXIsIGRlY1JlZywgdGFyZ2V0UmVnLCByZWdDYWNoZSk7XG5cblx0XHRcdG51bVNhbXBsZXMgLT0gODtcblx0XHR9XG5cblx0XHRyZWdDYWNoZS5yZW1vdmVGcmFnbWVudFRlbXBVc2FnZSh1dlJlZyk7XG5cdFx0Y29kZSArPSBcIm11bCBcIiArIHRhcmdldFJlZyArIFwiLncsIFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyBjdXN0b21EYXRhUmVnICsgXCIueFxcblwiOyAvLyBhdmVyYWdlXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyB0aGUgY29kZSBmb3IgYW5vdGhlciB0YXAgdG8gdGhlIHNoYWRlciBjb2RlLlxuXHQgKiBAcGFyYW0gdXZSZWcgVGhlIHV2IHJlZ2lzdGVyIGZvciB0aGUgdGFwLlxuXHQgKiBAcGFyYW0gZGVwdGhNYXBSZWdpc3RlciBUaGUgdGV4dHVyZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBkZXB0aCBtYXAuXG5cdCAqIEBwYXJhbSBkZWNSZWcgVGhlIHJlZ2lzdGVyIGNvbnRhaW5pbmcgdGhlIGRlcHRoIG1hcCBkZWNvZGluZyBkYXRhLlxuXHQgKiBAcGFyYW0gdGFyZ2V0UmVnIFRoZSB0YXJnZXQgcmVnaXN0ZXIgdG8gYWRkIHRoZSB0YXAgY29tcGFyaXNvbiByZXN1bHQuXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgbWFuYWdpbmcgdGhlIHJlZ2lzdGVycy5cblx0ICogQHJldHVyblxuXHQgKi9cblx0cHJpdmF0ZSBhZGRTYW1wbGUodXZSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50LCBkZXB0aE1hcFJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgZGVjUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgdGFyZ2V0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdDYWNoZS5nZXRGcmVlRnJhZ21lbnRWZWN0b3JUZW1wKCk7XG5cblx0XHRyZXR1cm4gXCJ0ZXggXCIgKyB0ZW1wICsgXCIsIFwiICsgdXZSZWcgKyBcIiwgXCIgKyBkZXB0aE1hcFJlZ2lzdGVyICsgXCIgPDJkLG5lYXJlc3QsY2xhbXAsbWlwbm9uZT5cXG5cIiArXG5cdFx0XHRcImRwNCBcIiArIHRlbXAgKyBcIi56LCBcIiArIHRlbXAgKyBcIiwgXCIgKyBkZWNSZWcgKyBcIlxcblwiICtcblx0XHRcdFwic2x0IFwiICsgdGVtcCArIFwiLnosIFwiICsgdGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgKyBcIi56LCBcIiArIHRlbXAgKyBcIi56XFxuXCIgKyAvLyAwIGlmIGluIHNoYWRvd1xuXHRcdFx0XCJhZGQgXCIgKyB0YXJnZXRSZWcgKyBcIi53LCBcIiArIHRhcmdldFJlZyArIFwiLncsIFwiICsgdGVtcCArIFwiLnpcXG5cIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlBY3RpdmF0ZUZvckNhc2NhZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIG1ldGhvZFZPOk1ldGhvZFZPLCBzdGFnZTpTdGFnZSlcblx0e1xuXHRcdHZhciBkYXRhOkFycmF5PG51bWJlcj4gPSBzaGFkZXJPYmplY3QuZnJhZ21lbnRDb25zdGFudERhdGE7XG5cdFx0dmFyIGluZGV4Om51bWJlciAvKnVpbnQqLyA9IG1ldGhvZFZPLnNlY29uZGFyeUZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XG5cdFx0ZGF0YVtpbmRleF0gPSAxL3RoaXMuX251bVNhbXBsZXM7XG5cdFx0ZGF0YVtpbmRleCArIDFdID0gKHN0YWdlLndpZHRoIC0gMSkvNjM7XG5cdFx0ZGF0YVtpbmRleCArIDJdID0gKHN0YWdlLmhlaWdodCAtIDEpLzYzO1xuXHRcdGRhdGFbaW5kZXggKyAzXSA9IDIqdGhpcy5fcmFuZ2UvdGhpcy5fZGVwdGhNYXBTaXplO1xuXG5cdFx0c3RhZ2UuYWN0aXZhdGVUZXh0dXJlKG1ldGhvZFZPLnRleHR1cmVzSW5kZXggKyAxLCBTaGFkb3dEaXRoZXJlZE1ldGhvZC5fZ3JhaW5UZXh0dXJlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIF9pR2V0Q2FzY2FkZUZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIGRlY29kZVJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgZGVwdGhUZXh0dXJlOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgZGVwdGhQcm9qZWN0aW9uOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgdGFyZ2V0UmVnaXN0ZXI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50LCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0dGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgPSBkZXB0aFByb2plY3Rpb247XG5cblx0XHR2YXIgZGF0YVJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVGcmFnbWVudENvbnN0YW50KCk7XG5cdFx0bWV0aG9kVk8uc2Vjb25kYXJ5RnJhZ21lbnRDb25zdGFudHNJbmRleCA9IGRhdGFSZWcuaW5kZXgqNDtcblxuXHRcdHJldHVybiB0aGlzLmdldFNhbXBsZUNvZGUoZGF0YVJlZywgZGVwdGhUZXh0dXJlLCBkZWNvZGVSZWdpc3RlciwgdGFyZ2V0UmVnaXN0ZXIsIHJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVycyk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2hhZG93RGl0aGVyZWRNZXRob2Q7Il19
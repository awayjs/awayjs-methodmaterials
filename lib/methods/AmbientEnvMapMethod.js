var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShaderCompilerHelper = require("awayjs-renderergl/lib/utils/ShaderCompilerHelper");
var AmbientBasicMethod = require("awayjs-methodmaterials/lib/methods/AmbientBasicMethod");
/**
 * AmbientEnvMapMethod provides a diffuse shading method that uses a diffuse irradiance environment map to
 * approximate global lighting rather than lights.
 */
var AmbientEnvMapMethod = (function (_super) {
    __extends(AmbientEnvMapMethod, _super);
    /**
     * Creates a new <code>AmbientEnvMapMethod</code> object.
     *
     * @param envMap The cube environment map to use for the ambient lighting.
     */
    function AmbientEnvMapMethod(envMap) {
        _super.call(this);
        this._cubeTexture = envMap;
    }
    /**
     * @inheritDoc
     */
    AmbientEnvMapMethod.prototype.iInitVO = function (shaderObject, methodVO) {
        _super.prototype.iInitVO.call(this, shaderObject, methodVO);
        methodVO.needsNormals = true;
    };
    Object.defineProperty(AmbientEnvMapMethod.prototype, "envMap", {
        /**
         * The cube environment map to use for the diffuse lighting.
         */
        get: function () {
            return this._cubeTexture;
        },
        set: function (value) {
            this._cubeTexture = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    AmbientEnvMapMethod.prototype.iActivate = function (shaderObject, methodVO, stage) {
        _super.prototype.iActivate.call(this, shaderObject, methodVO, stage);
        stage.activateCubeTexture(methodVO.texturesIndex, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping);
    };
    /**
     * @inheritDoc
     */
    AmbientEnvMapMethod.prototype.iGetFragmentCode = function (shaderObject, methodVO, targetReg, regCache, sharedRegisters) {
        var code = "";
        var ambientInputRegister;
        var cubeMapReg = regCache.getFreeTextureReg();
        methodVO.texturesIndex = cubeMapReg.index;
        code += ShaderCompilerHelper.getTexCubeSampleCode(targetReg, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping, sharedRegisters.normalFragment);
        ambientInputRegister = regCache.getFreeFragmentConstant();
        methodVO.fragmentConstantsIndex = ambientInputRegister.index;
        code += "add " + targetReg + ".xyz, " + targetReg + ".xyz, " + ambientInputRegister + ".xyz\n";
        return code;
    };
    return AmbientEnvMapMethod;
})(AmbientBasicMethod);
module.exports = AmbientEnvMapMethod;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvQW1iaWVudEVudk1hcE1ldGhvZC50cyJdLCJuYW1lcyI6WyJBbWJpZW50RW52TWFwTWV0aG9kIiwiQW1iaWVudEVudk1hcE1ldGhvZC5jb25zdHJ1Y3RvciIsIkFtYmllbnRFbnZNYXBNZXRob2QuaUluaXRWTyIsIkFtYmllbnRFbnZNYXBNZXRob2QuZW52TWFwIiwiQW1iaWVudEVudk1hcE1ldGhvZC5pQWN0aXZhdGUiLCJBbWJpZW50RW52TWFwTWV0aG9kLmlHZXRGcmFnbWVudENvZGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVFBLElBQU8sb0JBQW9CLFdBQWMsa0RBQWtELENBQUMsQ0FBQztBQUc3RixJQUFPLGtCQUFrQixXQUFjLHVEQUF1RCxDQUFDLENBQUM7QUFFaEcsQUFJQTs7O0dBREc7SUFDRyxtQkFBbUI7SUFBU0EsVUFBNUJBLG1CQUFtQkEsVUFBMkJBO0lBSW5EQTs7OztPQUlHQTtJQUNIQSxTQVRLQSxtQkFBbUJBLENBU1pBLE1BQXNCQTtRQUVqQ0MsaUJBQU9BLENBQUNBO1FBQ1JBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLE1BQU1BLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVERDs7T0FFR0E7SUFDSUEscUNBQU9BLEdBQWRBLFVBQWVBLFlBQTZCQSxFQUFFQSxRQUFpQkE7UUFFOURFLGdCQUFLQSxDQUFDQSxPQUFPQSxZQUFDQSxZQUFZQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUV0Q0EsUUFBUUEsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDOUJBLENBQUNBO0lBS0RGLHNCQUFXQSx1Q0FBTUE7UUFIakJBOztXQUVHQTthQUNIQTtZQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7YUFFREgsVUFBa0JBLEtBQXFCQTtZQUV0Q0csSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDM0JBLENBQUNBOzs7T0FMQUg7SUFPREE7O09BRUdBO0lBQ0lBLHVDQUFTQSxHQUFoQkEsVUFBaUJBLFlBQTZCQSxFQUFFQSxRQUFpQkEsRUFBRUEsS0FBV0E7UUFFN0VJLGdCQUFLQSxDQUFDQSxTQUFTQSxZQUFDQSxZQUFZQSxFQUFFQSxRQUFRQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUUvQ0EsS0FBS0EsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxRQUFRQSxDQUFDQSxhQUFhQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxZQUFZQSxDQUFDQSxpQkFBaUJBLEVBQUVBLFlBQVlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO0lBQ2xJQSxDQUFDQTtJQUVESjs7T0FFR0E7SUFDSUEsOENBQWdCQSxHQUF2QkEsVUFBd0JBLFlBQTZCQSxFQUFFQSxRQUFpQkEsRUFBRUEsU0FBK0JBLEVBQUVBLFFBQTRCQSxFQUFFQSxlQUFrQ0E7UUFFMUtLLElBQUlBLElBQUlBLEdBQVVBLEVBQUVBLENBQUNBO1FBQ3JCQSxJQUFJQSxvQkFBMENBLENBQUNBO1FBQy9DQSxJQUFJQSxVQUFVQSxHQUF5QkEsUUFBUUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtRQUNwRUEsUUFBUUEsQ0FBQ0EsYUFBYUEsR0FBR0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFFMUNBLElBQUlBLElBQUlBLG9CQUFvQkEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxTQUFTQSxFQUFFQSxVQUFVQSxFQUFFQSxJQUFJQSxDQUFDQSxZQUFZQSxFQUFFQSxZQUFZQSxDQUFDQSxpQkFBaUJBLEVBQUVBLFlBQVlBLENBQUNBLGFBQWFBLEVBQUVBLGVBQWVBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1FBRXhMQSxvQkFBb0JBLEdBQUdBLFFBQVFBLENBQUNBLHVCQUF1QkEsRUFBRUEsQ0FBQ0E7UUFDMURBLFFBQVFBLENBQUNBLHNCQUFzQkEsR0FBR0Esb0JBQW9CQSxDQUFDQSxLQUFLQSxDQUFDQTtRQUU3REEsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsU0FBU0EsR0FBR0EsUUFBUUEsR0FBR0EsU0FBU0EsR0FBR0EsUUFBUUEsR0FBR0Esb0JBQW9CQSxHQUFHQSxRQUFRQSxDQUFDQTtRQUUvRkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7SUFDYkEsQ0FBQ0E7SUFDRkwsMEJBQUNBO0FBQURBLENBbkVBLEFBbUVDQSxFQW5FaUMsa0JBQWtCLEVBbUVuRDtBQUVELEFBQTZCLGlCQUFwQixtQkFBbUIsQ0FBQyIsImZpbGUiOiJtZXRob2RzL0FtYmllbnRFbnZNYXBNZXRob2QuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEN1YmVUZXh0dXJlQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvQ3ViZVRleHR1cmVCYXNlXCIpO1xyXG5cclxuaW1wb3J0IFN0YWdlXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9TdGFnZVwiKTtcclxuXHJcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xyXG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xyXG5pbXBvcnQgU2hhZGVyQ29tcGlsZXJIZWxwZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi91dGlscy9TaGFkZXJDb21waWxlckhlbHBlclwiKTtcclxuXHJcbmltcG9ydCBNZXRob2RWT1x0XHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvZGF0YS9NZXRob2RWT1wiKTtcclxuaW1wb3J0IEFtYmllbnRCYXNpY01ldGhvZFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvbWV0aG9kcy9BbWJpZW50QmFzaWNNZXRob2RcIik7XHJcblxyXG4vKipcclxuICogQW1iaWVudEVudk1hcE1ldGhvZCBwcm92aWRlcyBhIGRpZmZ1c2Ugc2hhZGluZyBtZXRob2QgdGhhdCB1c2VzIGEgZGlmZnVzZSBpcnJhZGlhbmNlIGVudmlyb25tZW50IG1hcCB0b1xyXG4gKiBhcHByb3hpbWF0ZSBnbG9iYWwgbGlnaHRpbmcgcmF0aGVyIHRoYW4gbGlnaHRzLlxyXG4gKi9cclxuY2xhc3MgQW1iaWVudEVudk1hcE1ldGhvZCBleHRlbmRzIEFtYmllbnRCYXNpY01ldGhvZFxyXG57XHJcblx0cHJpdmF0ZSBfY3ViZVRleHR1cmU6Q3ViZVRleHR1cmVCYXNlO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgPGNvZGU+QW1iaWVudEVudk1hcE1ldGhvZDwvY29kZT4gb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGVudk1hcCBUaGUgY3ViZSBlbnZpcm9ubWVudCBtYXAgdG8gdXNlIGZvciB0aGUgYW1iaWVudCBsaWdodGluZy5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbnZNYXA6Q3ViZVRleHR1cmVCYXNlKVxyXG5cdHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLl9jdWJlVGV4dHVyZSA9IGVudk1hcDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIGlJbml0Vk8oc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIG1ldGhvZFZPOk1ldGhvZFZPKVxyXG5cdHtcclxuXHRcdHN1cGVyLmlJbml0Vk8oc2hhZGVyT2JqZWN0LCBtZXRob2RWTyk7XHJcblxyXG5cdFx0bWV0aG9kVk8ubmVlZHNOb3JtYWxzID0gdHJ1ZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogVGhlIGN1YmUgZW52aXJvbm1lbnQgbWFwIHRvIHVzZSBmb3IgdGhlIGRpZmZ1c2UgbGlnaHRpbmcuXHJcblx0ICovXHJcblx0cHVibGljIGdldCBlbnZNYXAoKTpDdWJlVGV4dHVyZUJhc2VcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fY3ViZVRleHR1cmU7XHJcblx0fVxyXG5cdFxyXG5cdHB1YmxpYyBzZXQgZW52TWFwKHZhbHVlOkN1YmVUZXh0dXJlQmFzZSlcclxuXHR7XHJcblx0XHR0aGlzLl9jdWJlVGV4dHVyZSA9IHZhbHVlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdERvY1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBpQWN0aXZhdGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIG1ldGhvZFZPOk1ldGhvZFZPLCBzdGFnZTpTdGFnZSlcclxuXHR7XHJcblx0XHRzdXBlci5pQWN0aXZhdGUoc2hhZGVyT2JqZWN0LCBtZXRob2RWTywgc3RhZ2UpO1xyXG5cclxuXHRcdHN0YWdlLmFjdGl2YXRlQ3ViZVRleHR1cmUobWV0aG9kVk8udGV4dHVyZXNJbmRleCwgdGhpcy5fY3ViZVRleHR1cmUsIHNoYWRlck9iamVjdC51c2VTbW9vdGhUZXh0dXJlcywgc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdERvY1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCBtZXRob2RWTzpNZXRob2RWTywgdGFyZ2V0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXHJcblx0e1xyXG5cdFx0dmFyIGNvZGU6c3RyaW5nID0gXCJcIjtcclxuXHRcdHZhciBhbWJpZW50SW5wdXRSZWdpc3RlcjpTaGFkZXJSZWdpc3RlckVsZW1lbnQ7XHJcblx0XHR2YXIgY3ViZU1hcFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdDYWNoZS5nZXRGcmVlVGV4dHVyZVJlZygpO1xyXG5cdFx0bWV0aG9kVk8udGV4dHVyZXNJbmRleCA9IGN1YmVNYXBSZWcuaW5kZXg7XHJcblx0XHRcclxuXHRcdGNvZGUgKz0gU2hhZGVyQ29tcGlsZXJIZWxwZXIuZ2V0VGV4Q3ViZVNhbXBsZUNvZGUodGFyZ2V0UmVnLCBjdWJlTWFwUmVnLCB0aGlzLl9jdWJlVGV4dHVyZSwgc2hhZGVyT2JqZWN0LnVzZVNtb290aFRleHR1cmVzLCBzaGFkZXJPYmplY3QudXNlTWlwbWFwcGluZywgc2hhcmVkUmVnaXN0ZXJzLm5vcm1hbEZyYWdtZW50KTtcclxuXHJcblx0XHRhbWJpZW50SW5wdXRSZWdpc3RlciA9IHJlZ0NhY2hlLmdldEZyZWVGcmFnbWVudENvbnN0YW50KCk7XHJcblx0XHRtZXRob2RWTy5mcmFnbWVudENvbnN0YW50c0luZGV4ID0gYW1iaWVudElucHV0UmVnaXN0ZXIuaW5kZXg7XHJcblx0XHRcclxuXHRcdGNvZGUgKz0gXCJhZGQgXCIgKyB0YXJnZXRSZWcgKyBcIi54eXosIFwiICsgdGFyZ2V0UmVnICsgXCIueHl6LCBcIiArIGFtYmllbnRJbnB1dFJlZ2lzdGVyICsgXCIueHl6XFxuXCI7XHJcblx0XHRcclxuXHRcdHJldHVybiBjb2RlO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gQW1iaWVudEVudk1hcE1ldGhvZDsiXX0=
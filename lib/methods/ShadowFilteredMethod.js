var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShadowMethodBase = require("awayjs-methodmaterials/lib/methods/ShadowMethodBase");
/**
 * ShadowFilteredMethod provides a softened shadowing technique by bilinearly interpolating shadow comparison
 * results of neighbouring pixels.
 */
var ShadowFilteredMethod = (function (_super) {
    __extends(ShadowFilteredMethod, _super);
    /**
     * Creates a new DiffuseBasicMethod object.
     *
     * @param castingLight The light casting the shadow
     */
    function ShadowFilteredMethod(castingLight) {
        _super.call(this, castingLight);
    }
    /**
     * @inheritDoc
     */
    ShadowFilteredMethod.prototype.iInitConstants = function (shaderObject, methodVO) {
        _super.prototype.iInitConstants.call(this, shaderObject, methodVO);
        var fragmentData = shaderObject.fragmentConstantData;
        var index = methodVO.fragmentConstantsIndex;
        fragmentData[index + 8] = .5;
        var size = this.castingLight.shadowMapper.depthMapSize;
        fragmentData[index + 9] = size;
        fragmentData[index + 10] = 1 / size;
    };
    /**
     * @inheritDoc
     */
    ShadowFilteredMethod.prototype._pGetPlanarFragmentCode = function (methodVO, targetReg, regCache, sharedRegisters) {
        var depthMapRegister = regCache.getFreeTextureReg();
        var decReg = regCache.getFreeFragmentConstant();
        var dataReg = regCache.getFreeFragmentConstant();
        // TODO: not used
        dataReg = dataReg;
        var customDataReg = regCache.getFreeFragmentConstant();
        var depthCol = regCache.getFreeFragmentVectorTemp();
        var uvReg;
        var code = "";
        methodVO.fragmentConstantsIndex = decReg.index * 4;
        regCache.addFragmentTempUsages(depthCol, 1);
        uvReg = regCache.getFreeFragmentVectorTemp();
        regCache.addFragmentTempUsages(uvReg, 1);
        code += "mov " + uvReg + ", " + this._pDepthMapCoordReg + "\n" + "tex " + depthCol + ", " + this._pDepthMapCoordReg + ", " + depthMapRegister + " <2d, nearest, clamp>\n" + "dp4 " + depthCol + ".z, " + depthCol + ", " + decReg + "\n" + "slt " + uvReg + ".z, " + this._pDepthMapCoordReg + ".z, " + depthCol + ".z\n" + "add " + uvReg + ".x, " + this._pDepthMapCoordReg + ".x, " + customDataReg + ".z\n" + "tex " + depthCol + ", " + uvReg + ", " + depthMapRegister + " <2d, nearest, clamp>\n" + "dp4 " + depthCol + ".z, " + depthCol + ", " + decReg + "\n" + "slt " + uvReg + ".w, " + this._pDepthMapCoordReg + ".z, " + depthCol + ".z\n" + "mul " + depthCol + ".x, " + this._pDepthMapCoordReg + ".x, " + customDataReg + ".y\n" + "frc " + depthCol + ".x, " + depthCol + ".x\n" + "sub " + uvReg + ".w, " + uvReg + ".w, " + uvReg + ".z\n" + "mul " + uvReg + ".w, " + uvReg + ".w, " + depthCol + ".x\n" + "add " + targetReg + ".w, " + uvReg + ".z, " + uvReg + ".w\n" + "mov " + uvReg + ".x, " + this._pDepthMapCoordReg + ".x\n" + "add " + uvReg + ".y, " + this._pDepthMapCoordReg + ".y, " + customDataReg + ".z\n" + "tex " + depthCol + ", " + uvReg + ", " + depthMapRegister + " <2d, nearest, clamp>\n" + "dp4 " + depthCol + ".z, " + depthCol + ", " + decReg + "\n" + "slt " + uvReg + ".z, " + this._pDepthMapCoordReg + ".z, " + depthCol + ".z\n" + "add " + uvReg + ".x, " + this._pDepthMapCoordReg + ".x, " + customDataReg + ".z\n" + "tex " + depthCol + ", " + uvReg + ", " + depthMapRegister + " <2d, nearest, clamp>\n" + "dp4 " + depthCol + ".z, " + depthCol + ", " + decReg + "\n" + "slt " + uvReg + ".w, " + this._pDepthMapCoordReg + ".z, " + depthCol + ".z\n" + "mul " + depthCol + ".x, " + this._pDepthMapCoordReg + ".x, " + customDataReg + ".y\n" + "frc " + depthCol + ".x, " + depthCol + ".x\n" + "sub " + uvReg + ".w, " + uvReg + ".w, " + uvReg + ".z\n" + "mul " + uvReg + ".w, " + uvReg + ".w, " + depthCol + ".x\n" + "add " + uvReg + ".w, " + uvReg + ".z, " + uvReg + ".w\n" + "mul " + depthCol + ".x, " + this._pDepthMapCoordReg + ".y, " + customDataReg + ".y\n" + "frc " + depthCol + ".x, " + depthCol + ".x\n" + "sub " + uvReg + ".w, " + uvReg + ".w, " + targetReg + ".w\n" + "mul " + uvReg + ".w, " + uvReg + ".w, " + depthCol + ".x\n" + "add " + targetReg + ".w, " + targetReg + ".w, " + uvReg + ".w\n";
        regCache.removeFragmentTempUsage(depthCol);
        regCache.removeFragmentTempUsage(uvReg);
        methodVO.texturesIndex = depthMapRegister.index;
        return code;
    };
    /**
     * @inheritDoc
     */
    ShadowFilteredMethod.prototype.iActivateForCascade = function (shaderObject, methodVO, stage) {
        var size = this.castingLight.shadowMapper.depthMapSize;
        var index = methodVO.secondaryFragmentConstantsIndex;
        var data = shaderObject.fragmentConstantData;
        data[index] = size;
        data[index + 1] = 1 / size;
    };
    /**
     * @inheritDoc
     */
    ShadowFilteredMethod.prototype._iGetCascadeFragmentCode = function (shaderObject, methodVO, decodeRegister, depthTexture, depthProjection, targetRegister, registerCache, sharedRegisters) {
        var code;
        var dataReg = registerCache.getFreeFragmentConstant();
        methodVO.secondaryFragmentConstantsIndex = dataReg.index * 4;
        var temp = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(temp, 1);
        var predicate = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(predicate, 1);
        code = "tex " + temp + ", " + depthProjection + ", " + depthTexture + " <2d, nearest, clamp>\n" + "dp4 " + temp + ".z, " + temp + ", " + decodeRegister + "\n" + "slt " + predicate + ".x, " + depthProjection + ".z, " + temp + ".z\n" + "add " + depthProjection + ".x, " + depthProjection + ".x, " + dataReg + ".y\n" + "tex " + temp + ", " + depthProjection + ", " + depthTexture + " <2d, nearest, clamp>\n" + "dp4 " + temp + ".z, " + temp + ", " + decodeRegister + "\n" + "slt " + predicate + ".z, " + depthProjection + ".z, " + temp + ".z\n" + "add " + depthProjection + ".y, " + depthProjection + ".y, " + dataReg + ".y\n" + "tex " + temp + ", " + depthProjection + ", " + depthTexture + " <2d, nearest, clamp>\n" + "dp4 " + temp + ".z, " + temp + ", " + decodeRegister + "\n" + "slt " + predicate + ".w, " + depthProjection + ".z, " + temp + ".z\n" + "sub " + depthProjection + ".x, " + depthProjection + ".x, " + dataReg + ".y\n" + "tex " + temp + ", " + depthProjection + ", " + depthTexture + " <2d, nearest, clamp>\n" + "dp4 " + temp + ".z, " + temp + ", " + decodeRegister + "\n" + "slt " + predicate + ".y, " + depthProjection + ".z, " + temp + ".z\n" + "mul " + temp + ".xy, " + depthProjection + ".xy, " + dataReg + ".x\n" + "frc " + temp + ".xy, " + temp + ".xy\n" + "sub " + depthProjection + ", " + predicate + ".xyzw, " + predicate + ".zwxy\n" + "mul " + depthProjection + ", " + depthProjection + ", " + temp + ".x\n" + "add " + predicate + ".xy, " + predicate + ".xy, " + depthProjection + ".zw\n" + "sub " + predicate + ".y, " + predicate + ".y, " + predicate + ".x\n" + "mul " + predicate + ".y, " + predicate + ".y, " + temp + ".y\n" + "add " + targetRegister + ".w, " + predicate + ".x, " + predicate + ".y\n";
        registerCache.removeFragmentTempUsage(temp);
        registerCache.removeFragmentTempUsage(predicate);
        return code;
    };
    return ShadowFilteredMethod;
})(ShadowMethodBase);
module.exports = ShadowFilteredMethod;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvU2hhZG93RmlsdGVyZWRNZXRob2QudHMiXSwibmFtZXMiOlsiU2hhZG93RmlsdGVyZWRNZXRob2QiLCJTaGFkb3dGaWx0ZXJlZE1ldGhvZC5jb25zdHJ1Y3RvciIsIlNoYWRvd0ZpbHRlcmVkTWV0aG9kLmlJbml0Q29uc3RhbnRzIiwiU2hhZG93RmlsdGVyZWRNZXRob2QuX3BHZXRQbGFuYXJGcmFnbWVudENvZGUiLCJTaGFkb3dGaWx0ZXJlZE1ldGhvZC5pQWN0aXZhdGVGb3JDYXNjYWRlIiwiU2hhZG93RmlsdGVyZWRNZXRob2QuX2lHZXRDYXNjYWRlRnJhZ21lbnRDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFXQSxJQUFPLGdCQUFnQixXQUFlLHFEQUFxRCxDQUFDLENBQUM7QUFFN0YsQUFJQTs7O0dBREc7SUFDRyxvQkFBb0I7SUFBU0EsVUFBN0JBLG9CQUFvQkEsVUFBeUJBO0lBRWxEQTs7OztPQUlHQTtJQUNIQSxTQVBLQSxvQkFBb0JBLENBT2JBLFlBQTZCQTtRQUV4Q0Msa0JBQU1BLFlBQVlBLENBQUNBLENBQUNBO0lBQ3JCQSxDQUFDQTtJQUVERDs7T0FFR0E7SUFDSUEsNkNBQWNBLEdBQXJCQSxVQUFzQkEsWUFBaUNBLEVBQUVBLFFBQWlCQTtRQUV6RUUsZ0JBQUtBLENBQUNBLGNBQWNBLFlBQUNBLFlBQVlBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1FBRTdDQSxJQUFJQSxZQUFZQSxHQUFpQkEsWUFBWUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQTtRQUNuRUEsSUFBSUEsS0FBS0EsR0FBa0JBLFFBQVFBLENBQUNBLHNCQUFzQkEsQ0FBQ0E7UUFDM0RBLFlBQVlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBO1FBQzdCQSxJQUFJQSxJQUFJQSxHQUFrQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsWUFBWUEsQ0FBQ0E7UUFDdEVBLFlBQVlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBQy9CQSxZQUFZQSxDQUFDQSxLQUFLQSxHQUFHQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFDQSxJQUFJQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFFREY7O09BRUdBO0lBQ0lBLHNEQUF1QkEsR0FBOUJBLFVBQStCQSxRQUFpQkEsRUFBRUEsU0FBK0JBLEVBQUVBLFFBQTRCQSxFQUFFQSxlQUFrQ0E7UUFFbEpHLElBQUlBLGdCQUFnQkEsR0FBeUJBLFFBQVFBLENBQUNBLGlCQUFpQkEsRUFBRUEsQ0FBQ0E7UUFDMUVBLElBQUlBLE1BQU1BLEdBQXlCQSxRQUFRQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO1FBQ3RFQSxJQUFJQSxPQUFPQSxHQUF5QkEsUUFBUUEsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxDQUFDQTtRQUN2RUEsQUFDQUEsaUJBRGlCQTtRQUNqQkEsT0FBT0EsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFDbEJBLElBQUlBLGFBQWFBLEdBQXlCQSxRQUFRQSxDQUFDQSx1QkFBdUJBLEVBQUVBLENBQUNBO1FBQzdFQSxJQUFJQSxRQUFRQSxHQUF5QkEsUUFBUUEsQ0FBQ0EseUJBQXlCQSxFQUFFQSxDQUFDQTtRQUMxRUEsSUFBSUEsS0FBMkJBLENBQUNBO1FBQ2hDQSxJQUFJQSxJQUFJQSxHQUFVQSxFQUFFQSxDQUFDQTtRQUNyQkEsUUFBUUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxNQUFNQSxDQUFDQSxLQUFLQSxHQUFDQSxDQUFDQSxDQUFDQTtRQUVqREEsUUFBUUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUU1Q0EsS0FBS0EsR0FBR0EsUUFBUUEsQ0FBQ0EseUJBQXlCQSxFQUFFQSxDQUFDQTtRQUM3Q0EsUUFBUUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV6Q0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxJQUFJQSxHQUU3REEsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxJQUFJQSxHQUFHQSxnQkFBZ0JBLEdBQUdBLHlCQUF5QkEsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxNQUFNQSxHQUFHQSxRQUFRQSxHQUFHQSxNQUFNQSxHQUV4UEEsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxNQUFNQSxHQUFHQSxhQUFhQSxHQUFHQSxNQUFNQSxHQUNuRkEsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsR0FBR0EsZ0JBQWdCQSxHQUFHQSx5QkFBeUJBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FFdE9BLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsTUFBTUEsR0FBR0EsYUFBYUEsR0FBR0EsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsU0FBU0EsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FFbFVBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsTUFBTUEsR0FBR0EsTUFBTUEsR0FBR0EsS0FBS0EsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxHQUFHQSxNQUFNQSxHQUFHQSxhQUFhQSxHQUFHQSxNQUFNQSxHQUNoSkEsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsSUFBSUEsR0FBR0EsS0FBS0EsR0FBR0EsSUFBSUEsR0FBR0EsZ0JBQWdCQSxHQUFHQSx5QkFBeUJBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsTUFBTUEsR0FBR0EsUUFBUUEsR0FBR0EsTUFBTUEsR0FFdE9BLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsTUFBTUEsR0FBR0EsYUFBYUEsR0FBR0EsTUFBTUEsR0FDbkZBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLElBQUlBLEdBQUdBLEtBQUtBLEdBQUdBLElBQUlBLEdBQUdBLGdCQUFnQkEsR0FBR0EseUJBQXlCQSxHQUFHQSxNQUFNQSxHQUFHQSxRQUFRQSxHQUFHQSxNQUFNQSxHQUFHQSxRQUFRQSxHQUFHQSxJQUFJQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxHQUFHQSxNQUFNQSxHQUFHQSxLQUFLQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBR3RPQSxNQUFNQSxHQUFHQSxRQUFRQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLE1BQU1BLEdBQUdBLGFBQWFBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBRTlUQSxNQUFNQSxHQUFHQSxRQUFRQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQUdBLE1BQU1BLEdBQUdBLGFBQWFBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLEtBQUtBLEdBQUdBLE1BQU1BLEdBQUdBLFFBQVFBLEdBQUdBLE1BQU1BLEdBQUdBLE1B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R0EsTUFBTUEsR0FFbFRBLE1BQU1BLEdBQUdBLGVBQWVBLEdBQUdBLE1BQU1BLEdBQUdBLGVBQWVBLEdBQUdBLE1BQU1BLEdBQUdBLE9BQU9BLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLEdBQUdBLGVBQWVBLEdBQUdBLElBQUlBLEdBQUdBLFlBQVlBLEdBQUdBLHlCQUF5QkEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsR0FBR0EsY0FBY0EsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FBR0EsU0FBU0EsR0FBR0EsTUFBTUEsR0FBR0EsZUFBZUEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FFbFRBLE1BQU1BLEdBQUdBLGVBQWVBLEdBQUdBLE1BQU1BLEdBQUdBLGVBQWVBLEdBQUdBLE1BQU1BLEdBQUdBLE9BQU9BLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLElBQUlBLEdBQUdBLGVBQWVBLEdBQUdBLElBQUlBLEdBQUdBLFlBQVlBLEdBQUdBLHlCQUF5QkEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsSUFBSUEsR0FBR0EsY0FBY0EsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FBR0EsU0FBU0EsR0FBR0EsTUFBTUEsR0FBR0EsZUFBZUEsR0FBR0EsTUFBTUEsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsR0FFbFRBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLGVBQWVBLEdBQUdBLE9BQU9BLEdBQUdBLE9BQU9BLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBQUdBLElBQUlBLEdBQUdBLE9BQU9BLEdBR2pIQSxNQUFNQSxHQUFHQSxlQUFlQSxHQUFHQSxJQUFJQSxHQUFHQSxTQUFTQSxHQUFHQSxTQUFTQSxHQUFHQSxTQUFTQSxHQUFHQSxTQUFTQSxHQUFHQSxNQUFNQSxHQUFHQSxlQUFlQSxHQUFHQSxJQUFJQSxHQUFHQSxlQUFlQSxHQUFHQSxJQUFJQSxHQUFHQSxJQUFJQSxHQUFHQSxNQUFNQSxHQUUxSkEsTUFBTUEsR0FBR0EsU0FBU0EsR0FBR0EsT0FBT0EsR0FBR0EsU0FBU0EsR0FBR0EsT0FBT0EsR0FBR0EsZUFBZUEsR0FBR0EsT0FBT0EsR0FFOUVBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLEdBQUdBLE1BQU1BLEdBQUdBLGNBQWNBLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLEdBQUdBLFNBQVNBLEdBQUdBLE1BQU1BLENBQUNBO1FBRXZOQSxhQUFhQSxDQUFDQSx1QkFBdUJBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBQzVDQSxhQUFhQSxDQUFDQSx1QkFBdUJBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO1FBQ2pEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtJQUNiQSxDQUFDQTtJQUNGTCwyQkFBQ0E7QUFBREEsQ0ExSEEsQUEwSENBLEVBMUhrQyxnQkFBZ0IsRUEwSGxEO0FBRUQsQUFBOEIsaUJBQXJCLG9CQUFvQixDQUFDIiwiZmlsZSI6Im1ldGhvZHMvU2hhZG93RmlsdGVyZWRNZXRob2QuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpcmVjdGlvbmFsTGlnaHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2VudGl0aWVzL0RpcmVjdGlvbmFsTGlnaHRcIik7XHJcblxyXG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xyXG5cclxuaW1wb3J0IFNoYWRlckxpZ2h0aW5nT2JqZWN0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyTGlnaHRpbmdPYmplY3RcIik7XHJcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xyXG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckVsZW1lbnRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xyXG5cclxuaW1wb3J0IE1ldGhvZFZPXHRcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9kYXRhL01ldGhvZFZPXCIpO1xyXG5pbXBvcnQgU2hhZG93TWV0aG9kQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9tZXRob2RzL1NoYWRvd01ldGhvZEJhc2VcIik7XHJcblxyXG4vKipcclxuICogU2hhZG93RmlsdGVyZWRNZXRob2QgcHJvdmlkZXMgYSBzb2Z0ZW5lZCBzaGFkb3dpbmcgdGVjaG5pcXVlIGJ5IGJpbGluZWFybHkgaW50ZXJwb2xhdGluZyBzaGFkb3cgY29tcGFyaXNvblxyXG4gKiByZXN1bHRzIG9mIG5laWdoYm91cmluZyBwaXhlbHMuXHJcbiAqL1xyXG5jbGFzcyBTaGFkb3dGaWx0ZXJlZE1ldGhvZCBleHRlbmRzIFNoYWRvd01ldGhvZEJhc2Vcclxue1xyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgRGlmZnVzZUJhc2ljTWV0aG9kIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBjYXN0aW5nTGlnaHQgVGhlIGxpZ2h0IGNhc3RpbmcgdGhlIHNoYWRvd1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGNhc3RpbmdMaWdodDpEaXJlY3Rpb25hbExpZ2h0KVxyXG5cdHtcclxuXHRcdHN1cGVyKGNhc3RpbmdMaWdodCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdERvY1xyXG5cdCAqL1xyXG5cdHB1YmxpYyBpSW5pdENvbnN0YW50cyhzaGFkZXJPYmplY3Q6U2hhZGVyTGlnaHRpbmdPYmplY3QsIG1ldGhvZFZPOk1ldGhvZFZPKVxyXG5cdHtcclxuXHRcdHN1cGVyLmlJbml0Q29uc3RhbnRzKHNoYWRlck9iamVjdCwgbWV0aG9kVk8pO1xyXG5cclxuXHRcdHZhciBmcmFnbWVudERhdGE6QXJyYXk8bnVtYmVyPiA9IHNoYWRlck9iamVjdC5mcmFnbWVudENvbnN0YW50RGF0YTtcclxuXHRcdHZhciBpbmRleDpudW1iZXIgLyppbnQqLyA9IG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XHJcblx0XHRmcmFnbWVudERhdGFbaW5kZXggKyA4XSA9IC41O1xyXG5cdFx0dmFyIHNpemU6bnVtYmVyIC8qaW50Ki8gPSB0aGlzLmNhc3RpbmdMaWdodC5zaGFkb3dNYXBwZXIuZGVwdGhNYXBTaXplO1xyXG5cdFx0ZnJhZ21lbnREYXRhW2luZGV4ICsgOV0gPSBzaXplO1xyXG5cdFx0ZnJhZ21lbnREYXRhW2luZGV4ICsgMTBdID0gMS9zaXplO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXREb2NcclxuXHQgKi9cclxuXHRwdWJsaWMgX3BHZXRQbGFuYXJGcmFnbWVudENvZGUobWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ0NhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xyXG5cdHtcclxuXHRcdHZhciBkZXB0aE1hcFJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ0NhY2hlLmdldEZyZWVUZXh0dXJlUmVnKCk7XHJcblx0XHR2YXIgZGVjUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ0NhY2hlLmdldEZyZWVGcmFnbWVudENvbnN0YW50KCk7XHJcblx0XHR2YXIgZGF0YVJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdDYWNoZS5nZXRGcmVlRnJhZ21lbnRDb25zdGFudCgpO1xyXG5cdFx0Ly8gVE9ETzogbm90IHVzZWRcclxuXHRcdGRhdGFSZWcgPSBkYXRhUmVnO1xyXG5cdFx0dmFyIGN1c3RvbURhdGFSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gcmVnQ2FjaGUuZ2V0RnJlZUZyYWdtZW50Q29uc3RhbnQoKTtcclxuXHRcdHZhciBkZXB0aENvbDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdDYWNoZS5nZXRGcmVlRnJhZ21lbnRWZWN0b3JUZW1wKCk7XHJcblx0XHR2YXIgdXZSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50O1xyXG5cdFx0dmFyIGNvZGU6c3RyaW5nID0gXCJcIjtcclxuXHRcdG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXggPSBkZWNSZWcuaW5kZXgqNDtcclxuXHJcblx0XHRyZWdDYWNoZS5hZGRGcmFnbWVudFRlbXBVc2FnZXMoZGVwdGhDb2wsIDEpO1xyXG5cclxuXHRcdHV2UmVnID0gcmVnQ2FjaGUuZ2V0RnJlZUZyYWdtZW50VmVjdG9yVGVtcCgpO1xyXG5cdFx0cmVnQ2FjaGUuYWRkRnJhZ21lbnRUZW1wVXNhZ2VzKHV2UmVnLCAxKTtcclxuXHJcblx0XHRjb2RlICs9IFwibW92IFwiICsgdXZSZWcgKyBcIiwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiXFxuXCIgK1xyXG5cclxuXHRcdFx0XCJ0ZXggXCIgKyBkZXB0aENvbCArIFwiLCBcIiArIHRoaXMuX3BEZXB0aE1hcENvb3JkUmVnICsgXCIsIFwiICsgZGVwdGhNYXBSZWdpc3RlciArIFwiIDwyZCwgbmVhcmVzdCwgY2xhbXA+XFxuXCIgKyBcImRwNCBcIiArIGRlcHRoQ29sICsgXCIueiwgXCIgKyBkZXB0aENvbCArIFwiLCBcIiArIGRlY1JlZyArIFwiXFxuXCIgKyBcInNsdCBcIiArIHV2UmVnICsgXCIueiwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnosIFwiICsgZGVwdGhDb2wgKyBcIi56XFxuXCIgKyAgIC8vIDAgaWYgaW4gc2hhZG93XHJcblxyXG5cdFx0XHRcImFkZCBcIiArIHV2UmVnICsgXCIueCwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLngsIFwiICsgY3VzdG9tRGF0YVJlZyArIFwiLnpcXG5cIiArIFx0Ly8gKDEsIDApXHJcblx0XHRcdFwidGV4IFwiICsgZGVwdGhDb2wgKyBcIiwgXCIgKyB1dlJlZyArIFwiLCBcIiArIGRlcHRoTWFwUmVnaXN0ZXIgKyBcIiA8MmQsIG5lYXJlc3QsIGNsYW1wPlxcblwiICsgXCJkcDQgXCIgKyBkZXB0aENvbCArIFwiLnosIFwiICsgZGVwdGhDb2wgKyBcIiwgXCIgKyBkZWNSZWcgKyBcIlxcblwiICsgXCJzbHQgXCIgKyB1dlJlZyArIFwiLncsIFwiICsgdGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgKyBcIi56LCBcIiArIGRlcHRoQ29sICsgXCIuelxcblwiICsgICAvLyAwIGlmIGluIHNoYWRvd1xyXG5cclxuXHRcdFx0XCJtdWwgXCIgKyBkZXB0aENvbCArIFwiLngsIFwiICsgdGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgKyBcIi54LCBcIiArIGN1c3RvbURhdGFSZWcgKyBcIi55XFxuXCIgKyBcImZyYyBcIiArIGRlcHRoQ29sICsgXCIueCwgXCIgKyBkZXB0aENvbCArIFwiLnhcXG5cIiArIFwic3ViIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIudywgXCIgKyB1dlJlZyArIFwiLnpcXG5cIiArIFwibXVsIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIudywgXCIgKyBkZXB0aENvbCArIFwiLnhcXG5cIiArIFwiYWRkIFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyB1dlJlZyArIFwiLnosIFwiICsgdXZSZWcgKyBcIi53XFxuXCIgK1xyXG5cclxuXHRcdFx0XCJtb3YgXCIgKyB1dlJlZyArIFwiLngsIFwiICsgdGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgKyBcIi54XFxuXCIgKyBcImFkZCBcIiArIHV2UmVnICsgXCIueSwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnksIFwiICsgY3VzdG9tRGF0YVJlZyArIFwiLnpcXG5cIiArXHQvLyAoMCwgMSlcclxuXHRcdFx0XCJ0ZXggXCIgKyBkZXB0aENvbCArIFwiLCBcIiArIHV2UmVnICsgXCIsIFwiICsgZGVwdGhNYXBSZWdpc3RlciArIFwiIDwyZCwgbmVhcmVzdCwgY2xhbXA+XFxuXCIgKyBcImRwNCBcIiArIGRlcHRoQ29sICsgXCIueiwgXCIgKyBkZXB0aENvbCArIFwiLCBcIiArIGRlY1JlZyArIFwiXFxuXCIgKyBcInNsdCBcIiArIHV2UmVnICsgXCIueiwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnosIFwiICsgZGVwdGhDb2wgKyBcIi56XFxuXCIgKyAgIC8vIDAgaWYgaW4gc2hhZG93XHJcblxyXG5cdFx0XHRcImFkZCBcIiArIHV2UmVnICsgXCIueCwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLngsIFwiICsgY3VzdG9tRGF0YVJlZyArIFwiLnpcXG5cIiArXHQvLyAoMSwgMSlcclxuXHRcdFx0XCJ0ZXggXCIgKyBkZXB0aENvbCArIFwiLCBcIiArIHV2UmVnICsgXCIsIFwiICsgZGVwdGhNYXBSZWdpc3RlciArIFwiIDwyZCwgbmVhcmVzdCwgY2xhbXA+XFxuXCIgKyBcImRwNCBcIiArIGRlcHRoQ29sICsgXCIueiwgXCIgKyBkZXB0aENvbCArIFwiLCBcIiArIGRlY1JlZyArIFwiXFxuXCIgKyBcInNsdCBcIiArIHV2UmVnICsgXCIudywgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnosIFwiICsgZGVwdGhDb2wgKyBcIi56XFxuXCIgKyAgIC8vIDAgaWYgaW4gc2hhZG93XHJcblxyXG5cdFx0XHQvLyByZWNhbGN1bGF0ZSBmcmFjdGlvbiwgc2luY2Ugd2UgcmFuIG91dCBvZiByZWdpc3RlcnMgOihcclxuXHRcdFx0XCJtdWwgXCIgKyBkZXB0aENvbCArIFwiLngsIFwiICsgdGhpcy5fcERlcHRoTWFwQ29vcmRSZWcgKyBcIi54LCBcIiArIGN1c3RvbURhdGFSZWcgKyBcIi55XFxuXCIgKyBcImZyYyBcIiArIGRlcHRoQ29sICsgXCIueCwgXCIgKyBkZXB0aENvbCArIFwiLnhcXG5cIiArIFwic3ViIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIudywgXCIgKyB1dlJlZyArIFwiLnpcXG5cIiArIFwibXVsIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIudywgXCIgKyBkZXB0aENvbCArIFwiLnhcXG5cIiArIFwiYWRkIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIueiwgXCIgKyB1dlJlZyArIFwiLndcXG5cIiArXHJcblxyXG5cdFx0XHRcIm11bCBcIiArIGRlcHRoQ29sICsgXCIueCwgXCIgKyB0aGlzLl9wRGVwdGhNYXBDb29yZFJlZyArIFwiLnksIFwiICsgY3VzdG9tRGF0YVJlZyArIFwiLnlcXG5cIiArIFwiZnJjIFwiICsgZGVwdGhDb2wgKyBcIi54LCBcIiArIGRlcHRoQ29sICsgXCIueFxcblwiICsgXCJzdWIgXCIgKyB1dlJlZyArIFwiLncsIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHRhcmdldFJlZyArIFwiLndcXG5cIiArIFwibXVsIFwiICsgdXZSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIudywgXCIgKyBkZXB0aENvbCArIFwiLnhcXG5cIiArIFwiYWRkIFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyB0YXJnZXRSZWcgKyBcIi53LCBcIiArIHV2UmVnICsgXCIud1xcblwiO1xyXG5cclxuXHRcdHJlZ0NhY2hlLnJlbW92ZUZyYWdtZW50VGVtcFVzYWdlKGRlcHRoQ29sKTtcclxuXHRcdHJlZ0NhY2hlLnJlbW92ZUZyYWdtZW50VGVtcFVzYWdlKHV2UmVnKTtcclxuXHJcblx0XHRtZXRob2RWTy50ZXh0dXJlc0luZGV4ID0gZGVwdGhNYXBSZWdpc3Rlci5pbmRleDtcclxuXHJcblx0XHRyZXR1cm4gY29kZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIGlBY3RpdmF0ZUZvckNhc2NhZGUoc2hhZGVyT2JqZWN0OlNoYWRlck9iamVjdEJhc2UsIG1ldGhvZFZPOk1ldGhvZFZPLCBzdGFnZTpTdGFnZSlcclxuXHR7XHJcblx0XHR2YXIgc2l6ZTpudW1iZXIgLyppbnQqLyA9IHRoaXMuY2FzdGluZ0xpZ2h0LnNoYWRvd01hcHBlci5kZXB0aE1hcFNpemU7XHJcblx0XHR2YXIgaW5kZXg6bnVtYmVyIC8qaW50Ki8gPSBtZXRob2RWTy5zZWNvbmRhcnlGcmFnbWVudENvbnN0YW50c0luZGV4O1xyXG5cdFx0dmFyIGRhdGE6QXJyYXk8bnVtYmVyPiA9IHNoYWRlck9iamVjdC5mcmFnbWVudENvbnN0YW50RGF0YTtcclxuXHRcdGRhdGFbaW5kZXhdID0gc2l6ZTtcclxuXHRcdGRhdGFbaW5kZXggKyAxXSA9IDEvc2l6ZTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0RG9jXHJcblx0ICovXHJcblx0cHVibGljIF9pR2V0Q2FzY2FkZUZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIGRlY29kZVJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgZGVwdGhUZXh0dXJlOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgZGVwdGhQcm9qZWN0aW9uOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgdGFyZ2V0UmVnaXN0ZXI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50LCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xyXG5cdHtcclxuXHRcdHZhciBjb2RlOnN0cmluZztcclxuXHRcdHZhciBkYXRhUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZUZyYWdtZW50Q29uc3RhbnQoKTtcclxuXHRcdG1ldGhvZFZPLnNlY29uZGFyeUZyYWdtZW50Q29uc3RhbnRzSW5kZXggPSBkYXRhUmVnLmluZGV4KjQ7XHJcblx0XHR2YXIgdGVtcDpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVGcmFnbWVudFZlY3RvclRlbXAoKTtcclxuXHRcdHJlZ2lzdGVyQ2FjaGUuYWRkRnJhZ21lbnRUZW1wVXNhZ2VzKHRlbXAsIDEpO1xyXG5cdFx0dmFyIHByZWRpY2F0ZTpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdpc3RlckNhY2hlLmdldEZyZWVGcmFnbWVudFZlY3RvclRlbXAoKTtcclxuXHRcdHJlZ2lzdGVyQ2FjaGUuYWRkRnJhZ21lbnRUZW1wVXNhZ2VzKHByZWRpY2F0ZSwgMSk7XHJcblxyXG5cdFx0Y29kZSA9IFwidGV4IFwiICsgdGVtcCArIFwiLCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLCBcIiArIGRlcHRoVGV4dHVyZSArIFwiIDwyZCwgbmVhcmVzdCwgY2xhbXA+XFxuXCIgKyBcImRwNCBcIiArIHRlbXAgKyBcIi56LCBcIiArIHRlbXAgKyBcIiwgXCIgKyBkZWNvZGVSZWdpc3RlciArIFwiXFxuXCIgKyBcInNsdCBcIiArIHByZWRpY2F0ZSArIFwiLngsIFwiICsgZGVwdGhQcm9qZWN0aW9uICsgXCIueiwgXCIgKyB0ZW1wICsgXCIuelxcblwiICtcclxuXHJcblx0XHRcdFwiYWRkIFwiICsgZGVwdGhQcm9qZWN0aW9uICsgXCIueCwgXCIgKyBkZXB0aFByb2plY3Rpb24gKyBcIi54LCBcIiArIGRhdGFSZWcgKyBcIi55XFxuXCIgKyBcInRleCBcIiArIHRlbXAgKyBcIiwgXCIgKyBkZXB0aFByb2plY3Rpb24gKyBcIiwgXCIgKyBkZXB0aFRleHR1cmUgKyBcIiA8MmQsIG5lYXJlc3QsIGNsYW1wPlxcblwiICsgXCJkcDQgXCIgKyB0ZW1wICsgXCIueiwgXCIgKyB0ZW1wICsgXCIsIFwiICsgZGVjb2RlUmVnaXN0ZXIgKyBcIlxcblwiICsgXCJzbHQgXCIgKyBwcmVkaWNhdGUgKyBcIi56LCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLnosIFwiICsgdGVtcCArIFwiLnpcXG5cIiArXHJcblxyXG5cdFx0XHRcImFkZCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLnksIFwiICsgZGVwdGhQcm9qZWN0aW9uICsgXCIueSwgXCIgKyBkYXRhUmVnICsgXCIueVxcblwiICsgXCJ0ZXggXCIgKyB0ZW1wICsgXCIsIFwiICsgZGVwdGhQcm9qZWN0aW9uICsgXCIsIFwiICsgZGVwdGhUZXh0dXJlICsgXCIgPDJkLCBuZWFyZXN0LCBjbGFtcD5cXG5cIiArIFwiZHA0IFwiICsgdGVtcCArIFwiLnosIFwiICsgdGVtcCArIFwiLCBcIiArIGRlY29kZVJlZ2lzdGVyICsgXCJcXG5cIiArIFwic2x0IFwiICsgcHJlZGljYXRlICsgXCIudywgXCIgKyBkZXB0aFByb2plY3Rpb24gKyBcIi56LCBcIiArIHRlbXAgKyBcIi56XFxuXCIgK1xyXG5cclxuXHRcdFx0XCJzdWIgXCIgKyBkZXB0aFByb2plY3Rpb24gKyBcIi54LCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLngsIFwiICsgZGF0YVJlZyArIFwiLnlcXG5cIiArIFwidGV4IFwiICsgdGVtcCArIFwiLCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLCBcIiArIGRlcHRoVGV4dHVyZSArIFwiIDwyZCwgbmVhcmVzdCwgY2xhbXA+XFxuXCIgKyBcImRwNCBcIiArIHRlbXAgKyBcIi56LCBcIiArIHRlbXAgKyBcIiwgXCIgKyBkZWNvZGVSZWdpc3RlciArIFwiXFxuXCIgKyBcInNsdCBcIiArIHByZWRpY2F0ZSArIFwiLnksIFwiICsgZGVwdGhQcm9qZWN0aW9uICsgXCIueiwgXCIgKyB0ZW1wICsgXCIuelxcblwiICtcclxuXHJcblx0XHRcdFwibXVsIFwiICsgdGVtcCArIFwiLnh5LCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLnh5LCBcIiArIGRhdGFSZWcgKyBcIi54XFxuXCIgKyBcImZyYyBcIiArIHRlbXAgKyBcIi54eSwgXCIgKyB0ZW1wICsgXCIueHlcXG5cIiArXHJcblxyXG5cdFx0XHQvLyBzb21lIHN0cmFuZ2UgcmVnaXN0ZXIganVnZ2xpbmcgdG8gcHJldmVudCBhZ2FsIGJ1Z2dpbmcgb3V0XHJcblx0XHRcdFwic3ViIFwiICsgZGVwdGhQcm9qZWN0aW9uICsgXCIsIFwiICsgcHJlZGljYXRlICsgXCIueHl6dywgXCIgKyBwcmVkaWNhdGUgKyBcIi56d3h5XFxuXCIgKyBcIm11bCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLCBcIiArIGRlcHRoUHJvamVjdGlvbiArIFwiLCBcIiArIHRlbXAgKyBcIi54XFxuXCIgK1xyXG5cclxuXHRcdFx0XCJhZGQgXCIgKyBwcmVkaWNhdGUgKyBcIi54eSwgXCIgKyBwcmVkaWNhdGUgKyBcIi54eSwgXCIgKyBkZXB0aFByb2plY3Rpb24gKyBcIi56d1xcblwiICtcclxuXHJcblx0XHRcdFwic3ViIFwiICsgcHJlZGljYXRlICsgXCIueSwgXCIgKyBwcmVkaWNhdGUgKyBcIi55LCBcIiArIHByZWRpY2F0ZSArIFwiLnhcXG5cIiArIFwibXVsIFwiICsgcHJlZGljYXRlICsgXCIueSwgXCIgKyBwcmVkaWNhdGUgKyBcIi55LCBcIiArIHRlbXAgKyBcIi55XFxuXCIgKyBcImFkZCBcIiArIHRhcmdldFJlZ2lzdGVyICsgXCIudywgXCIgKyBwcmVkaWNhdGUgKyBcIi54LCBcIiArIHByZWRpY2F0ZSArIFwiLnlcXG5cIjtcclxuXHJcblx0XHRyZWdpc3RlckNhY2hlLnJlbW92ZUZyYWdtZW50VGVtcFVzYWdlKHRlbXApO1xyXG5cdFx0cmVnaXN0ZXJDYWNoZS5yZW1vdmVGcmFnbWVudFRlbXBVc2FnZShwcmVkaWNhdGUpO1xyXG5cdFx0cmV0dXJuIGNvZGU7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBTaGFkb3dGaWx0ZXJlZE1ldGhvZDsiXX0=
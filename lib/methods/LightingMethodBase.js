var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
/**
 * LightingMethodBase provides an abstract base method for shading methods that uses lights.
 * Used for diffuse and specular shaders only.
 */
var LightingMethodBase = (function (_super) {
    __extends(LightingMethodBase, _super);
    /**
     * Creates a new LightingMethodBase.
     */
    function LightingMethodBase() {
        _super.call(this);
    }
    /**
     * Get the fragment shader code that will be needed before any per-light code is added.
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param regCache The register cache used during the compilation.
     * @private
     */
    LightingMethodBase.prototype.iGetFragmentPreLightingCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that will generate the code relevant to a single light.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param lightDirReg The register containing the light direction vector.
     * @param lightColReg The register containing the light colour.
     * @param regCache The register cache used during the compilation.
     */
    LightingMethodBase.prototype.iGetFragmentCodePerLight = function (shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that will generate the code relevant to a single light probe object.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param cubeMapReg The register containing the cube map for the current probe
     * @param weightRegister A string representation of the register + component containing the current weight
     * @param regCache The register cache providing any necessary registers to the shader
     */
    LightingMethodBase.prototype.iGetFragmentCodePerProbe = function (shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param regCache The register cache used during the compilation.
     * @param targetReg The register containing the final shading output.
     * @private
     */
    LightingMethodBase.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        return "";
    };
    return LightingMethodBase;
})(ShadingMethodBase);
module.exports = LightingMethodBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvTGlnaHRpbmdNZXRob2RCYXNlLnRzIl0sIm5hbWVzIjpbIkxpZ2h0aW5nTWV0aG9kQmFzZSIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5jb25zdHJ1Y3RvciIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5pR2V0RnJhZ21lbnRQcmVMaWdodGluZ0NvZGUiLCJMaWdodGluZ01ldGhvZEJhc2UuaUdldEZyYWdtZW50Q29kZVBlckxpZ2h0IiwiTGlnaHRpbmdNZXRob2RCYXNlLmlHZXRGcmFnbWVudENvZGVQZXJQcm9iZSIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5pR2V0RnJhZ21lbnRQb3N0TGlnaHRpbmdDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQSxJQUFPLGlCQUFpQixXQUFhLHNEQUFzRCxDQUFDLENBQUM7QUFFN0YsQUFJQTs7O0dBREc7SUFDRyxrQkFBa0I7SUFBU0EsVUFBM0JBLGtCQUFrQkEsVUFBMEJBO0lBT2pEQTs7T0FFR0E7SUFDSEEsU0FWS0Esa0JBQWtCQTtRQVl0QkMsaUJBQU9BLENBQUNBO0lBQ1RBLENBQUNBO0lBRUREOzs7OztPQUtHQTtJQUNJQSx3REFBMkJBLEdBQWxDQSxVQUFtQ0EsWUFBaUNBLEVBQUVBLFFBQWlCQSxFQUFFQSxhQUFpQ0EsRUFBRUEsZUFBa0NBO1FBRTdKRSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUVERjs7Ozs7OztPQU9HQTtJQUNJQSxxREFBd0JBLEdBQS9CQSxVQUFnQ0EsWUFBaUNBLEVBQUVBLFFBQWlCQSxFQUFFQSxXQUFpQ0EsRUFBRUEsV0FBaUNBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFaE9HLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1hBLENBQUNBO0lBRURIOzs7Ozs7O09BT0dBO0lBQ0lBLHFEQUF3QkEsR0FBL0JBLFVBQWdDQSxZQUFpQ0EsRUFBRUEsUUFBaUJBLEVBQUVBLFVBQWdDQSxFQUFFQSxjQUFxQkEsRUFBRUEsYUFBaUNBLEVBQUVBLGVBQWtDQTtRQUVuTkksTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFFREo7Ozs7Ozs7T0FPR0E7SUFDSUEseURBQTRCQSxHQUFuQ0EsVUFBb0NBLFlBQWlDQSxFQUFFQSxRQUFpQkEsRUFBRUEsU0FBK0JBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFL0xLLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1hBLENBQUNBO0lBQ0ZMLHlCQUFDQTtBQUFEQSxDQWhFQSxBQWdFQ0EsRUFoRWdDLGlCQUFpQixFQWdFakQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoibWV0aG9kcy9MaWdodGluZ01ldGhvZEJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xyXG5pbXBvcnQgU2hhZGVyTGlnaHRpbmdPYmplY3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyTGlnaHRpbmdPYmplY3RcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XHJcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xyXG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJFbGVtZW50XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckVsZW1lbnRcIik7XHJcblxyXG5pbXBvcnQgTWV0aG9kVk9cdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9kYXRhL01ldGhvZFZPXCIpO1xyXG5pbXBvcnQgU2hhZGluZ01ldGhvZEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9tZXRob2RzL1NoYWRpbmdNZXRob2RCYXNlXCIpO1xyXG5cclxuLyoqXHJcbiAqIExpZ2h0aW5nTWV0aG9kQmFzZSBwcm92aWRlcyBhbiBhYnN0cmFjdCBiYXNlIG1ldGhvZCBmb3Igc2hhZGluZyBtZXRob2RzIHRoYXQgdXNlcyBsaWdodHMuXHJcbiAqIFVzZWQgZm9yIGRpZmZ1c2UgYW5kIHNwZWN1bGFyIHNoYWRlcnMgb25seS5cclxuICovXHJcbmNsYXNzIExpZ2h0aW5nTWV0aG9kQmFzZSBleHRlbmRzIFNoYWRpbmdNZXRob2RCYXNlXHJcbntcclxuXHQvKipcclxuXHQgKiBBIG1ldGhvZCB0aGF0IGlzIGV4cG9zZWQgdG8gd3JhcHBlcnMgaW4gY2FzZSB0aGUgc3RyZW5ndGggbmVlZHMgdG8gYmUgY29udHJvbGxlZFxyXG5cdCAqL1xyXG5cdHB1YmxpYyBfaU1vZHVsYXRlTWV0aG9kOihzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSkgPT4gc3RyaW5nO1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGEgbmV3IExpZ2h0aW5nTWV0aG9kQmFzZS5cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0aGUgZnJhZ21lbnQgc2hhZGVyIGNvZGUgdGhhdCB3aWxsIGJlIG5lZWRlZCBiZWZvcmUgYW55IHBlci1saWdodCBjb2RlIGlzIGFkZGVkLlxyXG5cdCAqIEBwYXJhbSBtZXRob2RWTyBUaGUgTWV0aG9kVk8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldGhvZCBkYXRhIGZvciB0aGUgY3VycmVudGx5IGNvbXBpbGVkIG1hdGVyaWFsIHBhc3MuXHJcblx0ICogQHBhcmFtIHJlZ0NhY2hlIFRoZSByZWdpc3RlciBjYWNoZSB1c2VkIGR1cmluZyB0aGUgY29tcGlsYXRpb24uXHJcblx0ICogQHByaXZhdGVcclxuXHQgKi9cclxuXHRwdWJsaWMgaUdldEZyYWdtZW50UHJlTGlnaHRpbmdDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJMaWdodGluZ09iamVjdCwgbWV0aG9kVk86TWV0aG9kVk8sIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXHJcblx0e1xyXG5cdFx0cmV0dXJuIFwiXCI7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIGZyYWdtZW50IHNoYWRlciBjb2RlIHRoYXQgd2lsbCBnZW5lcmF0ZSB0aGUgY29kZSByZWxldmFudCB0byBhIHNpbmdsZSBsaWdodC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBtZXRob2RWTyBUaGUgTWV0aG9kVk8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldGhvZCBkYXRhIGZvciB0aGUgY3VycmVudGx5IGNvbXBpbGVkIG1hdGVyaWFsIHBhc3MuXHJcblx0ICogQHBhcmFtIGxpZ2h0RGlyUmVnIFRoZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBsaWdodCBkaXJlY3Rpb24gdmVjdG9yLlxyXG5cdCAqIEBwYXJhbSBsaWdodENvbFJlZyBUaGUgcmVnaXN0ZXIgY29udGFpbmluZyB0aGUgbGlnaHQgY29sb3VyLlxyXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgdXNlZCBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uLlxyXG5cdCAqL1xyXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRDb2RlUGVyTGlnaHQoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgbGlnaHREaXJSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50LCBsaWdodENvbFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXHJcblx0e1xyXG5cdFx0cmV0dXJuIFwiXCI7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgdGhlIGZyYWdtZW50IHNoYWRlciBjb2RlIHRoYXQgd2lsbCBnZW5lcmF0ZSB0aGUgY29kZSByZWxldmFudCB0byBhIHNpbmdsZSBsaWdodCBwcm9iZSBvYmplY3QuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gbWV0aG9kVk8gVGhlIE1ldGhvZFZPIG9iamVjdCBjb250YWluaW5nIHRoZSBtZXRob2QgZGF0YSBmb3IgdGhlIGN1cnJlbnRseSBjb21waWxlZCBtYXRlcmlhbCBwYXNzLlxyXG5cdCAqIEBwYXJhbSBjdWJlTWFwUmVnIFRoZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBjdWJlIG1hcCBmb3IgdGhlIGN1cnJlbnQgcHJvYmVcclxuXHQgKiBAcGFyYW0gd2VpZ2h0UmVnaXN0ZXIgQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlZ2lzdGVyICsgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIGN1cnJlbnQgd2VpZ2h0XHJcblx0ICogQHBhcmFtIHJlZ0NhY2hlIFRoZSByZWdpc3RlciBjYWNoZSBwcm92aWRpbmcgYW55IG5lY2Vzc2FyeSByZWdpc3RlcnMgdG8gdGhlIHNoYWRlclxyXG5cdCAqL1xyXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRDb2RlUGVyUHJvYmUoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgY3ViZU1hcFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHdlaWdodFJlZ2lzdGVyOnN0cmluZywgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcclxuXHR7XHJcblx0XHRyZXR1cm4gXCJcIjtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0aGUgZnJhZ21lbnQgc2hhZGVyIGNvZGUgdGhhdCBzaG91bGQgYmUgYWRkZWQgYWZ0ZXIgYWxsIHBlci1saWdodCBjb2RlLiBVc3VhbGx5IGNvbXBvc2l0cyBldmVyeXRoaW5nIHRvIHRoZSB0YXJnZXQgcmVnaXN0ZXIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gbWV0aG9kVk8gVGhlIE1ldGhvZFZPIG9iamVjdCBjb250YWluaW5nIHRoZSBtZXRob2QgZGF0YSBmb3IgdGhlIGN1cnJlbnRseSBjb21waWxlZCBtYXRlcmlhbCBwYXNzLlxyXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgdXNlZCBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uLlxyXG5cdCAqIEBwYXJhbSB0YXJnZXRSZWcgVGhlIHJlZ2lzdGVyIGNvbnRhaW5pbmcgdGhlIGZpbmFsIHNoYWRpbmcgb3V0cHV0LlxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0cHVibGljIGlHZXRGcmFnbWVudFBvc3RMaWdodGluZ0NvZGUoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgdGFyZ2V0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcclxuXHR7XHJcblx0XHRyZXR1cm4gXCJcIjtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IExpZ2h0aW5nTWV0aG9kQmFzZTsiXX0=
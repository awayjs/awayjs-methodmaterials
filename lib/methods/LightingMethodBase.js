var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShadingMethodBase = require("awayjs-methodmaterials/lib/methods/ShadingMethodBase");
/**
 * LightingMethodBase provides an abstract base method for shading methods that uses lights.
 * Used for diffuse and specular shaders only.
 */
var LightingMethodBase = (function (_super) {
    __extends(LightingMethodBase, _super);
    /**
     * Creates a new LightingMethodBase.
     */
    function LightingMethodBase() {
        _super.call(this);
    }
    /**
     * Get the fragment shader code that will be needed before any per-light code is added.
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param regCache The register cache used during the compilation.
     * @private
     */
    LightingMethodBase.prototype.iGetFragmentPreLightingCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that will generate the code relevant to a single light.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param lightDirReg The register containing the light direction vector.
     * @param lightColReg The register containing the light colour.
     * @param regCache The register cache used during the compilation.
     */
    LightingMethodBase.prototype.iGetFragmentCodePerLight = function (shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that will generate the code relevant to a single light probe object.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param cubeMapReg The register containing the cube map for the current probe
     * @param weightRegister A string representation of the register + component containing the current weight
     * @param regCache The register cache providing any necessary registers to the shader
     */
    LightingMethodBase.prototype.iGetFragmentCodePerProbe = function (shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param regCache The register cache used during the compilation.
     * @param targetReg The register containing the final shading output.
     * @private
     */
    LightingMethodBase.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        return "";
    };
    return LightingMethodBase;
})(ShadingMethodBase);
module.exports = LightingMethodBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL21ldGhvZHMvTGlnaHRpbmdNZXRob2RCYXNlLnRzIl0sIm5hbWVzIjpbIkxpZ2h0aW5nTWV0aG9kQmFzZSIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5jb25zdHJ1Y3RvciIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5pR2V0RnJhZ21lbnRQcmVMaWdodGluZ0NvZGUiLCJMaWdodGluZ01ldGhvZEJhc2UuaUdldEZyYWdtZW50Q29kZVBlckxpZ2h0IiwiTGlnaHRpbmdNZXRob2RCYXNlLmlHZXRGcmFnbWVudENvZGVQZXJQcm9iZSIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5pR2V0RnJhZ21lbnRQb3N0TGlnaHRpbmdDb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQSxJQUFPLGlCQUFpQixXQUFhLHNEQUFzRCxDQUFDLENBQUM7QUFFN0YsQUFJQTs7O0dBREc7SUFDRyxrQkFBa0I7SUFBU0EsVUFBM0JBLGtCQUFrQkEsVUFBMEJBO0lBT2pEQTs7T0FFR0E7SUFDSEEsU0FWS0Esa0JBQWtCQTtRQVl0QkMsaUJBQU9BLENBQUNBO0lBQ1RBLENBQUNBO0lBRUREOzs7OztPQUtHQTtJQUNJQSx3REFBMkJBLEdBQWxDQSxVQUFtQ0EsWUFBaUNBLEVBQUVBLFFBQWlCQSxFQUFFQSxhQUFpQ0EsRUFBRUEsZUFBa0NBO1FBRTdKRSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUVERjs7Ozs7OztPQU9HQTtJQUNJQSxxREFBd0JBLEdBQS9CQSxVQUFnQ0EsWUFBaUNBLEVBQUVBLFFBQWlCQSxFQUFFQSxXQUFpQ0EsRUFBRUEsV0FBaUNBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFaE9HLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1hBLENBQUNBO0lBRURIOzs7Ozs7O09BT0dBO0lBQ0lBLHFEQUF3QkEsR0FBL0JBLFVBQWdDQSxZQUFpQ0EsRUFBRUEsUUFBaUJBLEVBQUVBLFVBQWdDQSxFQUFFQSxjQUFxQkEsRUFBRUEsYUFBaUNBLEVBQUVBLGVBQWtDQTtRQUVuTkksTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFFREo7Ozs7Ozs7T0FPR0E7SUFDSUEseURBQTRCQSxHQUFuQ0EsVUFBb0NBLFlBQWlDQSxFQUFFQSxRQUFpQkEsRUFBRUEsU0FBK0JBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFL0xLLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1hBLENBQUNBO0lBQ0ZMLHlCQUFDQTtBQUFEQSxDQWhFQSxBQWdFQ0EsRUFoRWdDLGlCQUFpQixFQWdFakQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoibWV0aG9kcy9MaWdodGluZ01ldGhvZEJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlXCIpO1xuaW1wb3J0IFNoYWRlckxpZ2h0aW5nT2JqZWN0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NoYWRlckxpZ2h0aW5nT2JqZWN0XCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckRhdGFcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuXG5pbXBvcnQgTWV0aG9kVk9cdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9kYXRhL01ldGhvZFZPXCIpO1xuaW1wb3J0IFNoYWRpbmdNZXRob2RCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvbWV0aG9kcy9TaGFkaW5nTWV0aG9kQmFzZVwiKTtcblxuLyoqXG4gKiBMaWdodGluZ01ldGhvZEJhc2UgcHJvdmlkZXMgYW4gYWJzdHJhY3QgYmFzZSBtZXRob2QgZm9yIHNoYWRpbmcgbWV0aG9kcyB0aGF0IHVzZXMgbGlnaHRzLlxuICogVXNlZCBmb3IgZGlmZnVzZSBhbmQgc3BlY3VsYXIgc2hhZGVycyBvbmx5LlxuICovXG5jbGFzcyBMaWdodGluZ01ldGhvZEJhc2UgZXh0ZW5kcyBTaGFkaW5nTWV0aG9kQmFzZVxue1xuXHQvKipcblx0ICogQSBtZXRob2QgdGhhdCBpcyBleHBvc2VkIHRvIHdyYXBwZXJzIGluIGNhc2UgdGhlIHN0cmVuZ3RoIG5lZWRzIHRvIGJlIGNvbnRyb2xsZWRcblx0ICovXG5cdHB1YmxpYyBfaU1vZHVsYXRlTWV0aG9kOihzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgbWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSkgPT4gc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IExpZ2h0aW5nTWV0aG9kQmFzZS5cblx0ICovXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBmcmFnbWVudCBzaGFkZXIgY29kZSB0aGF0IHdpbGwgYmUgbmVlZGVkIGJlZm9yZSBhbnkgcGVyLWxpZ2h0IGNvZGUgaXMgYWRkZWQuXG5cdCAqIEBwYXJhbSBtZXRob2RWTyBUaGUgTWV0aG9kVk8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldGhvZCBkYXRhIGZvciB0aGUgY3VycmVudGx5IGNvbXBpbGVkIG1hdGVyaWFsIHBhc3MuXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgdXNlZCBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHVibGljIGlHZXRGcmFnbWVudFByZUxpZ2h0aW5nQ29kZShzaGFkZXJPYmplY3Q6U2hhZGVyTGlnaHRpbmdPYmplY3QsIG1ldGhvZFZPOk1ldGhvZFZPLCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBmcmFnbWVudCBzaGFkZXIgY29kZSB0aGF0IHdpbGwgZ2VuZXJhdGUgdGhlIGNvZGUgcmVsZXZhbnQgdG8gYSBzaW5nbGUgbGlnaHQuXG5cdCAqXG5cdCAqIEBwYXJhbSBtZXRob2RWTyBUaGUgTWV0aG9kVk8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldGhvZCBkYXRhIGZvciB0aGUgY3VycmVudGx5IGNvbXBpbGVkIG1hdGVyaWFsIHBhc3MuXG5cdCAqIEBwYXJhbSBsaWdodERpclJlZyBUaGUgcmVnaXN0ZXIgY29udGFpbmluZyB0aGUgbGlnaHQgZGlyZWN0aW9uIHZlY3Rvci5cblx0ICogQHBhcmFtIGxpZ2h0Q29sUmVnIFRoZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBsaWdodCBjb2xvdXIuXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgdXNlZCBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uLlxuXHQgKi9cblx0cHVibGljIGlHZXRGcmFnbWVudENvZGVQZXJMaWdodChzaGFkZXJPYmplY3Q6U2hhZGVyTGlnaHRpbmdPYmplY3QsIG1ldGhvZFZPOk1ldGhvZFZPLCBsaWdodERpclJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIGxpZ2h0Q29sUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgZnJhZ21lbnQgc2hhZGVyIGNvZGUgdGhhdCB3aWxsIGdlbmVyYXRlIHRoZSBjb2RlIHJlbGV2YW50IHRvIGEgc2luZ2xlIGxpZ2h0IHByb2JlIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIG1ldGhvZFZPIFRoZSBNZXRob2RWTyBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0aG9kIGRhdGEgZm9yIHRoZSBjdXJyZW50bHkgY29tcGlsZWQgbWF0ZXJpYWwgcGFzcy5cblx0ICogQHBhcmFtIGN1YmVNYXBSZWcgVGhlIHJlZ2lzdGVyIGNvbnRhaW5pbmcgdGhlIGN1YmUgbWFwIGZvciB0aGUgY3VycmVudCBwcm9iZVxuXHQgKiBAcGFyYW0gd2VpZ2h0UmVnaXN0ZXIgQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlZ2lzdGVyICsgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIGN1cnJlbnQgd2VpZ2h0XG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgcHJvdmlkaW5nIGFueSBuZWNlc3NhcnkgcmVnaXN0ZXJzIHRvIHRoZSBzaGFkZXJcblx0ICovXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRDb2RlUGVyUHJvYmUoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgY3ViZU1hcFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHdlaWdodFJlZ2lzdGVyOnN0cmluZywgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCB0aGUgZnJhZ21lbnQgc2hhZGVyIGNvZGUgdGhhdCBzaG91bGQgYmUgYWRkZWQgYWZ0ZXIgYWxsIHBlci1saWdodCBjb2RlLiBVc3VhbGx5IGNvbXBvc2l0cyBldmVyeXRoaW5nIHRvIHRoZSB0YXJnZXQgcmVnaXN0ZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBtZXRob2RWTyBUaGUgTWV0aG9kVk8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1ldGhvZCBkYXRhIGZvciB0aGUgY3VycmVudGx5IGNvbXBpbGVkIG1hdGVyaWFsIHBhc3MuXG5cdCAqIEBwYXJhbSByZWdDYWNoZSBUaGUgcmVnaXN0ZXIgY2FjaGUgdXNlZCBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uLlxuXHQgKiBAcGFyYW0gdGFyZ2V0UmVnIFRoZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBmaW5hbCBzaGFkaW5nIG91dHB1dC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRQb3N0TGlnaHRpbmdDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJMaWdodGluZ09iamVjdCwgbWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxufVxuXG5leHBvcnQgPSBMaWdodGluZ01ldGhvZEJhc2U7Il19
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BlendMode = require("awayjs-display/lib/base/BlendMode");
var StaticLightPicker = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var ContextGLCompareMode = require("awayjs-stagegl/lib/base/ContextGLCompareMode");
var RenderObjectBase = require("awayjs-renderergl/lib/compilation/RenderObjectBase");
var MethodPassMode = require("awayjs-methodmaterials/lib/passes/MethodPassMode");
var MethodPass = require("awayjs-methodmaterials/lib/passes/MethodPass");
var MethodMaterialMode = require("awayjs-methodmaterials/lib/MethodMaterialMode");
/**
 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
 * using material methods to define their appearance.
 */
var RenderMethodMaterialObject = (function (_super) {
    __extends(RenderMethodMaterialObject, _super);
    /**
     * Creates a new CompiledPass object.
     *
     * @param material The material to which this pass belongs.
     */
    function RenderMethodMaterialObject(pool, renderObjectOwner, renderableClass, stage) {
        _super.call(this, pool, renderObjectOwner, renderableClass, stage);
        this._material = renderObjectOwner;
    }
    Object.defineProperty(RenderMethodMaterialObject.prototype, "numLights", {
        /**
         * The maximum total number of lights provided by the light picker.
         */
        get: function () {
            return this._material.lightPicker ? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights + this._material.lightPicker.numCastingDirectionalLights + this._material.lightPicker.numCastingPointLights : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderMethodMaterialObject.prototype, "numNonCasters", {
        /**
         * The amount of lights that don't cast shadows.
         */
        get: function () {
            return this._material.lightPicker ? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights : 0;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    RenderMethodMaterialObject.prototype._pUpdateRenderObject = function () {
        _super.prototype._pUpdateRenderObject.call(this);
        this.initPasses();
        this.setBlendAndCompareModes();
        this._pClearScreenPasses();
        if (this._material.mode == MethodMaterialMode.MULTI_PASS) {
            if (this._casterLightPass)
                this._pAddScreenPass(this._casterLightPass);
            if (this._nonCasterLightPasses)
                for (var i = 0; i < this._nonCasterLightPasses.length; ++i)
                    this._pAddScreenPass(this._nonCasterLightPasses[i]);
        }
        if (this._screenPass)
            this._pAddScreenPass(this._screenPass);
    };
    /**
     * Initializes all the passes and their dependent passes.
     */
    RenderMethodMaterialObject.prototype.initPasses = function () {
        // let the effects pass handle everything if there are no lights, when there are effect methods applied
        // after shading, or when the material mode is single pass.
        if (this.numLights == 0 || this._material.numEffectMethods > 0 || this._material.mode == MethodMaterialMode.SINGLE_PASS)
            this.initEffectPass();
        else if (this._screenPass)
            this.removeEffectPass();
        // only use a caster light pass if shadows need to be rendered
        if (this._material.shadowMethod && this._material.mode == MethodMaterialMode.MULTI_PASS)
            this.initCasterLightPass();
        else if (this._casterLightPass)
            this.removeCasterLightPass();
        // only use non caster light passes if there are lights that don't cast
        if (this.numNonCasters > 0 && this._material.mode == MethodMaterialMode.MULTI_PASS)
            this.initNonCasterLightPasses();
        else if (this._nonCasterLightPasses)
            this.removeNonCasterLightPasses();
    };
    /**
     * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.
     */
    RenderMethodMaterialObject.prototype.setBlendAndCompareModes = function () {
        var forceSeparateMVP = Boolean(this._casterLightPass || this._screenPass);
        // caster light pass is always first if it exists, hence it uses normal blending
        if (this._casterLightPass) {
            this._casterLightPass.forceSeparateMVP = forceSeparateMVP;
            this._casterLightPass.setBlendMode(BlendMode.NORMAL);
            this._casterLightPass.depthCompareMode = this._material.depthCompareMode;
        }
        if (this._nonCasterLightPasses) {
            var firstAdditiveIndex = 0;
            // if there's no caster light pass, the first non caster light pass will be the first
            // and should use normal blending
            if (!this._casterLightPass) {
                this._nonCasterLightPasses[0].forceSeparateMVP = forceSeparateMVP;
                this._nonCasterLightPasses[0].setBlendMode(BlendMode.NORMAL);
                this._nonCasterLightPasses[0].depthCompareMode = this._material.depthCompareMode;
                firstAdditiveIndex = 1;
            }
            for (var i = firstAdditiveIndex; i < this._nonCasterLightPasses.length; ++i) {
                this._nonCasterLightPasses[i].forceSeparateMVP = forceSeparateMVP;
                this._nonCasterLightPasses[i].setBlendMode(BlendMode.ADD);
                this._nonCasterLightPasses[i].depthCompareMode = ContextGLCompareMode.LESS_EQUAL;
            }
        }
        if (this._casterLightPass || this._nonCasterLightPasses) {
            //cannot be blended by blendmode property if multipass enabled
            this._pRequiresBlending = false;
            // there are light passes, so this should be blended in
            if (this._screenPass) {
                this._screenPass.mode = MethodPassMode.EFFECTS;
                this._screenPass.depthCompareMode = ContextGLCompareMode.LESS_EQUAL;
                this._screenPass.setBlendMode(BlendMode.LAYER);
                this._screenPass.forceSeparateMVP = forceSeparateMVP;
            }
        }
        else if (this._screenPass) {
            this._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));
            // effects pass is the only pass, so it should just blend normally
            this._screenPass.mode = MethodPassMode.SUPER_SHADER;
            this._screenPass.depthCompareMode = this._material.depthCompareMode;
            this._screenPass.preserveAlpha = this._pRequiresBlending;
            this._screenPass.colorTransform = this._material.colorTransform;
            this._screenPass.setBlendMode((this._material.blendMode == BlendMode.NORMAL && this._pRequiresBlending) ? BlendMode.LAYER : this._material.blendMode);
            this._screenPass.forceSeparateMVP = false;
        }
    };
    RenderMethodMaterialObject.prototype.initCasterLightPass = function () {
        if (this._casterLightPass == null)
            this._casterLightPass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);
        this._casterLightPass.lightPicker = new StaticLightPicker([this._material.shadowMethod.castingLight]);
        this._casterLightPass.shadowMethod = this._material.shadowMethod;
        this._casterLightPass.diffuseMethod = this._material.diffuseMethod;
        this._casterLightPass.ambientMethod = this._material.ambientMethod;
        this._casterLightPass.normalMethod = this._material.normalMethod;
        this._casterLightPass.specularMethod = this._material.specularMethod;
    };
    RenderMethodMaterialObject.prototype.removeCasterLightPass = function () {
        this._casterLightPass.dispose();
        this._pRemoveScreenPass(this._casterLightPass);
        this._casterLightPass = null;
    };
    RenderMethodMaterialObject.prototype.initNonCasterLightPasses = function () {
        this.removeNonCasterLightPasses();
        var pass;
        var numDirLights = this._material.lightPicker.numDirectionalLights;
        var numPointLights = this._material.lightPicker.numPointLights;
        var numLightProbes = this._material.lightPicker.numLightProbes;
        var dirLightOffset = 0;
        var pointLightOffset = 0;
        var probeOffset = 0;
        if (!this._casterLightPass) {
            numDirLights += this._material.lightPicker.numCastingDirectionalLights;
            numPointLights += this._material.lightPicker.numCastingPointLights;
        }
        this._nonCasterLightPasses = new Array();
        while (dirLightOffset < numDirLights || pointLightOffset < numPointLights || probeOffset < numLightProbes) {
            pass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);
            pass.includeCasters = this._material.shadowMethod == null;
            pass.directionalLightsOffset = dirLightOffset;
            pass.pointLightsOffset = pointLightOffset;
            pass.lightProbesOffset = probeOffset;
            pass.lightPicker = this._material.lightPicker;
            pass.diffuseMethod = this._material.diffuseMethod;
            pass.ambientMethod = this._material.ambientMethod;
            pass.normalMethod = this._material.normalMethod;
            pass.specularMethod = this._material.specularMethod;
            this._nonCasterLightPasses.push(pass);
            dirLightOffset += pass.numDirectionalLights;
            pointLightOffset += pass.numPointLights;
            probeOffset += pass.numLightProbes;
        }
    };
    RenderMethodMaterialObject.prototype.removeNonCasterLightPasses = function () {
        if (!this._nonCasterLightPasses)
            return;
        for (var i = 0; i < this._nonCasterLightPasses.length; ++i)
            this._pRemoveScreenPass(this._nonCasterLightPasses[i]);
        this._nonCasterLightPasses = null;
    };
    RenderMethodMaterialObject.prototype.removeEffectPass = function () {
        if (this._screenPass.ambientMethod != this._material.ambientMethod)
            this._screenPass.ambientMethod.dispose();
        if (this._screenPass.diffuseMethod != this._material.diffuseMethod)
            this._screenPass.diffuseMethod.dispose();
        if (this._screenPass.specularMethod != this._material.specularMethod)
            this._screenPass.specularMethod.dispose();
        if (this._screenPass.normalMethod != this._material.normalMethod)
            this._screenPass.normalMethod.dispose();
        this._pRemoveScreenPass(this._screenPass);
        this._screenPass = null;
    };
    RenderMethodMaterialObject.prototype.initEffectPass = function () {
        if (this._screenPass == null)
            this._screenPass = new MethodPass(MethodPassMode.SUPER_SHADER, this, this._material, this._renderableClass, this._stage);
        if (this._material.mode == MethodMaterialMode.SINGLE_PASS) {
            this._screenPass.ambientMethod = this._material.ambientMethod;
            this._screenPass.diffuseMethod = this._material.diffuseMethod;
            this._screenPass.specularMethod = this._material.specularMethod;
            this._screenPass.normalMethod = this._material.normalMethod;
            this._screenPass.shadowMethod = this._material.shadowMethod;
        }
        else if (this._material.mode == MethodMaterialMode.MULTI_PASS) {
            if (this.numLights == 0) {
                this._screenPass.ambientMethod = this._material.ambientMethod;
            }
            else {
                this._screenPass.ambientMethod = null;
            }
            this._screenPass.preserveAlpha = false;
            this._screenPass.normalMethod = this._material.normalMethod;
        }
        //update effect methods
        var i = 0;
        var effectMethod;
        var len = Math.max(this._material.numEffectMethods, this._screenPass.numEffectMethods);
        while (i < len) {
            effectMethod = this._material.getEffectMethodAt(i);
            if (effectMethod != this._screenPass.getEffectMethodAt(i)) {
                this._screenPass.removeEffectMethodAt(i);
                if (effectMethod != null) {
                    if (i < this._screenPass.numEffectMethods)
                        this._screenPass.addEffectMethodAt(effectMethod, i);
                    else
                        this._screenPass.addEffectMethod(effectMethod);
                }
            }
            i++;
        }
    };
    /**
     * @inheritDoc
     */
    RenderMethodMaterialObject.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        //TODO
    };
    /**
     *
     */
    RenderMethodMaterialObject.id = "method";
    return RenderMethodMaterialObject;
})(RenderObjectBase);
module.exports = RenderMethodMaterialObject;

//# sourceMappingURL=data:application/json;base64,
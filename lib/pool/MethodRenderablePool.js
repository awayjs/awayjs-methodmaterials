var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RenderablePoolBase = require("awayjs-renderergl/lib/pool/RenderablePoolBase");
var RenderObjectPool = require("awayjs-renderergl/lib/compilation/RenderObjectPool");
var RenderMethodMaterialObject = require("awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject");
/**
 * @class away.pool.MethodRenderablePool
 */
var MethodRenderablePool = (function (_super) {
    __extends(MethodRenderablePool, _super);
    /**
     * //TODO
     *
     * @param renderableClass
     */
    function MethodRenderablePool(renderableClass, stage) {
        _super.call(this, renderableClass, stage);
        this._methodMaterialRenderObjectPool = new RenderObjectPool(RenderMethodMaterialObject, this._renderableClass, this._stage);
    }
    /**
     *
     * @param material
     * @param renderable
     */
    MethodRenderablePool.prototype.getMethodRenderObject = function (renderObjectOwner) {
        return this._methodMaterialRenderObjectPool.getItem(renderObjectOwner);
    };
    /**
     * //TODO
     *
     * @param renderableClass
     * @returns MethodRenderablePool
     */
    MethodRenderablePool.getPool = function (renderableClass, stage) {
        var pools = (RenderablePoolBase._pools[stage.stageIndex] || (RenderablePoolBase._pools[stage.stageIndex] = new Object()));
        return (pools[renderableClass.id] || (pools[renderableClass.id] = new MethodRenderablePool(renderableClass, stage)));
    };
    return MethodRenderablePool;
})(RenderablePoolBase);
module.exports = MethodRenderablePool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL3Bvb2wvTWV0aG9kUmVuZGVyYWJsZVBvb2wudHMiXSwibmFtZXMiOlsiTWV0aG9kUmVuZGVyYWJsZVBvb2wiLCJNZXRob2RSZW5kZXJhYmxlUG9vbC5jb25zdHJ1Y3RvciIsIk1ldGhvZFJlbmRlcmFibGVQb29sLmdldE1ldGhvZFJlbmRlck9iamVjdCIsIk1ldGhvZFJlbmRlcmFibGVQb29sLmdldFBvb2wiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLElBQU8sa0JBQWtCLFdBQWEsK0NBQStDLENBQUMsQ0FBQztBQUV2RixJQUFPLGdCQUFnQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFLM0YsSUFBTywwQkFBMEIsV0FBVyxtRUFBbUUsQ0FBQyxDQUFDO0FBRWpILEFBR0E7O0dBREc7SUFDRyxvQkFBb0I7SUFBU0EsVUFBN0JBLG9CQUFvQkEsVUFBMkJBO0lBSXBEQTs7OztPQUlHQTtJQUNIQSxTQVRLQSxvQkFBb0JBLENBU2JBLGVBQWdDQSxFQUFFQSxLQUFXQTtRQUV4REMsa0JBQU1BLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRTlCQSxJQUFJQSxDQUFDQSwrQkFBK0JBLEdBQUdBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsMEJBQTBCQSxFQUFFQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQzdIQSxDQUFDQTtJQUVERDs7OztPQUlHQTtJQUNJQSxvREFBcUJBLEdBQTVCQSxVQUE2QkEsaUJBQW9DQTtRQUVoRUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsK0JBQStCQSxDQUFDQSxPQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ3hFQSxDQUFDQTtJQUVERjs7Ozs7T0FLR0E7SUFDV0EsNEJBQU9BLEdBQXJCQSxVQUFzQkEsZUFBZ0NBLEVBQUVBLEtBQVdBO1FBRWxFRyxJQUFJQSxLQUFLQSxHQUFVQSxDQUFDQSxrQkFBa0JBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFaklBLE1BQU1BLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLGVBQWVBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLGVBQWVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLG9CQUFvQkEsQ0FBQ0EsZUFBZUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDdEhBLENBQUNBO0lBQ0ZILDJCQUFDQTtBQUFEQSxDQXRDQSxBQXNDQ0EsRUF0Q2tDLGtCQUFrQixFQXNDcEQ7QUFFRCxBQUE4QixpQkFBckIsb0JBQW9CLENBQUMiLCJmaWxlIjoicG9vbC9NZXRob2RSZW5kZXJhYmxlUG9vbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xuaW1wb3J0IElSZW5kZXJhYmxlT3duZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL0lSZW5kZXJhYmxlT3duZXJcIik7XG5pbXBvcnQgTWF0ZXJpYWxCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9tYXRlcmlhbHMvTWF0ZXJpYWxCYXNlXCIpO1xuaW1wb3J0IElSZW5kZXJhYmxlUG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3Bvb2wvSVJlbmRlcmFibGVQb29sXCIpO1xuaW1wb3J0IElSZW5kZXJPYmplY3RcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9wb29sL0lSZW5kZXJPYmplY3RcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuXG5pbXBvcnQgUmVuZGVyZXJCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9iYXNlL1JlbmRlcmVyQmFzZVwiKTtcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XG5pbXBvcnQgUmVuZGVyYWJsZVBvb2xCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZVBvb2xCYXNlXCIpO1xuaW1wb3J0IElSZW5kZXJhYmxlQ2xhc3NcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0lSZW5kZXJhYmxlQ2xhc3NcIik7XG5pbXBvcnQgUmVuZGVyT2JqZWN0UG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdFBvb2xcIik7XG5pbXBvcnQgU2t5Ym94UmVuZGVyT2JqZWN0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1NreWJveFJlbmRlck9iamVjdFwiKTtcbmltcG9ydCBEZXB0aFJlbmRlck9iamVjdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9EZXB0aFJlbmRlck9iamVjdFwiKTtcbmltcG9ydCBEaXN0YW5jZVJlbmRlck9iamVjdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9EaXN0YW5jZVJlbmRlck9iamVjdFwiKTtcbmltcG9ydCBSZW5kZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vUmVuZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBSZW5kZXJNZXRob2RNYXRlcmlhbE9iamVjdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvY29tcGlsYXRpb24vUmVuZGVyTWV0aG9kTWF0ZXJpYWxPYmplY3RcIik7XG5cbi8qKlxuICogQGNsYXNzIGF3YXkucG9vbC5NZXRob2RSZW5kZXJhYmxlUG9vbFxuICovXG5jbGFzcyBNZXRob2RSZW5kZXJhYmxlUG9vbCBleHRlbmRzIFJlbmRlcmFibGVQb29sQmFzZVxue1xuXHRwcml2YXRlIF9tZXRob2RNYXRlcmlhbFJlbmRlck9iamVjdFBvb2w6UmVuZGVyT2JqZWN0UG9vbDtcblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlQ2xhc3Ncblx0ICovXG5cdGNvbnN0cnVjdG9yKHJlbmRlcmFibGVDbGFzczpJUmVuZGVyYWJsZUNsYXNzLCBzdGFnZTpTdGFnZSlcblx0e1xuXHRcdHN1cGVyKHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpO1xuXG5cdFx0dGhpcy5fbWV0aG9kTWF0ZXJpYWxSZW5kZXJPYmplY3RQb29sID0gbmV3IFJlbmRlck9iamVjdFBvb2woUmVuZGVyTWV0aG9kTWF0ZXJpYWxPYmplY3QsIHRoaXMuX3JlbmRlcmFibGVDbGFzcywgdGhpcy5fc3RhZ2UpO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqIEBwYXJhbSBtYXRlcmlhbFxuXHQgKiBAcGFyYW0gcmVuZGVyYWJsZVxuXHQgKi9cblx0cHVibGljIGdldE1ldGhvZFJlbmRlck9iamVjdChyZW5kZXJPYmplY3RPd25lcjpJUmVuZGVyT2JqZWN0T3duZXIpOlJlbmRlck9iamVjdEJhc2Vcblx0e1xuXHRcdHJldHVybiB0aGlzLl9tZXRob2RNYXRlcmlhbFJlbmRlck9iamVjdFBvb2wuZ2V0SXRlbShyZW5kZXJPYmplY3RPd25lcik7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlQ2xhc3Ncblx0ICogQHJldHVybnMgTWV0aG9kUmVuZGVyYWJsZVBvb2xcblx0ICovXG5cdHB1YmxpYyBzdGF0aWMgZ2V0UG9vbChyZW5kZXJhYmxlQ2xhc3M6SVJlbmRlcmFibGVDbGFzcywgc3RhZ2U6U3RhZ2UpOk1ldGhvZFJlbmRlcmFibGVQb29sXG5cdHtcblx0XHR2YXIgcG9vbHM6T2JqZWN0ID0gKFJlbmRlcmFibGVQb29sQmFzZS5fcG9vbHNbc3RhZ2Uuc3RhZ2VJbmRleF0gfHwgKFJlbmRlcmFibGVQb29sQmFzZS5fcG9vbHNbc3RhZ2Uuc3RhZ2VJbmRleF0gPSBuZXcgT2JqZWN0KCkpKTtcblxuXHRcdHJldHVybiAocG9vbHNbcmVuZGVyYWJsZUNsYXNzLmlkXSB8fCAocG9vbHNbcmVuZGVyYWJsZUNsYXNzLmlkXSA9IG5ldyBNZXRob2RSZW5kZXJhYmxlUG9vbChyZW5kZXJhYmxlQ2xhc3MsIHN0YWdlKSkpO1xuXHR9XG59XG5cbmV4cG9ydCA9IE1ldGhvZFJlbmRlcmFibGVQb29sOyJdfQ==
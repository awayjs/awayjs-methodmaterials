var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var RenderablePoolBase = require("awayjs-renderergl/lib/pool/RenderablePoolBase");
var RenderObjectPool = require("awayjs-renderergl/lib/compilation/RenderObjectPool");
var RenderMethodMaterialObject = require("awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject");
/**
 * @class away.pool.MethodRenderablePool
 */
var MethodRenderablePool = (function (_super) {
    __extends(MethodRenderablePool, _super);
    /**
     * //TODO
     *
     * @param renderableClass
     */
    function MethodRenderablePool(renderableClass, stage) {
        _super.call(this, renderableClass, stage);
        this._methodMaterialRenderObjectPool = new RenderObjectPool(RenderMethodMaterialObject, this._renderableClass, this._stage);
    }
    /**
     *
     * @param material
     * @param renderable
     */
    MethodRenderablePool.prototype.getMethodRenderObject = function (renderObjectOwner) {
        return this._methodMaterialRenderObjectPool.getItem(renderObjectOwner);
    };
    /**
     * //TODO
     *
     * @param renderableClass
     * @returns MethodRenderablePool
     */
    MethodRenderablePool.getPool = function (renderableClass, stage) {
        var pools = (RenderablePoolBase._pools[stage.stageIndex] || (RenderablePoolBase._pools[stage.stageIndex] = new Object()));
        return (pools[renderableClass.id] || (pools[renderableClass.id] = new MethodRenderablePool(renderableClass, stage)));
    };
    return MethodRenderablePool;
})(RenderablePoolBase);
module.exports = MethodRenderablePool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL3Bvb2wvTWV0aG9kUmVuZGVyYWJsZVBvb2wudHMiXSwibmFtZXMiOlsiTWV0aG9kUmVuZGVyYWJsZVBvb2wiLCJNZXRob2RSZW5kZXJhYmxlUG9vbC5jb25zdHJ1Y3RvciIsIk1ldGhvZFJlbmRlcmFibGVQb29sLmdldE1ldGhvZFJlbmRlck9iamVjdCIsIk1ldGhvZFJlbmRlcmFibGVQb29sLmdldFBvb2wiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLElBQU8sa0JBQWtCLFdBQWEsK0NBQStDLENBQUMsQ0FBQztBQUV2RixJQUFPLGdCQUFnQixXQUFjLG9EQUFvRCxDQUFDLENBQUM7QUFLM0YsSUFBTywwQkFBMEIsV0FBVyxtRUFBbUUsQ0FBQyxDQUFDO0FBRWpILEFBR0E7O0dBREc7SUFDRyxvQkFBb0I7SUFBU0EsVUFBN0JBLG9CQUFvQkEsVUFBMkJBO0lBSXBEQTs7OztPQUlHQTtJQUNIQSxTQVRLQSxvQkFBb0JBLENBU2JBLGVBQWdDQSxFQUFFQSxLQUFXQTtRQUV4REMsa0JBQU1BLGVBQWVBLEVBQUVBLEtBQUtBLENBQUNBLENBQUNBO1FBRTlCQSxJQUFJQSxDQUFDQSwrQkFBK0JBLEdBQUdBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsMEJBQTBCQSxFQUFFQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO0lBQzdIQSxDQUFDQTtJQUVERDs7OztPQUlHQTtJQUNJQSxvREFBcUJBLEdBQTVCQSxVQUE2QkEsaUJBQW9DQTtRQUVoRUUsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsK0JBQStCQSxDQUFDQSxPQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ3hFQSxDQUFDQTtJQUVERjs7Ozs7T0FLR0E7SUFDV0EsNEJBQU9BLEdBQXJCQSxVQUFzQkEsZUFBZ0NBLEVBQUVBLEtBQVdBO1FBRWxFRyxJQUFJQSxLQUFLQSxHQUFVQSxDQUFDQSxrQkFBa0JBLENBQUNBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsR0FBR0EsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFaklBLE1BQU1BLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLGVBQWVBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLGVBQWVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLG9CQUFvQkEsQ0FBQ0EsZUFBZUEsRUFBRUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDdEhBLENBQUNBO0lBQ0ZILDJCQUFDQTtBQUFEQSxDQXRDQSxBQXNDQ0EsRUF0Q2tDLGtCQUFrQixFQXNDcEQ7QUFFRCxBQUE4QixpQkFBckIsb0JBQW9CLENBQUMiLCJmaWxlIjoicG9vbC9NZXRob2RSZW5kZXJhYmxlUG9vbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSVJlbmRlck9iamVjdE93bmVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlck9iamVjdE93bmVyXCIpO1xyXG5pbXBvcnQgSVJlbmRlcmFibGVPd25lclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvSVJlbmRlcmFibGVPd25lclwiKTtcclxuaW1wb3J0IE1hdGVyaWFsQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL01hdGVyaWFsQmFzZVwiKTtcclxuaW1wb3J0IElSZW5kZXJhYmxlUG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3Bvb2wvSVJlbmRlcmFibGVQb29sXCIpO1xyXG5pbXBvcnQgSVJlbmRlck9iamVjdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3Bvb2wvSVJlbmRlck9iamVjdFwiKTtcclxuXHJcbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xyXG5cclxuaW1wb3J0IFJlbmRlcmVyQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYmFzZS9SZW5kZXJlckJhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XHJcbmltcG9ydCBSZW5kZXJhYmxlUG9vbEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJhYmxlUG9vbEJhc2VcIik7XHJcbmltcG9ydCBJUmVuZGVyYWJsZUNsYXNzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9JUmVuZGVyYWJsZUNsYXNzXCIpO1xyXG5pbXBvcnQgUmVuZGVyT2JqZWN0UG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2NvbXBpbGF0aW9uL1JlbmRlck9iamVjdFBvb2xcIik7XHJcbmltcG9ydCBTa3lib3hSZW5kZXJPYmplY3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vU2t5Ym94UmVuZGVyT2JqZWN0XCIpO1xyXG5pbXBvcnQgRGVwdGhSZW5kZXJPYmplY3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvY29tcGlsYXRpb24vRGVwdGhSZW5kZXJPYmplY3RcIik7XHJcbmltcG9ydCBEaXN0YW5jZVJlbmRlck9iamVjdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9EaXN0YW5jZVJlbmRlck9iamVjdFwiKTtcclxuaW1wb3J0IFJlbmRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9jb21waWxhdGlvbi9SZW5kZXJPYmplY3RCYXNlXCIpO1xyXG5pbXBvcnQgUmVuZGVyTWV0aG9kTWF0ZXJpYWxPYmplY3RcdD0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL2NvbXBpbGF0aW9uL1JlbmRlck1ldGhvZE1hdGVyaWFsT2JqZWN0XCIpO1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBhd2F5LnBvb2wuTWV0aG9kUmVuZGVyYWJsZVBvb2xcclxuICovXHJcbmNsYXNzIE1ldGhvZFJlbmRlcmFibGVQb29sIGV4dGVuZHMgUmVuZGVyYWJsZVBvb2xCYXNlXHJcbntcclxuXHRwcml2YXRlIF9tZXRob2RNYXRlcmlhbFJlbmRlck9iamVjdFBvb2w6UmVuZGVyT2JqZWN0UG9vbDtcclxuXHJcblx0LyoqXHJcblx0ICogLy9UT0RPXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gcmVuZGVyYWJsZUNsYXNzXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocmVuZGVyYWJsZUNsYXNzOklSZW5kZXJhYmxlQ2xhc3MsIHN0YWdlOlN0YWdlKVxyXG5cdHtcclxuXHRcdHN1cGVyKHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpO1xyXG5cclxuXHRcdHRoaXMuX21ldGhvZE1hdGVyaWFsUmVuZGVyT2JqZWN0UG9vbCA9IG5ldyBSZW5kZXJPYmplY3RQb29sKFJlbmRlck1ldGhvZE1hdGVyaWFsT2JqZWN0LCB0aGlzLl9yZW5kZXJhYmxlQ2xhc3MsIHRoaXMuX3N0YWdlKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG1hdGVyaWFsXHJcblx0ICogQHBhcmFtIHJlbmRlcmFibGVcclxuXHQgKi9cclxuXHRwdWJsaWMgZ2V0TWV0aG9kUmVuZGVyT2JqZWN0KHJlbmRlck9iamVjdE93bmVyOklSZW5kZXJPYmplY3RPd25lcik6UmVuZGVyT2JqZWN0QmFzZVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9tZXRob2RNYXRlcmlhbFJlbmRlck9iamVjdFBvb2wuZ2V0SXRlbShyZW5kZXJPYmplY3RPd25lcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiAvL1RPRE9cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlQ2xhc3NcclxuXHQgKiBAcmV0dXJucyBNZXRob2RSZW5kZXJhYmxlUG9vbFxyXG5cdCAqL1xyXG5cdHB1YmxpYyBzdGF0aWMgZ2V0UG9vbChyZW5kZXJhYmxlQ2xhc3M6SVJlbmRlcmFibGVDbGFzcywgc3RhZ2U6U3RhZ2UpOk1ldGhvZFJlbmRlcmFibGVQb29sXHJcblx0e1xyXG5cdFx0dmFyIHBvb2xzOk9iamVjdCA9IChSZW5kZXJhYmxlUG9vbEJhc2UuX3Bvb2xzW3N0YWdlLnN0YWdlSW5kZXhdIHx8IChSZW5kZXJhYmxlUG9vbEJhc2UuX3Bvb2xzW3N0YWdlLnN0YWdlSW5kZXhdID0gbmV3IE9iamVjdCgpKSk7XHJcblxyXG5cdFx0cmV0dXJuIChwb29sc1tyZW5kZXJhYmxlQ2xhc3MuaWRdIHx8IChwb29sc1tyZW5kZXJhYmxlQ2xhc3MuaWRdID0gbmV3IE1ldGhvZFJlbmRlcmFibGVQb29sKHJlbmRlcmFibGVDbGFzcywgc3RhZ2UpKSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBNZXRob2RSZW5kZXJhYmxlUG9vbDsiXX0=
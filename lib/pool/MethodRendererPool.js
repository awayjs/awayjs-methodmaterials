var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BillboardRenderable = require("awayjs-renderergl/lib/pool/BillboardRenderable");
var LineSubMeshRenderable = require("awayjs-renderergl/lib/pool/LineSubMeshRenderable");
var TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
var RendererPoolBase = require("awayjs-renderergl/lib/pool/RendererPoolBase");
var MethodRenderablePool = require("awayjs-methodmaterials/lib/pool/MethodRenderablePool");
/**
 * MethodRendererPool forms an abstract base class for classes that are used in the rendering pipeline to render the
 * contents of a partition
 *
 * @class away.render.MethodRendererPool
 */
var MethodRendererPool = (function (_super) {
    __extends(MethodRendererPool, _super);
    /**
     * Creates a new MethodRendererPool object.
     */
    function MethodRendererPool(renderer) {
        _super.call(this, renderer);
    }
    MethodRendererPool.prototype._pUpdatePool = function () {
        this._billboardRenderablePool = MethodRenderablePool.getPool(BillboardRenderable, this._pStage);
        this._triangleSubMeshRenderablePool = MethodRenderablePool.getPool(TriangleSubMeshRenderable, this._pStage);
        this._lineSubMeshRenderablePool = MethodRenderablePool.getPool(LineSubMeshRenderable, this._pStage);
    };
    return MethodRendererPool;
})(RendererPoolBase);
module.exports = MethodRendererPool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL3Bvb2wvTWV0aG9kUmVuZGVyZXJQb29sLnRzIl0sIm5hbWVzIjpbIk1ldGhvZFJlbmRlcmVyUG9vbCIsIk1ldGhvZFJlbmRlcmVyUG9vbC5jb25zdHJ1Y3RvciIsIk1ldGhvZFJlbmRlcmVyUG9vbC5fcFVwZGF0ZVBvb2wiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sbUJBQW1CLFdBQWEsZ0RBQWdELENBQUMsQ0FBQztBQUN6RixJQUFPLHFCQUFxQixXQUFZLGtEQUFrRCxDQUFDLENBQUM7QUFDNUYsSUFBTyx5QkFBeUIsV0FBVyxzREFBc0QsQ0FBQyxDQUFDO0FBQ25HLElBQU8sZ0JBQWdCLFdBQWMsNkNBQTZDLENBQUMsQ0FBQztBQUdwRixJQUFPLG9CQUFvQixXQUFhLHNEQUFzRCxDQUFDLENBQUM7QUFFaEcsQUFNQTs7Ozs7R0FERztJQUNHLGtCQUFrQjtJQUFTQSxVQUEzQkEsa0JBQWtCQSxVQUF5QkE7SUFFaERBOztPQUVHQTtJQUNIQSxTQUxLQSxrQkFBa0JBLENBS1hBLFFBQXFCQTtRQUVoQ0Msa0JBQU1BLFFBQVFBLENBQUNBLENBQUNBO0lBQ2pCQSxDQUFDQTtJQUVNRCx5Q0FBWUEsR0FBbkJBO1FBRUNFLElBQUlBLENBQUNBLHdCQUF3QkEsR0FBR0Esb0JBQW9CQSxDQUFDQSxPQUFPQSxDQUFDQSxtQkFBbUJBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ2hHQSxJQUFJQSxDQUFDQSw4QkFBOEJBLEdBQUdBLG9CQUFvQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EseUJBQXlCQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUM1R0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxvQkFBb0JBLENBQUNBLE9BQU9BLENBQUNBLHFCQUFxQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDckdBLENBQUNBO0lBQ0ZGLHlCQUFDQTtBQUFEQSxDQWhCQSxBQWdCQ0EsRUFoQmdDLGdCQUFnQixFQWdCaEQ7QUFFRCxBQUE0QixpQkFBbkIsa0JBQWtCLENBQUMiLCJmaWxlIjoicG9vbC9NZXRob2RSZW5kZXJlclBvb2wuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpbGxib2FyZFJlbmRlcmFibGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9CaWxsYm9hcmRSZW5kZXJhYmxlXCIpO1xuaW1wb3J0IExpbmVTdWJNZXNoUmVuZGVyYWJsZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9MaW5lU3ViTWVzaFJlbmRlcmFibGVcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvVHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBSZW5kZXJlclBvb2xCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9SZW5kZXJlclBvb2xCYXNlXCIpO1xuaW1wb3J0IFJlbmRlcmVyQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvYmFzZS9SZW5kZXJlckJhc2VcIik7XG5cbmltcG9ydCBNZXRob2RSZW5kZXJhYmxlUG9vbFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL3Bvb2wvTWV0aG9kUmVuZGVyYWJsZVBvb2xcIik7XG5cbi8qKlxuICogTWV0aG9kUmVuZGVyZXJQb29sIGZvcm1zIGFuIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGNsYXNzZXMgdGhhdCBhcmUgdXNlZCBpbiB0aGUgcmVuZGVyaW5nIHBpcGVsaW5lIHRvIHJlbmRlciB0aGVcbiAqIGNvbnRlbnRzIG9mIGEgcGFydGl0aW9uXG4gKlxuICogQGNsYXNzIGF3YXkucmVuZGVyLk1ldGhvZFJlbmRlcmVyUG9vbFxuICovXG5jbGFzcyBNZXRob2RSZW5kZXJlclBvb2wgZXh0ZW5kcyBSZW5kZXJlclBvb2xCYXNlXG57XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IE1ldGhvZFJlbmRlcmVyUG9vbCBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihyZW5kZXJlcjpSZW5kZXJlckJhc2UpXG5cdHtcblx0XHRzdXBlcihyZW5kZXJlcik7XG5cdH1cblxuXHRwdWJsaWMgX3BVcGRhdGVQb29sKClcblx0e1xuXHRcdHRoaXMuX2JpbGxib2FyZFJlbmRlcmFibGVQb29sID0gTWV0aG9kUmVuZGVyYWJsZVBvb2wuZ2V0UG9vbChCaWxsYm9hcmRSZW5kZXJhYmxlLCB0aGlzLl9wU3RhZ2UpO1xuXHRcdHRoaXMuX3RyaWFuZ2xlU3ViTWVzaFJlbmRlcmFibGVQb29sID0gTWV0aG9kUmVuZGVyYWJsZVBvb2wuZ2V0UG9vbChUcmlhbmdsZVN1Yk1lc2hSZW5kZXJhYmxlLCB0aGlzLl9wU3RhZ2UpO1xuXHRcdHRoaXMuX2xpbmVTdWJNZXNoUmVuZGVyYWJsZVBvb2wgPSBNZXRob2RSZW5kZXJhYmxlUG9vbC5nZXRQb29sKExpbmVTdWJNZXNoUmVuZGVyYWJsZSwgdGhpcy5fcFN0YWdlKTtcblx0fVxufVxuXG5leHBvcnQgPSBNZXRob2RSZW5kZXJlclBvb2w7Il19
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BillboardRenderable = require("awayjs-renderergl/lib/pool/BillboardRenderable");
var LineSegmentRenderable = require("awayjs-renderergl/lib/pool/LineSegmentRenderable");
var LineSubMeshRenderable = require("awayjs-renderergl/lib/pool/LineSubMeshRenderable");
var TriangleSubMeshRenderable = require("awayjs-renderergl/lib/pool/TriangleSubMeshRenderable");
var CurveSubMeshRenderable = require("awayjs-renderergl/lib/pool/CurveSubMeshRenderable");
var RendererPoolBase = require("awayjs-renderergl/lib/pool/RendererPoolBase");
var MethodRenderablePool = require("awayjs-methodmaterials/lib/pool/MethodRenderablePool");
/**
 * MethodRendererPool forms an abstract base class for classes that are used in the rendering pipeline to render the
 * contents of a partition
 *
 * @class away.render.MethodRendererPool
 */
var MethodRendererPool = (function (_super) {
    __extends(MethodRendererPool, _super);
    /**
     * Creates a new MethodRendererPool object.
     */
    function MethodRendererPool(renderer) {
        _super.call(this, renderer);
    }
    MethodRendererPool.prototype._pUpdatePool = function () {
        this._billboardRenderablePool = MethodRenderablePool.getPool(BillboardRenderable, this._pStage);
        this._lineSegmentRenderablePool = MethodRenderablePool.getPool(LineSegmentRenderable, this._pStage);
        this._triangleSubMeshRenderablePool = MethodRenderablePool.getPool(TriangleSubMeshRenderable, this._pStage);
        this._lineSubMeshRenderablePool = MethodRenderablePool.getPool(LineSubMeshRenderable, this._pStage);
        this._curveSubMeshRenderablePool = MethodRenderablePool.getPool(CurveSubMeshRenderable, this._pStage);
    };
    return MethodRendererPool;
})(RendererPoolBase);
module.exports = MethodRendererPool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL3Bvb2wvTWV0aG9kUmVuZGVyZXJQb29sLnRzIl0sIm5hbWVzIjpbIk1ldGhvZFJlbmRlcmVyUG9vbCIsIk1ldGhvZFJlbmRlcmVyUG9vbC5jb25zdHJ1Y3RvciIsIk1ldGhvZFJlbmRlcmVyUG9vbC5fcFVwZGF0ZVBvb2wiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sbUJBQW1CLFdBQWEsZ0RBQWdELENBQUMsQ0FBQztBQUN6RixJQUFPLHFCQUFxQixXQUFZLGtEQUFrRCxDQUFDLENBQUM7QUFDNUYsSUFBTyxxQkFBcUIsV0FBWSxrREFBa0QsQ0FBQyxDQUFDO0FBQzVGLElBQU8seUJBQXlCLFdBQVcsc0RBQXNELENBQUMsQ0FBQztBQUNuRyxJQUFPLHNCQUFzQixXQUFZLG1EQUFtRCxDQUFDLENBQUM7QUFDOUYsSUFBTyxnQkFBZ0IsV0FBYyw2Q0FBNkMsQ0FBQyxDQUFDO0FBR3BGLElBQU8sb0JBQW9CLFdBQWEsc0RBQXNELENBQUMsQ0FBQztBQUVoRyxBQU1BOzs7OztHQURHO0lBQ0csa0JBQWtCO0lBQVNBLFVBQTNCQSxrQkFBa0JBLFVBQXlCQTtJQUVoREE7O09BRUdBO0lBQ0hBLFNBTEtBLGtCQUFrQkEsQ0FLWEEsUUFBcUJBO1FBRWhDQyxrQkFBTUEsUUFBUUEsQ0FBQ0EsQ0FBQ0E7SUFDakJBLENBQUNBO0lBRU1ELHlDQUFZQSxHQUFuQkE7UUFFQ0UsSUFBSUEsQ0FBQ0Esd0JBQXdCQSxHQUFHQSxvQkFBb0JBLENBQUNBLE9BQU9BLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDaEdBLElBQUlBLENBQUNBLDBCQUEwQkEsR0FBR0Esb0JBQW9CQSxDQUFDQSxPQUFPQSxDQUFDQSxxQkFBcUJBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO1FBQ3BHQSxJQUFJQSxDQUFDQSw4QkFBOEJBLEdBQUdBLG9CQUFvQkEsQ0FBQ0EsT0FBT0EsQ0FBQ0EseUJBQXlCQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUM1R0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxHQUFHQSxvQkFBb0JBLENBQUNBLE9BQU9BLENBQUNBLHFCQUFxQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFDcEdBLElBQUlBLENBQUNBLDJCQUEyQkEsR0FBR0Esb0JBQW9CQSxDQUFDQSxPQUFPQSxDQUFDQSxzQkFBc0JBLEVBQUVBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0lBQ3ZHQSxDQUFDQTtJQUNGRix5QkFBQ0E7QUFBREEsQ0FsQkEsQUFrQkNBLEVBbEJnQyxnQkFBZ0IsRUFrQmhEO0FBRUQsQUFBNEIsaUJBQW5CLGtCQUFrQixDQUFDIiwiZmlsZSI6InBvb2wvTWV0aG9kUmVuZGVyZXJQb29sLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaWxsYm9hcmRSZW5kZXJhYmxlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvQmlsbGJvYXJkUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBMaW5lU2VnbWVudFJlbmRlcmFibGVcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvTGluZVNlZ21lbnRSZW5kZXJhYmxlXCIpO1xuaW1wb3J0IExpbmVTdWJNZXNoUmVuZGVyYWJsZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtcmVuZGVyZXJnbC9saWIvcG9vbC9MaW5lU3ViTWVzaFJlbmRlcmFibGVcIik7XG5pbXBvcnQgVHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvVHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBDdXJ2ZVN1Yk1lc2hSZW5kZXJhYmxlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9wb29sL0N1cnZlU3ViTWVzaFJlbmRlcmFibGVcIik7XG5pbXBvcnQgUmVuZGVyZXJQb29sQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL3Bvb2wvUmVuZGVyZXJQb29sQmFzZVwiKTtcbmltcG9ydCBSZW5kZXJlckJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL2Jhc2UvUmVuZGVyZXJCYXNlXCIpO1xuXG5pbXBvcnQgTWV0aG9kUmVuZGVyYWJsZVBvb2xcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtbWV0aG9kbWF0ZXJpYWxzL2xpYi9wb29sL01ldGhvZFJlbmRlcmFibGVQb29sXCIpO1xuXG4vKipcbiAqIE1ldGhvZFJlbmRlcmVyUG9vbCBmb3JtcyBhbiBhYnN0cmFjdCBiYXNlIGNsYXNzIGZvciBjbGFzc2VzIHRoYXQgYXJlIHVzZWQgaW4gdGhlIHJlbmRlcmluZyBwaXBlbGluZSB0byByZW5kZXIgdGhlXG4gKiBjb250ZW50cyBvZiBhIHBhcnRpdGlvblxuICpcbiAqIEBjbGFzcyBhd2F5LnJlbmRlci5NZXRob2RSZW5kZXJlclBvb2xcbiAqL1xuY2xhc3MgTWV0aG9kUmVuZGVyZXJQb29sIGV4dGVuZHMgUmVuZGVyZXJQb29sQmFzZVxue1xuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBNZXRob2RSZW5kZXJlclBvb2wgb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IocmVuZGVyZXI6UmVuZGVyZXJCYXNlKVxuXHR7XG5cdFx0c3VwZXIocmVuZGVyZXIpO1xuXHR9XG5cblx0cHVibGljIF9wVXBkYXRlUG9vbCgpXG5cdHtcblx0XHR0aGlzLl9iaWxsYm9hcmRSZW5kZXJhYmxlUG9vbCA9IE1ldGhvZFJlbmRlcmFibGVQb29sLmdldFBvb2woQmlsbGJvYXJkUmVuZGVyYWJsZSwgdGhpcy5fcFN0YWdlKTtcblx0XHR0aGlzLl9saW5lU2VnbWVudFJlbmRlcmFibGVQb29sID0gTWV0aG9kUmVuZGVyYWJsZVBvb2wuZ2V0UG9vbChMaW5lU2VnbWVudFJlbmRlcmFibGUsIHRoaXMuX3BTdGFnZSk7XG5cdFx0dGhpcy5fdHJpYW5nbGVTdWJNZXNoUmVuZGVyYWJsZVBvb2wgPSBNZXRob2RSZW5kZXJhYmxlUG9vbC5nZXRQb29sKFRyaWFuZ2xlU3ViTWVzaFJlbmRlcmFibGUsIHRoaXMuX3BTdGFnZSk7XG5cdFx0dGhpcy5fbGluZVN1Yk1lc2hSZW5kZXJhYmxlUG9vbCA9IE1ldGhvZFJlbmRlcmFibGVQb29sLmdldFBvb2woTGluZVN1Yk1lc2hSZW5kZXJhYmxlLCB0aGlzLl9wU3RhZ2UpO1xuXHRcdHRoaXMuX2N1cnZlU3ViTWVzaFJlbmRlcmFibGVQb29sID0gTWV0aG9kUmVuZGVyYWJsZVBvb2wuZ2V0UG9vbChDdXJ2ZVN1Yk1lc2hSZW5kZXJhYmxlLCB0aGlzLl9wU3RhZ2UpO1xuXHR9XG59XG5cbmV4cG9ydCA9IE1ldGhvZFJlbmRlcmVyUG9vbDsiXX0=
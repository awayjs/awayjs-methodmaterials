/**
 * MethodVO contains data for a given shader object for the use within a single material.
 * This allows shader methods to be shared across materials while their non-public state differs.
 */
var MethodVO = (function () {
    /**
     * Creates a new MethodVO object.
     */
    function MethodVO(method) {
        this.useMethod = true;
        this.method = method;
    }
    /**
     * Resets the values of the value object to their "unused" state.
     */
    MethodVO.prototype.reset = function () {
        this.method.iReset();
        this.texturesIndex = -1;
        this.vertexConstantsIndex = -1;
        this.fragmentConstantsIndex = -1;
        this.needsProjection = false;
        this.needsView = false;
        this.needsNormals = false;
        this.needsTangents = false;
        this.needsUV = false;
        this.needsSecondaryUV = false;
        this.needsGlobalVertexPos = false;
        this.needsGlobalFragmentPos = false;
    };
    return MethodVO;
})();
module.exports = MethodVO;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL2RhdGEvTWV0aG9kVk8udHMiXSwibmFtZXMiOlsiTWV0aG9kVk8iLCJNZXRob2RWTy5jb25zdHJ1Y3RvciIsIk1ldGhvZFZPLnJlc2V0Il0sIm1hcHBpbmdzIjoiQUFFQSxBQUlBOzs7R0FERztJQUNHLFFBQVE7SUEwQmJBOztPQUVHQTtJQUNIQSxTQTdCS0EsUUFBUUEsQ0E2QkRBLE1BQXdCQTtRQTNCN0JDLGNBQVNBLEdBQVdBLElBQUlBLENBQUNBO1FBNkIvQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSx3QkFBS0EsR0FBWkE7UUFFQ0UsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7UUFFckJBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxvQkFBb0JBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQy9CQSxJQUFJQSxDQUFDQSxzQkFBc0JBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBRWpDQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDOUJBLElBQUlBLENBQUNBLG9CQUFvQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDbENBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFDckNBLENBQUNBO0lBQ0ZGLGVBQUNBO0FBQURBLENBdERBLEFBc0RDQSxJQUFBO0FBRUQsQUFBa0IsaUJBQVQsUUFBUSxDQUFDIiwiZmlsZSI6ImRhdGEvTWV0aG9kVk8uanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNoYWRpbmdNZXRob2RCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLW1ldGhvZG1hdGVyaWFscy9saWIvbWV0aG9kcy9TaGFkaW5nTWV0aG9kQmFzZVwiKTtcblxuLyoqXG4gKiBNZXRob2RWTyBjb250YWlucyBkYXRhIGZvciBhIGdpdmVuIHNoYWRlciBvYmplY3QgZm9yIHRoZSB1c2Ugd2l0aGluIGEgc2luZ2xlIG1hdGVyaWFsLlxuICogVGhpcyBhbGxvd3Mgc2hhZGVyIG1ldGhvZHMgdG8gYmUgc2hhcmVkIGFjcm9zcyBtYXRlcmlhbHMgd2hpbGUgdGhlaXIgbm9uLXB1YmxpYyBzdGF0ZSBkaWZmZXJzLlxuICovXG5jbGFzcyBNZXRob2RWT1xue1xuXHRwdWJsaWMgdXNlTWV0aG9kOmJvb2xlYW4gPSB0cnVlO1xuXG5cdHB1YmxpYyBtZXRob2Q6U2hhZGluZ01ldGhvZEJhc2U7XG5cblx0Ly8gcHVibGljIHJlZ2lzdGVyIGluZGljZXNcblx0cHVibGljIHRleHR1cmVzSW5kZXg6bnVtYmVyO1xuXHRwdWJsaWMgc2Vjb25kYXJ5VGV4dHVyZXNJbmRleDpudW1iZXI7IC8vIHNvbWV0aW1lcyBuZWVkZWQgZm9yIGNvbXBvc2l0ZXNcblx0cHVibGljIHZlcnRleENvbnN0YW50c0luZGV4Om51bWJlcjtcblx0cHVibGljIHNlY29uZGFyeVZlcnRleENvbnN0YW50c0luZGV4Om51bWJlcjsgLy8gc29tZXRpbWVzIG5lZWRlZCBmb3IgY29tcG9zaXRlc1xuXHRwdWJsaWMgZnJhZ21lbnRDb25zdGFudHNJbmRleDpudW1iZXI7XG5cdHB1YmxpYyBzZWNvbmRhcnlGcmFnbWVudENvbnN0YW50c0luZGV4Om51bWJlcjsgLy8gc29tZXRpbWVzIG5lZWRlZCBmb3IgY29tcG9zaXRlc1xuXG5cdC8vIGludGVybmFsIHN0dWZmIGZvciB0aGUgbWF0ZXJpYWwgdG8ga25vdyBiZWZvcmUgYXNzZW1ibGluZyBjb2RlXG5cdHB1YmxpYyBuZWVkc1Byb2plY3Rpb246Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzVmlldzpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNOb3JtYWxzOmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc1RhbmdlbnRzOmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc1VWOmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc1NlY29uZGFyeVVWOmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc0dsb2JhbFZlcnRleFBvczpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNHbG9iYWxGcmFnbWVudFBvczpib29sZWFuO1xuXG5cdHB1YmxpYyB1c2VzVGV4dHVyZTpib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IE1ldGhvZFZPIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKG1ldGhvZDpTaGFkaW5nTWV0aG9kQmFzZSlcblx0e1xuXHRcdHRoaXMubWV0aG9kID0gbWV0aG9kO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlc2V0cyB0aGUgdmFsdWVzIG9mIHRoZSB2YWx1ZSBvYmplY3QgdG8gdGhlaXIgXCJ1bnVzZWRcIiBzdGF0ZS5cblx0ICovXG5cdHB1YmxpYyByZXNldCgpXG5cdHtcblx0XHR0aGlzLm1ldGhvZC5pUmVzZXQoKTtcblxuXHRcdHRoaXMudGV4dHVyZXNJbmRleCA9IC0xO1xuXHRcdHRoaXMudmVydGV4Q29uc3RhbnRzSW5kZXggPSAtMTtcblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnRzSW5kZXggPSAtMTtcblxuXHRcdHRoaXMubmVlZHNQcm9qZWN0aW9uID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc1ZpZXcgPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzTm9ybWFscyA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNUYW5nZW50cyA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNVViA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNTZWNvbmRhcnlVViA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNHbG9iYWxWZXJ0ZXhQb3MgPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzR2xvYmFsRnJhZ21lbnRQb3MgPSBmYWxzZTtcblx0fVxufVxuXG5leHBvcnQgPSBNZXRob2RWTztcbiJdfQ==
{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-methodmaterials/lib/MethodMaterialMode.ts",
    "awayjs-methodmaterials.js",
    "awayjs-methodmaterials/lib/MethodMaterial.ts",
    "awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject.ts",
    "awayjs-methodmaterials/lib/data/MethodVO.ts",
    "awayjs-methodmaterials/lib/methods/AmbientBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/CurveBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseSubSurfaceMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/EffectRefractionEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod.ts",
    "awayjs-methodmaterials/lib/methods/LightingMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/NormalBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/NormalHeightMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadingMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/ShadowCascadeMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/ShadowMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularCompositeMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod.ts",
    "awayjs-methodmaterials/lib/passes/MethodPassMode.ts",
    "awayjs-methodmaterials/lib/passes/MethodPass.ts",
    "awayjs-methodmaterials/lib/passes/SingleObjectDepthPass.ts",
    "awayjs-methodmaterials/lib/pool/MethodRenderablePool.ts",
    "awayjs-methodmaterials/lib/pool/MethodRendererPool.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "module",
    "MethodMaterialMode",
    "SINGLE_PASS",
    "MULTI_PASS",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "Image2D",
    "MaterialBase",
    "Single2DTexture",
    "TextureBase",
    "ContextGLCompareMode",
    "AmbientBasicMethod",
    "DiffuseBasicMethod",
    "NormalBasicMethod",
    "SpecularBasicMethod",
    "MethodMaterial",
    "_super",
    "textureColor",
    "smoothAlpha",
    "repeat",
    "mipmap",
    "_effectMethods",
    "Array",
    "_ambientMethod",
    "_diffuseMethod",
    "_normalMethod",
    "_specularMethod",
    "_depthCompareMode",
    "LESS_EQUAL",
    "_mode",
    "texture",
    "smooth",
    "color",
    "Number",
    "alpha",
    "Object",
    "defineProperty",
    "get",
    "set",
    "value",
    "_pInvalidateRenderObject",
    "enumerable",
    "configurable",
    "copyFrom",
    "_shadowMethod",
    "addEffectMethod",
    "method",
    "push",
    "getEffectMethodAt",
    "index",
    "addEffectMethodAt",
    "splice",
    "removeEffectMethod",
    "indexOf",
    "normalMap",
    "gloss",
    "ambient",
    "specular",
    "ambientColor",
    "diffuseColor",
    "specularColor",
    "getRenderObject",
    "renderablePool",
    "getMethodRenderObject",
    "awayjs-core/lib/data/Image2D",
    "undefined",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/TextureBase",
    "awayjs-methodmaterials/lib/methods/AmbientBasicMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseBasicMethod",
    "awayjs-methodmaterials/lib/methods/NormalBasicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-stagegl/lib/base/ContextGLCompareMode",
    "awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject",
    "BlendMode",
    "StaticLightPicker",
    "RenderObjectBase",
    "MethodPassMode",
    "MethodPass",
    "RenderMethodMaterialObject",
    "pool",
    "material",
    "renderableClass",
    "stage",
    "_material",
    "lightPicker",
    "numLightProbes",
    "numDirectionalLights",
    "numPointLights",
    "numCastingDirectionalLights",
    "numCastingPointLights",
    "_pUpdateRenderObject",
    "initPasses",
    "setBlendAndCompareModes",
    "_pClearScreenPasses",
    "mode",
    "_casterLightPass",
    "_pAddScreenPass",
    "_nonCasterLightPasses",
    "_screenPass",
    "numLights",
    "numEffectMethods",
    "initEffectPass",
    "removeEffectPass",
    "shadowMethod",
    "initCasterLightPass",
    "removeCasterLightPass",
    "numNonCasters",
    "initNonCasterLightPasses",
    "removeNonCasterLightPasses",
    "forceSeparateMVP",
    "Boolean",
    "setBlendMode",
    "NORMAL",
    "depthCompareMode",
    "firstAdditiveIndex",
    "ADD",
    "_pRequiresBlending",
    "EFFECTS",
    "LAYER",
    "blendMode",
    "alphaBlending",
    "colorTransform",
    "alphaMultiplier",
    "SUPER_SHADER",
    "preserveAlpha",
    "LIGHTING",
    "_renderableClass",
    "_stage",
    "castingLight",
    "diffuseMethod",
    "ambientMethod",
    "normalMethod",
    "specularMethod",
    "dispose",
    "_pRemoveScreenPass",
    "pass",
    "numDirLights",
    "dirLightOffset",
    "pointLightOffset",
    "probeOffset",
    "includeCasters",
    "directionalLightsOffset",
    "pointLightsOffset",
    "lightProbesOffset",
    "effectMethod",
    "len",
    "Math",
    "max",
    "removeEffectMethodAt",
    "id",
    "awayjs-core/lib/data/BlendMode",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-methodmaterials/lib/passes/MethodPass",
    "awayjs-methodmaterials/lib/passes/MethodPassMode",
    "awayjs-renderergl/lib/compilation/RenderObjectBase",
    "awayjs-methodmaterials/lib/data/MethodVO",
    "MethodVO",
    "useMethod",
    "reset",
    "iReset",
    "vertexConstantsIndex",
    "secondaryVertexConstantsIndex",
    "fragmentConstantsIndex",
    "secondaryFragmentConstantsIndex",
    "needsProjection",
    "needsView",
    "needsNormals",
    "needsTangents",
    "needsGlobalVertexPos",
    "needsGlobalFragmentPos",
    "ShadingMethodBase",
    "_color",
    "_alpha",
    "_colorR",
    "_colorG",
    "_colorB",
    "_ambient",
    "iInitVO",
    "shaderObject",
    "methodVO",
    "uvDependencies",
    "iInitConstants",
    "updateColor",
    "m",
    "iGetFragmentCode",
    "targetReg",
    "registerCache",
    "sharedRegisters",
    "_iInitRegisters",
    "_iGetFragmentCode",
    "uvVarying",
    "alphaThreshold",
    "cutOffReg",
    "getFreeFragmentConstant",
    "ambientInputRegister",
    "iActivate",
    "activate",
    "fragmentConstantData",
    "data",
    "awayjs-methodmaterials/lib/methods/ShadingMethodBase",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "AmbientEnvMapMethod",
    "regCache",
    "normalFragment",
    "awayjs-methodmaterials/lib/methods/CurveBasicMethod",
    "CurveBasicMethod",
    "LightingMethodBase",
    "_multiply",
    "_diffuseColor",
    "_ambientColor",
    "_diffuseR",
    "_diffuseG",
    "_diffuseB",
    "_ambientR",
    "_ambientG",
    "_ambientB",
    "iIsUsed",
    "iInvalidateShaderProgram",
    "_texture",
    "textureObject",
    "getTextureObject",
    "updateDiffuse",
    "updateAmbient",
    "diff",
    "multiply",
    "iCleanCompilationData",
    "_pTotalLightColorReg",
    "iGetFragmentPreLightingCode",
    "_pIsFirstLight",
    "addFragmentTempUsages",
    "getFreeFragmentVectorTemp",
    "iGetFragmentCodePerLight",
    "lightDirReg",
    "lightColReg",
    "commons",
    "usesLightFallOff",
    "_iModulateMethod",
    "removeFragmentTempUsage",
    "iGetFragmentCodePerProbe",
    "cubeMapReg",
    "weightRegister",
    "iGetFragmentPostLightingCode",
    "albedo",
    "shadowTarget",
    "pApplyShadow",
    "ambientColorRegister",
    "diffuseInputRegister",
    "iSetRenderState",
    "renderable",
    "camera",
    "ambientR",
    "ambientG",
    "ambientB",
    "awayjs-methodmaterials/lib/methods/LightingMethodBase",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "DiffuseCompositeMethod",
    "DiffuseCelMethod",
    "levels",
    "baseMethod",
    "_this",
    "_smoothness",
    "clampDiffuse",
    "_levels",
    "_dataReg",
    "awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod",
    "ShadingMethodEvent",
    "modulateMethod",
    "_onShaderInvalidatedDelegate",
    "event",
    "onShaderInvalidated",
    "pBaseMethod",
    "addEventListener",
    "SHADER_INVALIDATED",
    "removeEventListener",
    "iDeactivate",
    "iGetVertexCode",
    "awayjs-renderergl/lib/events/ShadingMethodEvent",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "DiffuseDepthMethod",
    "temp",
    "decReg",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "DiffuseGradientMethod",
    "gradient",
    "_gradient",
    "secondaryTextureObject",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "DiffuseLightMapMethod",
    "lightMap",
    "useSecondaryUV",
    "_useSecondaryUV",
    "_lightMap",
    "secondaryUVDependencies",
    "_blendMode",
    "MULTIPLY",
    "secondaryUVVarying",
    "awayjs-methodmaterials/lib/methods/DiffuseSubSurfaceMethod",
    "DiffuseSubSurfaceMethod",
    "depthMapSize",
    "depthMapOffset",
    "_translucency",
    "_scatterColor",
    "_scatterR",
    "_scatterG",
    "_scatterB",
    "scatterLight",
    "_scattering",
    "vertexConstantData",
    "_lightProjVarying",
    "_propReg",
    "_lightColorReg",
    "_colorReg",
    "_decReg",
    "_targetReg",
    "scatterColor",
    "lightProjection",
    "toTexRegister",
    "getFreeVertexVectorTemp",
    "getFreeVertexConstant",
    "getFreeVarying",
    "viewDirFragment",
    "_depthPass",
    "_iGetDepthMap",
    "_iGetProjection",
    "copyRawDataTo",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "DiffuseWrapMethod",
    "wrapFactor",
    "_wrapDataRegister",
    "_wrapFactor",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "EffectMethodBase",
    "EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "EffectColorMatrixMethod",
    "matrix",
    "_matrix",
    "colorMultReg",
    "colorOffsetReg",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "EffectColorTransformMethod",
    "_colorTransform",
    "colorOffsReg",
    "inv",
    "redMultiplier",
    "greenMultiplier",
    "blueMultiplier",
    "redOffset",
    "greenOffset",
    "blueOffset",
    "alphaOffset",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "EffectEnvMapMethod",
    "envMap",
    "_envMap",
    "_mask",
    "dataRegister",
    "temp2",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "EffectFogMethod",
    "minDistance",
    "maxDistance",
    "fogColor",
    "_minDistance",
    "_maxDistance",
    "_fogColor",
    "_fogR",
    "_fogG",
    "_fogB",
    "fogData",
    "projectionFragment",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "EffectFresnelEnvMapMethod",
    "_fresnelPower",
    "_normalReflectance",
    "viewDirReg",
    "normalReg",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "EffectLightMapMethod",
    "AbstractMethodError",
    "assetType",
    "awayjs-core/lib/errors/AbstractMethodError",
    "awayjs-methodmaterials/lib/methods/EffectRefractionEnvMapMethod",
    "EffectRefractionEnvMapMethod",
    "refractionIndex",
    "dispersionR",
    "dispersionG",
    "dispersionB",
    "_dispersionR",
    "_dispersionG",
    "_dispersionB",
    "_useDispersion",
    "_refractionIndex",
    "useDispersion",
    "data2",
    "refractionDir",
    "refractionColor",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "EffectRimLightMethod",
    "strength",
    "power",
    "blend",
    "_strength",
    "_power",
    "dataRegister2",
    "MIX",
    "_normalMap",
    "normalDependencies",
    "iOutputsTangentNormals",
    "bnm",
    "awayjs-methodmaterials/lib/methods/NormalHeightMapMethod",
    "NormalHeightMapMethod",
    "heightMap",
    "worldWidth",
    "worldHeight",
    "worldDepth",
    "_worldXYRatio",
    "_worldXZRatio",
    "width",
    "height",
    "dataReg",
    "dataReg2",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "NormalSimpleWaterMethod",
    "secondaryNormalMap",
    "_water1OffsetX",
    "_water1OffsetY",
    "_water2OffsetX",
    "_water2OffsetY",
    "_secondaryNormalMap",
    "AssetBase",
    "iUsesTangentSpace",
    "dispatchEvent",
    "awayjs-core/lib/library/AssetBase",
    "awayjs-methodmaterials/lib/methods/ShadowCascadeMethod",
    "Event",
    "DirectionalLight",
    "ShadowMapMethodBase",
    "ShadowCascadeMethod",
    "shadowMethodBase",
    "_baseMethod",
    "_pCastingLight",
    "_cascadeShadowMapper",
    "shadowMapper",
    "CHANGE",
    "onCascadeChange",
    "tempVO",
    "depthMap",
    "fragmentData",
    "vertexData",
    "_cascadeProjections",
    "_depthMapCoordVaryings",
    "initProjectionsRegs",
    "numCascades",
    "globalPositionVertex",
    "planeDistanceReg",
    "planeDistances",
    "inQuad",
    "uvCoord",
    "uvProjection",
    "_iGetCascadeFragmentCode",
    "vertexIndex",
    "depth",
    "_pEpsilon",
    "k",
    "getDepthProjections",
    "fragmentIndex",
    "_pAlpha",
    "nearPlaneDistances",
    "_iNearPlaneDistances",
    "iActivateForCascade",
    "awayjs-core/lib/events/Event",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "BitmapImage2D",
    "ShadowMethodBase",
    "ShadowDitheredMethod",
    "numSamples",
    "range",
    "_depthMapSize",
    "_grainUsages",
    "_grainTexture",
    "initGrainTexture",
    "_numSamples",
    "_range",
    "_grainBitmapImage2D",
    "vec",
    "step",
    "g",
    "random",
    "floor",
    "setArray",
    "rect",
    "_pGetPlanarFragmentCode",
    "customDataReg",
    "getSampleCode",
    "uvReg",
    "projectionReg",
    "_pDepthMapCoordReg",
    "addSample",
    "decodeRegister",
    "depthProjection",
    "targetRegister",
    "awayjs-core/lib/data/BitmapImage2D",
    "awayjs-methodmaterials/lib/methods/ShadowMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "ShadowFilteredMethod",
    "size",
    "depthCol",
    "predicate",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "ShadowHardMethod",
    "_pGetPointFragmentCode",
    "epsReg",
    "posReg",
    "depthSampleCol",
    "lightDir",
    "globalPositionVarying",
    "castsShadows",
    "_pShadowMapper",
    "PointLight",
    "_pUsePoint",
    "_pGetPointVertexCode",
    "pGetPlanarVertexCode",
    "depthMapProj",
    "iDepthProjection",
    "pow",
    "fallOff",
    "pos",
    "scenePosition",
    "x",
    "y",
    "z",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "ShadowNearMethod",
    "fadeRatio",
    "_fadeRatio",
    "_nearShadowMapper",
    "epsilon",
    "getFreeFragmentSingleTemp",
    "near",
    "projection",
    "far",
    "coverageRatio",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "PoissonLookup",
    "ShadowSoftMethod",
    "_offsets",
    "getDistribution",
    "texRange",
    "offsets",
    "numRegs",
    "reg",
    "awayjs-core/lib/geom/PoissonLookup",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "SpecularAnisotropicMethod",
    "tangentVarying",
    "_pSpecularTexData",
    "_pSpecularDataRegister",
    "_gloss",
    "_specular",
    "_specularColor",
    "_iSpecularR",
    "_iSpecularG",
    "_iSpecularB",
    "updateSpecular",
    "bsm",
    "spec",
    "useSmoothTextures",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "SpecularCompositeMethod",
    "SpecularCelMethod",
    "specularCutOff",
    "_specularCutOff",
    "clampSpecular",
    "awayjs-methodmaterials/lib/methods/SpecularCompositeMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "SpecularFresnelMethod",
    "basedOnSurface",
    "modulateSpecular",
    "_incidentLight",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "SpecularPhongMethod",
    "PassMode",
    "LightSources",
    "ShaderLightingObject",
    "ShaderObjectBase",
    "RenderPassBase",
    "renderObject",
    "renderObjectOwner",
    "_maxLights",
    "_includeCasters",
    "_iMethodVOs",
    "_numEffectDependencies",
    "_onLightsChangeDelegate",
    "onLightsChange",
    "_onMethodInvalidatedDelegate",
    "onMethodInvalidated",
    "_shader",
    "_updateShader",
    "_updateLights",
    "_lightPicker",
    "enableLightFallOff",
    "diffuseLightSources",
    "specularLightSources",
    "_iInitConstantData",
    "colorTransformMethod",
    "_iColorTransformMethodVO",
    "_removeDependency",
    "_addDependency",
    "effectsDependency",
    "invalidatePass",
    "hasEffectMethod",
    "getDependencyForMethod",
    "_iNormalMethodVO",
    "_iAmbientMethodVO",
    "_iShadowMethodVO",
    "_iDiffuseMethodVO",
    "_iSpecularMethodVO",
    "_iActivate",
    "_iRender",
    "viewProjection",
    "_iDeactivate",
    "_iIncludeDependencies",
    "usesFragmentAnimation",
    "usesTangentSpace",
    "usesLights",
    "globalPosDependencies",
    "usesGlobalPosFragment",
    "setupAndCountDependencies",
    "projectionDependencies",
    "tangentDependencies",
    "viewDirDependencies",
    "_iGetPreLightingVertexCode",
    "_iGetPreLightingFragmentCode",
    "shadedTarget",
    "_iGetPerLightDiffuseFragmentCode",
    "diffuseColorReg",
    "_iGetPerLightSpecularFragmentCode",
    "specularColorReg",
    "_iGetPerProbeDiffuseFragmentCode",
    "texReg",
    "weightReg",
    "_iGetPerProbeSpecularFragmentCode",
    "_iGetPostLightingVertexCode",
    "_iGetPostLightingFragmentCode",
    "useAlphaPremultiplied",
    "_pEnableBlending",
    "_pUsesTangentSpace",
    "usesProbes",
    "_pOutputsTangentNormals",
    "_pOutputsNormals",
    "_iGetNormalVertexCode",
    "_iGetNormalFragmentCode",
    "removeVertexTempUsage",
    "_iGetVertexCode",
    "sharedReg",
    "alphaReg",
    "_iUsesShadows",
    "castingDirectionalLights",
    "castingPointLights",
    "_iUsesSpecular",
    "_iUsesDiffuse",
    "numDirectionalLightsOld",
    "numPointLightsOld",
    "numLightProbesOld",
    "calculateNumDirectionalLights",
    "calculateNumPointLights",
    "calculateNumProbes",
    "min",
    "numFree",
    "numChannels",
    "PROBES",
    "awayjs-display/lib/materials/LightSources",
    "awayjs-renderergl/lib/compilation/ShaderLightingObject",
    "awayjs-renderergl/lib/compilation/ShaderObjectBase",
    "awayjs-renderergl/lib/passes/RenderPassBase",
    "awayjs-methodmaterials/lib/passes/SingleObjectDepthPass",
    "TriangleSubGeometry",
    "Matrix3D",
    "ContextGLProgramType",
    "SingleObjectDepthPass",
    "_textureSize",
    "_polyOffset",
    "_projectionTexturesInvalid",
    "_textures",
    "key",
    "updateProjectionTextures",
    "_projections",
    "renderableOwner",
    "context",
    "light",
    "lights",
    "_renderObjectOwner",
    "allPickedLights",
    "rId",
    "iGetObjectProjectionMatrix",
    "sourceEntity",
    "setRenderTarget",
    "clear",
    "setProgramConstantsFromMatrix",
    "VERTEX",
    "setProgramConstantsFromArray",
    "FRAGMENT",
    "_enc",
    "activateBuffer",
    "getVertexData",
    "POSITION_DATA",
    "getVertexOffset",
    "POSITION_FORMAT",
    "NORMAL_DATA",
    "NORMAL_FORMAT",
    "drawTriangles",
    "getIndexBuffer",
    "getIndexData",
    "numTriangles",
    "awayjs-core/lib/data/TriangleSubGeometry",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-stagegl/lib/base/ContextGLProgramType",
    "awayjs-methodmaterials/lib/pool/MethodRenderablePool",
    "RenderablePoolBase",
    "RenderObjectPool",
    "MethodRenderablePool",
    "_methodMaterialRenderObjectPool",
    "getItem",
    "getPool",
    "pools",
    "_pools",
    "stageIndex",
    "awayjs-renderergl/lib/compilation/RenderObjectPool",
    "awayjs-renderergl/lib/pool/RenderablePoolBase",
    "awayjs-methodmaterials/lib/pool/MethodRendererPool",
    "BillboardRenderable",
    "LineSegmentRenderable",
    "LineSubMeshRenderable",
    "TriangleSubMeshRenderable",
    "CurveSubMeshRenderable",
    "RendererPoolBase",
    "MethodRendererPool",
    "renderer",
    "_pUpdatePool",
    "_billboardRenderablePool",
    "_pStage",
    "_lineSegmentRenderablePool",
    "_triangleSubMeshRenderablePool",
    "_lineSubMeshRenderablePool",
    "_curveSubMeshRenderablePool",
    "awayjs-renderergl/lib/pool/BillboardRenderable",
    "awayjs-renderergl/lib/pool/CurveSubMeshRenderable",
    "awayjs-renderergl/lib/pool/LineSegmentRenderable",
    "awayjs-renderergl/lib/pool/LineSubMeshRenderable",
    "awayjs-renderergl/lib/pool/RendererPoolBase",
    "awayjs-renderergl/lib/pool/TriangleSubMeshRenderable"
  ],
  "mappings": "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",
  "file": "awayjs-methodmaterials.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "class MethodMaterialMode\n{\n\t/**\n\t *\n\t */\n\tpublic static SINGLE_PASS:string = \"singlePass\";\n\n\t/**\n\t *\n\t */\n\tpublic static MULTI_PASS:string = \"multiPass\";\n}\n\nexport = MethodMaterialMode;",
    null,
    "﻿import BlendMode\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\nimport Image2D\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Image2D\");\n\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport StaticLightPicker\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport IRenderObjectOwner\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport MaterialBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderObject\t\t\t\t= require(\"awayjs-display/lib/pool/IRenderObject\");\nimport Single2DTexture\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\nimport TextureBase\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport ContextGLCompareMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\n\nimport AmbientBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport NormalBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodMaterialMode\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\nimport MethodRenderablePool\t\t\t= require(\"awayjs-methodmaterials/lib/pool/MethodRenderablePool\");\n\n/**\n * MethodMaterial forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nclass MethodMaterial extends MaterialBase\n{\n\tprivate _effectMethods:Array<EffectMethodBase> = new Array<EffectMethodBase>();\n\tprivate _mode:string;\n\n\tprivate _ambientMethod:AmbientBasicMethod = new AmbientBasicMethod();\n\tprivate _shadowMethod:ShadowMapMethodBase;\n\tprivate _diffuseMethod:DiffuseBasicMethod = new DiffuseBasicMethod();\n\tprivate _normalMethod:NormalBasicMethod = new NormalBasicMethod();\n\tprivate _specularMethod:SpecularBasicMethod = new SpecularBasicMethod();\n\n\n\tprivate _depthCompareMode:string = ContextGLCompareMode.LESS_EQUAL;\n\n\t/**\n\t * Creates a new MethodMaterial object.\n\t *\n\t * @param texture The texture used for the material's albedo color.\n\t * @param smooth Indicates whether the texture should be filtered when sampled. Defaults to true.\n\t * @param repeat Indicates whether the texture should be tiled when sampled. Defaults to false.\n\t * @param mipmap Indicates whether or not any used textures should use mipmapping. Defaults to false.\n\t */\n\tconstructor(texture?:Image2D, smooth?:boolean, repeat?:boolean, mipmap?:boolean);\n\tconstructor(texture?:TextureBase, smooth?:boolean, repeat?:boolean, mipmap?:boolean);\n\tconstructor(color?:number, alpha?:number);\n\tconstructor(textureColor:any = null, smoothAlpha:any = null, repeat:boolean = false, mipmap:boolean = true)\n\t{\n\t\tsuper();\n\n\t\tthis._mode = MethodMaterialMode.SINGLE_PASS;\n\n\t\tif (textureColor instanceof Image2D)\n\t\t\ttextureColor = new Single2DTexture(textureColor);\n\n\t\tif (textureColor instanceof TextureBase) {\n\t\t\tthis.texture = <TextureBase> textureColor;\n\n\t\t\tthis.smooth = (smoothAlpha == null)? true : false;\n\t\t\tthis.repeat = repeat;\n\t\t\tthis.mipmap = mipmap;\n\t\t} else {\n\t\t\tthis.color = (textureColor == null)? 0xFFFFFF : Number(textureColor);\n\t\t\tthis.alpha = (smoothAlpha == null)? 1 : Number(smoothAlpha);\n\t\t}\n\t}\n\n\n\tpublic get mode():string\n\t{\n\t\treturn this._mode;\n\t}\n\n\tpublic set mode(value:string)\n\t{\n\t\tif (this._mode == value)\n\t\t\treturn;\n\n\t\tthis._mode = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The depth compare mode used to render the renderables using this material.\n\t *\n\t * @see away.stagegl.ContextGLCompareMode\n\t */\n\n\tpublic get depthCompareMode():string\n\t{\n\t\treturn this._depthCompareMode;\n\t}\n\n\tpublic set depthCompareMode(value:string)\n\t{\n\t\tif (this._depthCompareMode == value)\n\t\t\treturn;\n\n\t\tthis._depthCompareMode = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The texture object to use for the ambient colour.\n\t */\n\tpublic get diffuseTexture():TextureBase\n\t{\n\t\treturn this._diffuseMethod.texture;\n\t}\n\n\tpublic set diffuseTexture(value:TextureBase)\n\t{\n\t\tthis._diffuseMethod.texture = value;\n\t}\n\n\t/**\n\t * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.\n\t */\n\tpublic get ambientMethod():AmbientBasicMethod\n\t{\n\t\treturn this._ambientMethod;\n\t}\n\n\tpublic set ambientMethod(value:AmbientBasicMethod)\n\t{\n\t\tif (this._ambientMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._ambientMethod)\n\t\t\tvalue.copyFrom(this._ambientMethod);\n\n\t\tthis._ambientMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.\n\t */\n\tpublic get shadowMethod():ShadowMapMethodBase\n\t{\n\t\treturn this._shadowMethod;\n\t}\n\n\tpublic set shadowMethod(value:ShadowMapMethodBase)\n\t{\n\t\tif (this._shadowMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._shadowMethod)\n\t\t\tvalue.copyFrom(this._shadowMethod);\n\n\t\tthis._shadowMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.\n\t */\n\tpublic get diffuseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this._diffuseMethod;\n\t}\n\n\tpublic set diffuseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this._diffuseMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._diffuseMethod)\n\t\t\tvalue.copyFrom(this._diffuseMethod);\n\n\t\tthis._diffuseMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.\n\t */\n\tpublic get specularMethod():SpecularBasicMethod\n\t{\n\t\treturn this._specularMethod;\n\t}\n\n\tpublic set specularMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._specularMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._specularMethod)\n\t\t\tvalue.copyFrom(this._specularMethod);\n\n\t\tthis._specularMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.\n\t */\n\tpublic get normalMethod():NormalBasicMethod\n\t{\n\t\treturn this._normalMethod;\n\t}\n\n\tpublic set normalMethod(value:NormalBasicMethod)\n\t{\n\t\tif (this._normalMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._normalMethod)\n\t\t\tvalue.copyFrom(this._normalMethod);\n\n\t\tthis._normalMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\tpublic get numEffectMethods():number\n\t{\n\t\treturn this._effectMethods.length;\n\t}\n\n\t/**\n\t * Appends an \"effect\" shading method to the shader. Effect methods are those that do not influence the lighting\n\t * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the\n\t * methods added prior.\n\t */\n\tpublic addEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._effectMethods.push(method);\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * Returns the method added at the given index.\n\t * @param index The index of the method to retrieve.\n\t * @return The method at the given index.\n\t */\n\tpublic getEffectMethodAt(index:number):EffectMethodBase\n\t{\n\t\treturn this._effectMethods[index];\n\t}\n\n\t/**\n\t * Adds an effect method at the specified index amongst the methods already added to the material. Effect\n\t * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,\n\t * etc. The method will be applied to the result of the methods with a lower index.\n\t */\n\tpublic addEffectMethodAt(method:EffectMethodBase, index:number)\n\t{\n\t\tthis._effectMethods.splice(index, 0, method);\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * Removes an effect method from the material.\n\t * @param method The method to be removed.\n\t */\n\tpublic removeEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._effectMethods.splice(this._effectMethods.indexOf(method), 1);\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The normal map to modulate the direction of the surface for each texel. The default normal method expects\n\t * tangent-space normal maps, but others could expect object-space maps.\n\t */\n\tpublic get normalMap():TextureBase\n\t{\n\t\treturn this._normalMethod.normalMap;\n\t}\n\n\tpublic set normalMap(value:TextureBase)\n\t{\n\t\tthis._normalMethod.normalMap = value;\n\t}\n\n\t/**\n\t * A specular map that defines the strength of specular reflections for each texel in the red channel,\n\t * and the gloss factor in the green channel. You can use Specular2DTexture if you want to easily set\n\t * specular and gloss maps from grayscale images, but correctly authored images are preferred.\n\t */\n\tpublic get specularMap():TextureBase\n\t{\n\t\treturn this._specularMethod.texture;\n\t}\n\n\tpublic set specularMap(value:TextureBase)\n\t{\n\t\tthis._specularMethod.texture = value;\n\t}\n\n\t/**\n\t * The glossiness of the material (sharpness of the specular highlight).\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._specularMethod.gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._specularMethod.gloss = value;\n\t}\n\n\t/**\n\t * The strength of the ambient reflection.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambientMethod.ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tthis._ambientMethod.ambient = value;\n\t}\n\n\t/**\n\t * The overall strength of the specular reflection.\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._specularMethod.specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tthis._specularMethod.specular = value;\n\t}\n\n\t/**\n\t * The colour of the ambient reflection.\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this._diffuseMethod.ambientColor;\n\t}\n\n\tpublic set ambientColor(value:number)\n\t{\n\t\tthis._diffuseMethod.ambientColor = value;\n\t}\n\n\t/**\n\t * The colour of the diffuse reflection.\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this._diffuseMethod.diffuseColor;\n\t}\n\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tthis._diffuseMethod.diffuseColor = value;\n\t}\n\n\t/**\n\t * The colour of the specular reflection.\n\t */\n\tpublic get specularColor():number\n\t{\n\t\treturn this._specularMethod.specularColor;\n\t}\n\n\tpublic set specularColor(value:number)\n\t{\n\t\tthis._specularMethod.specularColor = value;\n\t}\n\n\t/**\n\t *\n\t * @param renderer\n\t *\n\t * @internal\n\t */\n\tpublic getRenderObject(renderablePool:MethodRenderablePool):IRenderObject\n\t{\n\t\treturn renderablePool.getMethodRenderObject(this);\n\t}\n}\n\nexport = MethodMaterial;",
    "import BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Matrix3DUtils\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IRenderObjectOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLCompareMode\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport RenderObjectPool\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectPool\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport RenderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodPassMode\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/passes/MethodPassMode\");\nimport MethodPass\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/passes/MethodPass\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,\n * using material methods to define their appearance.\n */\nclass RenderMethodMaterialObject extends RenderObjectBase\n{\n\t/**\n\t *\n\t */\n\tpublic static id:string = \"method\";\n\n\tprivate _material:MethodMaterial;\n\tprivate _screenPass:MethodPass;\n\tprivate _casterLightPass:MethodPass;\n\tprivate _nonCasterLightPasses:Array<MethodPass>;\n\t\n\t/**\n\t * The maximum total number of lights provided by the light picker.\n\t */\n\tprivate get numLights():number\n\t{\n\t\treturn this._material.lightPicker? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights + this._material.lightPicker.numCastingDirectionalLights + this._material.lightPicker.numCastingPointLights : 0;\n\t}\n\n\t/**\n\t * The amount of lights that don't cast shadows.\n\t */\n\tprivate get numNonCasters():number\n\t{\n\t\treturn this._material.lightPicker? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights : 0;\n\t}\n\n\t/**\n\t * Creates a new CompiledPass object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(pool:RenderObjectPool, material:MethodMaterial, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(pool, material, renderableClass, stage);\n\n\t\tthis._material = material;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateRenderObject()\n\t{\n\t\tsuper._pUpdateRenderObject();\n\n\t\tthis.initPasses();\n\n\t\tthis.setBlendAndCompareModes();\n\n\t\tthis._pClearScreenPasses();\n\n\t\tif (this._material.mode == MethodMaterialMode.MULTI_PASS) {\n\t\t\tif (this._casterLightPass)\n\t\t\t\tthis._pAddScreenPass(this._casterLightPass);\n\n\t\t\tif (this._nonCasterLightPasses)\n\t\t\t\tfor (var i:number = 0; i < this._nonCasterLightPasses.length; ++i)\n\t\t\t\t\tthis._pAddScreenPass(this._nonCasterLightPasses[i]);\n\t\t}\n\n\t\tif (this._screenPass)\n\t\t\tthis._pAddScreenPass(this._screenPass);\n\t}\n\n\t/**\n\t * Initializes all the passes and their dependent passes.\n\t */\n\tprivate initPasses()\n\t{\n\t\t// let the effects pass handle everything if there are no lights, when there are effect methods applied\n\t\t// after shading, or when the material mode is single pass.\n\t\tif (this.numLights == 0 || this._material.numEffectMethods > 0 || this._material.mode == MethodMaterialMode.SINGLE_PASS)\n\t\t\tthis.initEffectPass();\n\t\telse if (this._screenPass)\n\t\t\tthis.removeEffectPass();\n\n\t\t// only use a caster light pass if shadows need to be rendered\n\t\tif (this._material.shadowMethod && this._material.mode == MethodMaterialMode.MULTI_PASS)\n\t\t\tthis.initCasterLightPass();\n\t\telse if (this._casterLightPass)\n\t\t\tthis.removeCasterLightPass();\n\n\t\t// only use non caster light passes if there are lights that don't cast\n\t\tif (this.numNonCasters > 0 && this._material.mode == MethodMaterialMode.MULTI_PASS)\n\t\t\tthis.initNonCasterLightPasses();\n\t\telse if (this._nonCasterLightPasses)\n\t\t\tthis.removeNonCasterLightPasses();\n\t}\n\n\t/**\n\t * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.\n\t */\n\tprivate setBlendAndCompareModes()\n\t{\n\t\tvar forceSeparateMVP:boolean = Boolean(this._casterLightPass || this._screenPass);\n\n\t\t// caster light pass is always first if it exists, hence it uses normal blending\n\t\tif (this._casterLightPass) {\n\t\t\tthis._casterLightPass.forceSeparateMVP = forceSeparateMVP;\n\t\t\tthis._casterLightPass.setBlendMode(BlendMode.NORMAL);\n\t\t\tthis._casterLightPass.depthCompareMode = this._material.depthCompareMode;\n\t\t}\n\n\t\tif (this._nonCasterLightPasses) {\n\t\t\tvar firstAdditiveIndex:number = 0;\n\n\t\t\t// if there's no caster light pass, the first non caster light pass will be the first\n\t\t\t// and should use normal blending\n\t\t\tif (!this._casterLightPass) {\n\t\t\t\tthis._nonCasterLightPasses[0].forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._nonCasterLightPasses[0].setBlendMode(BlendMode.NORMAL);\n\t\t\t\tthis._nonCasterLightPasses[0].depthCompareMode = this._material.depthCompareMode;\n\t\t\t\tfirstAdditiveIndex = 1;\n\t\t\t}\n\n\t\t\t// all lighting passes following the first light pass should use additive blending\n\t\t\tfor (var i:number = firstAdditiveIndex; i < this._nonCasterLightPasses.length; ++i) {\n\t\t\t\tthis._nonCasterLightPasses[i].forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._nonCasterLightPasses[i].setBlendMode(BlendMode.ADD);\n\t\t\t\tthis._nonCasterLightPasses[i].depthCompareMode = ContextGLCompareMode.LESS_EQUAL;\n\t\t\t}\n\t\t}\n\n\t\tif (this._casterLightPass || this._nonCasterLightPasses) {\n\t\t\t//cannot be blended by blendmode property if multipass enabled\n\t\t\tthis._pRequiresBlending = false;\n\n\t\t\t// there are light passes, so this should be blended in\n\t\t\tif (this._screenPass) {\n\t\t\t\tthis._screenPass.mode = MethodPassMode.EFFECTS;\n\t\t\t\tthis._screenPass.depthCompareMode = ContextGLCompareMode.LESS_EQUAL;\n\t\t\t\tthis._screenPass.setBlendMode(BlendMode.LAYER);\n\t\t\t\tthis._screenPass.forceSeparateMVP = forceSeparateMVP;\n\t\t\t}\n\n\t\t} else if (this._screenPass) {\n\t\t\tthis._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\n\t\t\t// effects pass is the only pass, so it should just blend normally\n\t\t\tthis._screenPass.mode = MethodPassMode.SUPER_SHADER;\n\t\t\tthis._screenPass.depthCompareMode = this._material.depthCompareMode;\n\t\t\tthis._screenPass.preserveAlpha = this._pRequiresBlending;\n\t\t\tthis._screenPass.colorTransform = this._material.colorTransform;\n\t\t\tthis._screenPass.setBlendMode((this._material.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._material.blendMode);\n\t\t\tthis._screenPass.forceSeparateMVP = false;\n\t\t}\n\t}\n\n\tprivate initCasterLightPass()\n\t{\n\n\t\tif (this._casterLightPass == null)\n\t\t\tthis._casterLightPass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);\n\n\t\tthis._casterLightPass.lightPicker = new StaticLightPicker([this._material.shadowMethod.castingLight]);\n\t\tthis._casterLightPass.shadowMethod = this._material.shadowMethod;\n\t\tthis._casterLightPass.diffuseMethod = this._material.diffuseMethod;\n\t\tthis._casterLightPass.ambientMethod = this._material.ambientMethod;\n\t\tthis._casterLightPass.normalMethod = this._material.normalMethod;\n\t\tthis._casterLightPass.specularMethod = this._material.specularMethod;\n\t}\n\n\tprivate removeCasterLightPass()\n\t{\n\t\tthis._casterLightPass.dispose();\n\t\tthis._pRemoveScreenPass(this._casterLightPass);\n\t\tthis._casterLightPass = null;\n\t}\n\n\tprivate initNonCasterLightPasses()\n\t{\n\t\tthis.removeNonCasterLightPasses();\n\t\tvar pass:MethodPass;\n\t\tvar numDirLights:number = this._material.lightPicker.numDirectionalLights;\n\t\tvar numPointLights:number = this._material.lightPicker.numPointLights;\n\t\tvar numLightProbes:number = this._material.lightPicker.numLightProbes;\n\t\tvar dirLightOffset:number = 0;\n\t\tvar pointLightOffset:number = 0;\n\t\tvar probeOffset:number = 0;\n\n\t\tif (!this._casterLightPass) {\n\t\t\tnumDirLights += this._material.lightPicker.numCastingDirectionalLights;\n\t\t\tnumPointLights += this._material.lightPicker.numCastingPointLights;\n\t\t}\n\n\t\tthis._nonCasterLightPasses = new Array<MethodPass>();\n\n\t\twhile (dirLightOffset < numDirLights || pointLightOffset < numPointLights || probeOffset < numLightProbes) {\n\t\t\tpass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);\n\t\t\tpass.includeCasters = this._material.shadowMethod == null;\n\t\t\tpass.directionalLightsOffset = dirLightOffset;\n\t\t\tpass.pointLightsOffset = pointLightOffset;\n\t\t\tpass.lightProbesOffset = probeOffset;\n\t\t\tpass.lightPicker = this._material.lightPicker;\n\t\t\tpass.diffuseMethod = this._material.diffuseMethod;\n\t\t\tpass.ambientMethod = this._material.ambientMethod;\n\t\t\tpass.normalMethod = this._material.normalMethod;\n\t\t\tpass.specularMethod = this._material.specularMethod;\n\t\t\tthis._nonCasterLightPasses.push(pass);\n\n\t\t\tdirLightOffset += pass.numDirectionalLights;\n\t\t\tpointLightOffset += pass.numPointLights;\n\t\t\tprobeOffset += pass.numLightProbes;\n\t\t}\n\t}\n\n\tprivate removeNonCasterLightPasses()\n\t{\n\t\tif (!this._nonCasterLightPasses)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._nonCasterLightPasses.length; ++i)\n\t\t\tthis._pRemoveScreenPass(this._nonCasterLightPasses[i]);\n\n\t\tthis._nonCasterLightPasses = null;\n\t}\n\n\tprivate removeEffectPass()\n\t{\n\t\tif (this._screenPass.ambientMethod != this._material.ambientMethod)\n\t\t\tthis._screenPass.ambientMethod.dispose();\n\n\t\tif (this._screenPass.diffuseMethod != this._material.diffuseMethod)\n\t\t\tthis._screenPass.diffuseMethod.dispose();\n\n\t\tif (this._screenPass.specularMethod != this._material.specularMethod)\n\t\t\tthis._screenPass.specularMethod.dispose();\n\n\t\tif (this._screenPass.normalMethod != this._material.normalMethod)\n\t\t\tthis._screenPass.normalMethod.dispose();\n\n\t\tthis._pRemoveScreenPass(this._screenPass);\n\t\tthis._screenPass = null;\n\t}\n\n\tprivate initEffectPass()\n\t{\n\t\tif (this._screenPass == null)\n\t\t\tthis._screenPass = new MethodPass(MethodPassMode.SUPER_SHADER, this, this._material, this._renderableClass, this._stage);\n\n\t\tif (this._material.mode == MethodMaterialMode.SINGLE_PASS) {\n\t\t\tthis._screenPass.ambientMethod = this._material.ambientMethod;\n\t\t\tthis._screenPass.diffuseMethod = this._material.diffuseMethod;\n\t\t\tthis._screenPass.specularMethod = this._material.specularMethod;\n\t\t\tthis._screenPass.normalMethod = this._material.normalMethod;\n\t\t\tthis._screenPass.shadowMethod = this._material.shadowMethod;\n\t\t} else if (this._material.mode == MethodMaterialMode.MULTI_PASS) {\n\t\t\tif (this.numLights == 0) {\n\t\t\t\tthis._screenPass.ambientMethod = this._material.ambientMethod;\n\t\t\t} else {\n\t\t\t\tthis._screenPass.ambientMethod = null;\n\t\t\t}\n\n\t\t\tthis._screenPass.preserveAlpha = false;\n\t\t\tthis._screenPass.normalMethod = this._material.normalMethod;\n\t\t}\n\n\t\t//update effect methods\n\t\tvar i:number = 0;\n\t\tvar effectMethod:EffectMethodBase;\n\t\tvar len:number = Math.max(this._material.numEffectMethods, this._screenPass.numEffectMethods);\n\n\t\twhile (i < len) {\n\t\t\teffectMethod = this._material.getEffectMethodAt(i);\n\t\t\tif (effectMethod != this._screenPass.getEffectMethodAt(i)) {\n\t\t\t\tthis._screenPass.removeEffectMethodAt(i);\n\n\t\t\t\tif (effectMethod != null) {\n\t\t\t\t\tif (i < this._screenPass.numEffectMethods)\n\t\t\t\t\t\tthis._screenPass.addEffectMethodAt(effectMethod, i);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis._screenPass.addEffectMethod(effectMethod);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\t//TODO\n\t}\n}\n\nexport = RenderMethodMaterialObject;",
    "import TextureObjectBase\t\t\t= require(\"awayjs-renderergl/lib/pool/TextureObjectBase\");\n\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * MethodVO contains data for a given shader object for the use within a single material.\n * This allows shader methods to be shared across materials while their non-public state differs.\n */\nclass MethodVO\n{\n\tpublic useMethod:boolean = true;\n\n\tpublic method:ShadingMethodBase;\n\n\t// public register indices\n\tpublic textureObject:TextureObjectBase;\n\tpublic secondaryTextureObject:TextureObjectBase; // sometimes needed for composites\n\tpublic vertexConstantsIndex:number;\n\tpublic secondaryVertexConstantsIndex:number; // sometimes needed for composites\n\tpublic fragmentConstantsIndex:number;\n\tpublic secondaryFragmentConstantsIndex:number; // sometimes needed for composites\n\n\t// internal stuff for the material to know before assembling code\n\tpublic needsProjection:boolean;\n\tpublic needsView:boolean;\n\tpublic needsNormals:boolean;\n\tpublic needsTangents:boolean;\n\tpublic needsGlobalVertexPos:boolean;\n\tpublic needsGlobalFragmentPos:boolean;\n\t/**\n\t * Creates a new MethodVO object.\n\t */\n\tconstructor(method:ShadingMethodBase)\n\t{\n\t\tthis.method = method;\n\t}\n\n\t/**\n\t * Resets the values of the value object to their \"unused\" state.\n\t */\n\tpublic reset()\n\t{\n\t\tthis.method.iReset();\n\n\t\tthis.vertexConstantsIndex = -1;\n\t\tthis.secondaryVertexConstantsIndex = -1;\n\t\tthis.fragmentConstantsIndex = -1;\n\t\tthis.secondaryFragmentConstantsIndex = -1;\n\n\t\tthis.needsProjection = false;\n\t\tthis.needsView = false;\n\t\tthis.needsNormals = false;\n\t\tthis.needsTangents = false;\n\t\tthis.needsGlobalVertexPos = false;\n\t\tthis.needsGlobalFragmentPos = false;\n\t}\n}\n\nexport = MethodVO;\n",
    "import Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * AmbientBasicMethod provides the default shading method for uniform ambient lighting.\n */\nclass AmbientBasicMethod extends ShadingMethodBase\n{\n\tprivate _color:number = 0xffffff;\n\tprivate _alpha:number = 1;\n\n\tprivate _colorR:number = 1;\n\tprivate _colorG:number = 1;\n\tprivate _colorB:number = 1;\n\n\tprivate _ambient:number = 1;\n\n\t/**\n\t * Creates a new AmbientBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tif (shaderObject.texture)\n\t\t\tshaderObject.uvDependencies++;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tif (!shaderObject.texture) {\n\t\t\tthis._color = shaderObject.color;\n\t\t\tthis.updateColor();\n\t\t}\n\t}\n\n\t/**\n\t * The strength of the ambient reflection of the surface.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tif (this._ambient == value)\n\t\t\treturn;\n\n\t\tthis._ambient = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * The alpha component of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tif (this._alpha == value)\n\t\t\treturn;\n\n\t\tthis._alpha = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar m:any = method;\n\t\tvar b:AmbientBasicMethod = <AmbientBasicMethod> m;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (shaderObject.texture) {\n\t\t\tshaderObject.texture._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += shaderObject.texture._iGetFragmentCode(shaderObject, targetReg, registerCache, sharedRegisters.uvVarying);\n\n\t\t\tif (shaderObject.alphaThreshold > 0) {\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\t\tmethodVO.fragmentConstantsIndex = cutOffReg.index*4;\n\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\t\"kil \" + targetReg + \".w\\n\" +\n\t\t\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar ambientInputRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\tmethodVO.fragmentConstantsIndex = ambientInputRegister.index*4;\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + ambientInputRegister + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (shaderObject.texture) {\n\t\t\tshaderObject.texture.activate(shaderObject);\n\n\t\t\tif (shaderObject.alphaThreshold > 0)\n\t\t\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex] = shaderObject.alphaThreshold;\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index] = this._colorR;\n\t\t\tdata[index + 1] = this._colorG;\n\t\t\tdata[index + 2] = this._colorB;\n\t\t\tdata[index + 3] = this._alpha;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateColor()\n\t{\n\t\tthis._colorR = ((this._color >> 16) & 0xff)/0xff*this._ambient;\n\t\tthis._colorG = ((this._color >> 8) & 0xff)/0xff*this._ambient;\n\t\tthis._colorB = (this._color & 0xff)/0xff*this._ambient;\n\t}\n}\n\nexport = AmbientBasicMethod;",
    "import ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\n\n/**\n * AmbientEnvMapMethod provides a diffuse shading method that uses a diffuse irradiance environment map to\n * approximate global lighting rather than lights.\n */\nclass AmbientEnvMapMethod extends AmbientBasicMethod\n{\n\t/**\n\t * Creates a new <code>AmbientEnvMapMethod</code> object.\n\t *\n\t * @param envMap The cube environment map to use for the ambient lighting.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tshaderObject.texture._iInitRegisters(shaderObject, regCache);\n\n\t\treturn shaderObject.texture._iGetFragmentCode(shaderObject, targetReg, regCache, sharedRegisters.normalFragment);\n\t}\n}\n\nexport = AmbientEnvMapMethod;",
    "import Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * AmbientBasicMethod provides the default shading method for uniform ambient lighting.\n */\nclass CurveBasicMethod extends ShadingMethodBase\n{\n\tprivate _color:number = 0xffffff;\n\tprivate _alpha:number = 1;\n\n\tprivate _colorR:number = 1;\n\tprivate _colorG:number = 1;\n\tprivate _colorB:number = 1;\n\n\tprivate _ambient:number = 1;\n\n\t/**\n\t * Creates a new AmbientBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tif (shaderObject.texture)\n\t\t\tshaderObject.uvDependencies++;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tif (!shaderObject.texture) {\n\t\t\tthis._color = shaderObject.color;\n\t\t\tthis.updateColor();\n\t\t}\n\t}\n\n\t/**\n\t * The strength of the ambient reflection of the surface.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tif (this._ambient == value)\n\t\t\treturn;\n\n\t\tthis._ambient = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * The alpha component of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tif (this._alpha == value)\n\t\t\treturn;\n\n\t\tthis._alpha = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar m:any = method;\n\t\tvar b:CurveBasicMethod = <CurveBasicMethod> m;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n    /*\n    public iGeVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string {\n        var code:string = \"\";\n        code = \"mov \" + sharedRegisters.uvVarying + \" \" + registerCache.uv +  \" \\n\";\n    }*/\n    public iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar ambientInputRegister:ShaderRegisterElement;\n\n\t\tif (shaderObject.texture) {\n\t\t\tshaderObject.texture._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += shaderObject.texture._iGetFragmentCode(shaderObject, targetReg, registerCache, sharedRegisters.uvVarying);\n\n\t\t\tif (shaderObject.alphaThreshold > 0) {\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\t\tmethodVO.fragmentConstantsIndex = cutOffReg.index*4;\n\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\t\"kil \" + targetReg + \".w\\n\" +\n\t\t\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n\t\t\t}\n\n\t\t} else {\n\t\t\tambientInputRegister = registerCache.getFreeFragmentConstant();\n\t\t\tmethodVO.fragmentConstantsIndex = ambientInputRegister.index*4;\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + ambientInputRegister + \"\\n\";\n\t\t}\n        code = \"mov \" + targetReg + \", \" + sharedRegisters.uvVarying + \"\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (shaderObject.texture) {\n\t\t\tshaderObject.texture.activate(shaderObject);\n\n\t\t\tif (shaderObject.alphaThreshold > 0)\n\t\t\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex] = shaderObject.alphaThreshold;\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index] = this._colorR;\n\t\t\tdata[index + 1] = this._colorG;\n\t\t\tdata[index + 2] = this._colorB;\n\t\t\tdata[index + 3] = this._alpha;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateColor()\n\t{\n\t\tthis._colorR = ((this._color >> 16) & 0xff)/0xff*this._ambient;\n\t\tthis._colorG = ((this._color >> 8) & 0xff)/0xff*this._ambient;\n\t\tthis._colorB = (this._color & 0xff)/0xff*this._ambient;\n\t}\n}\nexport = CurveBasicMethod;",
    "import Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\nimport LightingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\n\n/**\n * DiffuseBasicMethod provides the default shading method for Lambert (dot3) diffuse lighting.\n */\nclass DiffuseBasicMethod extends LightingMethodBase\n{\n\tprivate _multiply:boolean = true;\n\n\tpublic _pTotalLightColorReg:ShaderRegisterElement;\n\n\tpublic _texture:TextureBase;\n\tprivate _diffuseColor:number = 0xffffff;\n\tprivate _ambientColor:number = 0xffffff;\n\tprivate _diffuseR:number = 1;\n\tprivate _diffuseG:number = 1;\n\tprivate _diffuseB:number = 1;\n\tprivate _ambientR:number = 1;\n\tprivate _ambientG:number = 1;\n\tprivate _ambientB:number = 1;\n\n\tpublic _pIsFirstLight:boolean;\n\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderLightingObject):boolean\n\t{\n\t\tif (!shaderObject.numLights)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set internally if diffuse color component multiplies or replaces the ambient color\n\t */\n\tpublic get multiply():boolean\n\t{\n\t\treturn this._multiply;\n\t}\n\n\tpublic set multiply(value:boolean)\n\t{\n\t\tif (this._multiply == value)\n\t\t\treturn;\n\n\t\tthis._multiply = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._texture);\n\t\t\tshaderObject.uvDependencies++;\n\t\t} else if (methodVO.textureObject) {\n\t\t\tmethodVO.textureObject.dispose();\n\t\t\tmethodVO.textureObject = null;\n\t\t}\n\n\n\t\tmethodVO.needsNormals = shaderObject.numLights > 0;\n\t}\n\n\t/**\n\t * The color of the diffuse reflection when not using a texture.\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this._diffuseColor;\n\t}\n\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tif (this._diffuseColor == value)\n\t\t\treturn;\n\n\t\tthis._diffuseColor = value;\n\n\t\tthis.updateDiffuse();\n\t}\n\n\t/**\n\t * The color of the ambient reflection\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this._ambientColor;\n\t}\n\n\tpublic set ambientColor(value:number)\n\t{\n\t\tif (this._ambientColor == value)\n\t\t\treturn;\n\n\t\tthis._ambientColor = value;\n\n\t\tthis.updateAmbient();\n\t}\n\n\n\t/**\n\t * The bitmapData to use to define the diffuse reflection color per texel.\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tif (this._texture == value)\n\t\t\treturn;\n\n\t\tthis._texture = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._texture = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar diff:DiffuseBasicMethod = <DiffuseBasicMethod> method;\n\n\t\tthis.texture = diff.texture;\n\t\tthis.multiply = diff.multiply;\n\t\tthis.diffuseColor = diff.diffuseColor;\n\t\tthis.ambientColor = diff.ambientColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._pTotalLightColorReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tthis._pIsFirstLight = true;\n\n\t\tregisterCache.addFragmentTempUsages(this._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp(), 1);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".x, \" + lightDirReg + \", \" + sharedRegisters.normalFragment + \"\\n\" +\n\t\t\t\t\"max \" + t + \".w, \" + t + \".x, \" + sharedRegisters.commons + \".y\\n\";\n\n\t\tif (shaderObject.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \", \" + t + \".w, \" + lightColReg + \"\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"tex \" + t + \", \" + sharedRegisters.normalFragment + \", \" + cubeMapReg + \" <cube,linear,miplinear>\\n\" +\n\t\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + weightRegister + \"\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tvar albedo:ShaderRegisterElement;\n\t\tvar cutOffReg:ShaderRegisterElement;\n\n\t\t// incorporate input from ambient\n\t\tif (sharedRegisters.shadowTarget)\n\t\t\tcode += this.pApplyShadow(shaderObject, methodVO, registerCache, sharedRegisters);\n\n\t\tregisterCache.addFragmentTempUsages(albedo = registerCache.getFreeFragmentVectorTemp(), 1);\n\n\t\tvar ambientColorRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = ambientColorRegister.index*4;\n\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.textureObject._iGetFragmentCode(shaderObject, albedo, registerCache, sharedRegisters.uvVarying);\n\t\t} else {\n\t\t\tvar diffuseInputRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\t\tcode += \"mov \" + albedo + \", \" + diffuseInputRegister + \"\\n\";\n\t\t}\n\n\t\tcode += \"sat \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\"mul \" + albedo + \".xyz, \" + albedo + \", \" + this._pTotalLightColorReg + \"\\n\";\n\n\t\tif (this._multiply) {\n\t\t\tcode += \"add \" + albedo + \".xyz, \" + albedo + \", \" + ambientColorRegister + \"\\n\" +\n\t\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \", \" + albedo + \"\\n\";\n\t\t} else {\n\t\t\tcode += \"mul \" + targetReg + \".xyz, \" + targetReg + \", \" + ambientColorRegister + \"\\n\" +\n\t\t\t\t\"mul \" + this._pTotalLightColorReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \", \" + albedo + \"\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\t\tregisterCache.removeFragmentTempUsage(albedo);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Generate the code that applies the calculated shadow to the diffuse light\n\t * @param methodVO The MethodVO object for which the compilation is currently happening.\n\t * @param regCache The register cache the compiler is currently using for the register management.\n\t */\n\tpublic pApplyShadow(shaderObject:ShaderLightingObject, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + sharedRegisters.shadowTarget + \".w\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureObject.activate(shaderObject);\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index + 4] = this._diffuseR;\n\t\t\tdata[index + 5] = this._diffuseG;\n\t\t\tdata[index + 6] = this._diffuseB;\n\t\t\tdata[index + 7] = 1;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the diffuse color data used by the render state.\n\t */\n\tprivate updateDiffuse()\n\t{\n\t\tthis._diffuseR = ((this._diffuseColor >> 16) & 0xff)/0xff;\n\t\tthis._diffuseG = ((this._diffuseColor >> 8) & 0xff)/0xff;\n\t\tthis._diffuseB = (this._diffuseColor & 0xff)/0xff;\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateAmbient()\n\t{\n\t\tthis._ambientR = ((this._ambientColor >> 16) & 0xff)/0xff;\n\t\tthis._ambientG = ((this._ambientColor >> 8) & 0xff)/0xff;\n\t\tthis._ambientB = (this._ambientColor & 0xff)/0xff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderLightingObject, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\t//TODO move this to Activate (ambientR/G/B currently calc'd in render state)\n\t\tif (shaderObject.numLights > 0) {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index] = shaderObject.ambientR*this._ambientR;\n\t\t\tdata[index + 1] = shaderObject.ambientG*this._ambientG;\n\t\t\tdata[index + 2] = shaderObject.ambientB*this._ambientB;\n\t\t\tdata[index + 3] = 1;\n\t\t}\n\t}\n}\n\nexport = DiffuseBasicMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\n\n/**\n * DiffuseCelMethod provides a shading method to add diffuse cel (cartoon) shading.\n */\nclass DiffuseCelMethod extends DiffuseCompositeMethod\n{\n\tprivate _levels:number /*uint*/;\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _smoothness:number = .1;\n\n\t/**\n\t * Creates a new DiffuseCelMethod object.\n\t * @param levels The amount of shadow gradations.\n\t * @param baseMethod An optional diffuse method on which the cartoon shading is based. If omitted, DiffuseBasicMethod is used.\n\t */\n\tconstructor(levels:number /*uint*/ = 3, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.clampDiffuse(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._levels = levels;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\t\tdata[index + 1] = 1;\n\t\tdata[index + 2] = 0;\n\t}\n\n\t/**\n\t * The amount of shadow gradations.\n\t */\n\tpublic get levels():number /*uint*/\n\t{\n\t\treturn this._levels;\n\t}\n\n\tpublic set levels(value:number /*uint*/)\n\t{\n\t\tthis._levels = value;\n\t}\n\n\t/**\n\t * The smoothness of the edge between 2 shading levels.\n\t */\n\tpublic get smoothness():number\n\t{\n\t\treturn this._smoothness;\n\t}\n\n\tpublic set smoothness(value:number)\n\t{\n\t\tthis._smoothness = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index] = this._levels;\n\t\tdata[index + 3] = this._smoothness;\n\t}\n\n\t/**\n\t * Snaps the diffuse shading of the wrapped method to one of the levels.\n\t * @param vo The MethodVO used to compile the current shader.\n\t * @param t The register containing the diffuse strength in the \"w\" component.\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared register data for this shader.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate clampDiffuse(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + this._dataReg + \".x\\n\" +\n\t\t\t\"frc \" + targetReg + \".z, \" + targetReg + \".w\\n\" +\n\t\t\t\"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + targetReg + \".z\\n\" +\n\t\t\t\"mov \" + targetReg + \".x, \" + this._dataReg + \".x\\n\" +\n\t\t\t\"sub \" + targetReg + \".x, \" + targetReg + \".x, \" + this._dataReg + \".y\\n\" +\n\t\t\t\"rcp \" + targetReg + \".x,\" + targetReg + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".y, \" + targetReg + \".x\\n\" +\n\n\t\t\t// previous clamped strength\n\t\t\t\"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + targetReg + \".x\\n\" +\n\n\t\t\t// fract/epsilon (so 0 - epsilon will become 0 - 1)\n\t\t\t\"div \" + targetReg + \".z, \" + targetReg + \".z, \" + this._dataReg + \".w\\n\" +\n\t\t\t\"sat \" + targetReg + \".z, \" + targetReg + \".z\\n\" +\n\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".z\\n\" +\n\t\t\t// 1-z\n\t\t\t\"sub \" + targetReg + \".z, \" + this._dataReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"mul \" + targetReg + \".y, \" + targetReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\" +\n\t\t\t\"sat \" + targetReg + \".w, \" + targetReg + \".w\\n\";\n\t}\n}\n\nexport = DiffuseCelMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseCompositeMethod provides a base class for diffuse methods that wrap a diffuse method to alter the\n * calculated diffuse reflection strength.\n */\nclass DiffuseCompositeMethod extends DiffuseBasicMethod\n{\n\tpublic pBaseMethod:DiffuseBasicMethod;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new <code>DiffuseCompositeMethod</code> object.\n\t *\n\t * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature clampDiffuse(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the diffuse strength.\n\t * @param baseMethod The base diffuse method on which this method's shading is based.\n\t */\n\tconstructor(modulateMethod:(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper();\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis.pBaseMethod = baseMethod || new DiffuseBasicMethod();\n\t\tthis.pBaseMethod._iModulateMethod = modulateMethod;\n\t\tthis.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * The base diffuse method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this.pBaseMethod;\n\t}\n\n\tpublic set baseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this.pBaseMethod == value)\n\t\t\treturn;\n\n\t\tthis.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.pBaseMethod = value;\n\t\tthis.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis.pBaseMethod.iInitVO(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis.pBaseMethod.iInitConstants(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.pBaseMethod.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this.pBaseMethod.texture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tthis.pBaseMethod.texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this.pBaseMethod.diffuseColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tthis.pBaseMethod.diffuseColor = value;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this.pBaseMethod.ambientColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set ambientColor(value:number)\n\t{\n\t\tthis.pBaseMethod.ambientColor = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this.pBaseMethod.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t\tthis._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this.pBaseMethod.iGetFragmentCodePerProbe(shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);\n\t\tthis._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis.pBaseMethod.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderLightingObject, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tthis.pBaseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis.pBaseMethod.iDeactivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis.pBaseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis.pBaseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = DiffuseCompositeMethod;",
    "import ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseDepthMethod provides a debug method to visualise depth maps\n */\nclass DiffuseDepthMethod extends DiffuseBasicMethod\n{\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = 1.0;\n\t\tdata[index + 1] = 1/255.0;\n\t\tdata[index + 2] = 1/65025.0;\n\t\tdata[index + 3] = 1/16581375.0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement;\n\t\tvar decReg:ShaderRegisterElement;\n\n\t\tif (!this._texture)\n\t\t\tthrow new Error(\"DiffuseDepthMethod requires texture!\");\n\n\t\t// incorporate input from ambient\n\t\tif (shaderObject.numLights > 0) {\n\t\t\tif (sharedRegisters.shadowTarget)\n\t\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + sharedRegisters.shadowTarget + \".w\\n\";\n\t\t\tcode += \"add \" + targetReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\t\"sat \" + targetReg + \".xyz, \" + targetReg + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\t\t\tregisterCache.addFragmentTempUsages(temp = registerCache.getFreeFragmentVectorTemp(), 1);\n\t\t} else {\n\t\t\ttemp = targetReg;\n\t\t}\n\n\t\tdecReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\tcode += methodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, sharedRegisters.uvVarying) +\n\t\t\t\"dp4 \" + temp + \".x, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\"mov \" + temp + \".yz, \" + temp + \".xx\t\t\t\\n\" +\n\t\t\t\"mov \" + temp + \".w, \" + decReg + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".xyz, \" + decReg + \".xxx, \" + temp + \".xyz\\n\";\n\n\t\tif (shaderObject.numLights == 0)\n\t\t\treturn code;\n\n\t\tcode += \"mul \" + targetReg + \".xyz, \" + temp + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\"mov \" + targetReg + \".w, \" + temp + \".w\\n\";\n\n\t\tif (shaderObject.numLights > 0)\n\t\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseDepthMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseGradientMethod is an alternative to DiffuseBasicMethod in which the shading can be modulated with a gradient\n * to introduce color-tinted shading as opposed to the single-channel diffuse strength. This can be used as a crude\n * approximation to subsurface scattering (for instance, the mid-range shading for skin can be tinted red to similate\n * scattered light within the skin attributing to the final colour)\n */\nclass DiffuseGradientMethod extends DiffuseBasicMethod\n{\n\tprivate _gradient:TextureBase;\n\n\t/**\n\t * Creates a new DiffuseGradientMethod object.\n\t * @param gradient A texture that contains the light colour based on the angle. This can be used to change\n\t * the light colour due to subsurface scattering when the surface faces away from the light.\n\t */\n\tconstructor(gradient:TextureBase)\n\t{\n\t\tsuper();\n\n\t\tthis._gradient = gradient;\n\t}\n\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shaderObject, methodVO);\n\n\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(this._gradient);\n\t}\n\n\t/**\n\t * A texture that contains the light colour based on the angle. This can be used to change the light colour\n\t * due to subsurface scattering when the surface faces away from the light.\n\t */\n\tpublic get gradient():TextureBase\n\t{\n\t\treturn this._gradient;\n\t}\n\n\tpublic set gradient(value:TextureBase)\n\t{\n\t\tif (this._gradient == value)\n\t\t\treturn;\n\n\t\tthis._gradient = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t\tthis._pIsFirstLight = true;\n\n\t\tif (shaderObject.numLights > 0)\n\t\t\tmethodVO.secondaryTextureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight)\n\t\t\tt = this._pTotalLightColorReg;\n\t\telse {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".w, \" + lightDirReg + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"mul \" + t + \".w, \" + t + \".w, \" + sharedRegisters.commons + \".x\\n\" +\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + sharedRegisters.commons + \".x\\n\" +\n\t\t\t\"mul \" + t + \".xyz, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, t, registerCache, t) +\n\t\t\t//\t\t\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + t + \".w\\n\" +\n\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + lightColReg + \".xyz\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic pApplyShadow(shaderObject:ShaderLightingObject, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar t:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\treturn \"mov \" + t + \", \" + sharedRegisters.shadowTarget + \".wwww\\n\" +\n\t\t\tmethodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, t, regCache, sharedRegisters.uvVarying) +\n\t\t\t\"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n}\n\nexport = DiffuseGradientMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\n\n/**\n * DiffuseLightMapMethod provides a diffuse shading method that uses a light map to modulate the calculated diffuse\n * lighting. It is different from EffectLightMapMethod in that the latter modulates the entire calculated pixel color, rather\n * than only the diffuse lighting value.\n */\nclass DiffuseLightMapMethod extends DiffuseCompositeMethod\n{\n\t/**\n\t * Indicates the light map should be multiplied with the calculated shading result.\n\t * This can be used to add pre-calculated shadows or occlusion.\n\t */\n\tpublic static MULTIPLY:string = \"multiply\";\n\n\t/**\n\t * Indicates the light map should be added into the calculated shading result.\n\t * This can be used to add pre-calculated lighting or global illumination.\n\t */\n\tpublic static ADD:string = \"add\";\n\n\tprivate _lightMap:TextureBase;\n\tprivate _blendMode:string;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new DiffuseLightMapMethod method.\n\t *\n\t * @param lightMap The texture containing the light map.\n\t * @param blendMode The blend mode with which the light map should be applied to the lighting result.\n\t * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.\n\t * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.\n\t */\n\tconstructor(lightMap:TextureBase, blendMode:string = \"multiply\", useSecondaryUV:boolean = false, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t\tthis._lightMap = lightMap;\n\t\tthis.blendMode = blendMode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(this._lightMap);\n\n\t\tif (this._useSecondaryUV)\n\t\t\tshaderObject.secondaryUVDependencies++;\n\t\telse\n\t\t\tshaderObject.uvDependencies++;\n\t}\n\n\t/**\n\t * The blend mode with which the light map should be applied to the lighting result.\n\t *\n\t * @see DiffuseLightMapMethod.ADD\n\t * @see DiffuseLightMapMethod.MULTIPLY\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (value != DiffuseLightMapMethod.ADD && value != DiffuseLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture containing the light map data.\n\t */\n\tpublic get lightMap():TextureBase\n\t{\n\t\treturn this._lightMap;\n\t}\n\n\tpublic set lightMap(value:TextureBase)\n\t{\n\t\tif (this._lightMap == value)\n\t\t\treturn;\n\n\t\tthis._lightMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\n\t\tthis._useSecondaryUV = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tmethodVO.secondaryTextureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\tcode = methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, temp, registerCache, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying);\n\n\t\tswitch (this._blendMode) {\n\t\t\tcase DiffuseLightMapMethod.MULTIPLY:\n\t\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase DiffuseLightMapMethod.ADD:\n\t\t\t\tcode += \"add \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcode += super.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n}\n\nexport = DiffuseLightMapMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\nimport SingleObjectDepthPass\t\t\t= require(\"awayjs-methodmaterials/lib/passes/SingleObjectDepthPass\");\n\n/**\n * DiffuseSubSurfaceMethod provides a depth map-based diffuse shading method that mimics the scattering of\n * light inside translucent surfaces. It allows light to shine through an object and to soften the diffuse shading.\n * It can be used for candle wax, ice, skin, ...\n */\nclass DiffuseSubSurfaceMethod extends DiffuseCompositeMethod\n{\n\tprivate _depthPass:SingleObjectDepthPass;\n\tprivate _lightProjVarying:ShaderRegisterElement;\n\tprivate _propReg:ShaderRegisterElement;\n\tprivate _scattering:number;\n\tprivate _translucency:number = 1;\n\tprivate _lightColorReg:ShaderRegisterElement;\n\tprivate _scatterColor:number /*uint*/ = 0xffffff;\n\tprivate _colorReg:ShaderRegisterElement;\n\tprivate _decReg:ShaderRegisterElement;\n\tprivate _scatterR:number = 1.0;\n\tprivate _scatterG:number = 1.0;\n\tprivate _scatterB:number = 1.0;\n\tprivate _targetReg:ShaderRegisterElement;\n\t\n\t/**\n\t * Creates a new <code>DiffuseSubSurfaceMethod</code> object.\n\t *\n\t * @param depthMapSize The size of the depth map used.\n\t * @param depthMapOffset The amount by which the rendered object will be inflated, to prevent depth map rounding errors.\n\t * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.\n\t */\n\tconstructor(depthMapSize:number /*int*/ = 512, depthMapOffset:number = 15, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.pBaseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.scatterLight(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\t//this._passes = new Array<MaterialPassGLBase>();\n\t\t//this._depthPass = new SingleObjectDepthPass();\n\t\t//this._depthPass.textureSize = depthMapSize;\n\t\t//this._depthPass.polyOffset = depthMapOffset;\n\t\t//this._passes.push(this._depthPass);\n\t\tthis._scattering = 0.2;\n\t\tthis._translucency = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tvar data:Array<number> = shaderObject.vertexConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryVertexConstantsIndex;\n\t\tdata[index] = .5;\n\t\tdata[index + 1] = -.5;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t\t\n\t\tdata = shaderObject.fragmentConstantData;\n\t\tindex = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index + 3] = 1.0;\n\t\tdata[index + 4] = 1.0;\n\t\tdata[index + 5] = 1/255;\n\t\tdata[index + 6] = 1/65025;\n\t\tdata[index + 7] = 1/16581375;\n\t\tdata[index + 10] = .5;\n\t\tdata[index + 11] = -.1;\n\t}\n\t\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._lightProjVarying = null;\n\t\tthis._propReg = null;\n\t\tthis._lightColorReg = null;\n\t\tthis._colorReg = null;\n\t\tthis._decReg = null;\n\t\tthis._targetReg = null;\n\t}\n\t\n\t/**\n\t * The amount by which the light scatters. It can be used to set the translucent surface's thickness. Use low\n\t * values for skin.\n\t */\n\tpublic get scattering():number\n\t{\n\t\treturn this._scattering;\n\t}\n\t\n\tpublic set scattering(value:number)\n\t{\n\t\tthis._scattering = value;\n\t}\n\t\n\t/**\n\t * The translucency of the object.\n\t */\n\tpublic get translucency():number\n\t{\n\t\treturn this._translucency;\n\t}\n\t\n\tpublic set translucency(value:number)\n\t{\n\t\tthis._translucency = value;\n\t}\n\t\n\t/**\n\t * The colour of the \"insides\" of the object, ie: the colour the light becomes after leaving the object.\n\t */\n\tpublic get scatterColor():number /*uint*/\n\t{\n\t\treturn this._scatterColor;\n\t}\n\t\n\tpublic set scatterColor(scatterColor:number /*uint*/)\n\t{\n\t\tthis._scatterColor = scatterColor;\n\t\tthis._scatterR = ((scatterColor >> 16) & 0xff)/0xff;\n\t\tthis._scatterG = ((scatterColor >> 8) & 0xff)/0xff;\n\t\tthis._scatterB = (scatterColor & 0xff)/0xff;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t\tvar lightProjection:ShaderRegisterElement;\n\t\tvar toTexRegister:ShaderRegisterElement;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\n\t\ttoTexRegister = registerCache.getFreeVertexConstant();\n\t\tmethodVO.secondaryVertexConstantsIndex = toTexRegister.index*4;\n\n\t\tthis._lightProjVarying = registerCache.getFreeVarying();\n\t\tlightProjection = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\t\n\t\tcode += \"m44 \" + temp + \", vt0, \" + lightProjection + \"\\n\" +\n\t\t\t\"div \" + temp + \".xyz, \" + temp + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xy, \" + temp + \".xy, \" + toTexRegister + \".xy\\n\" +\n\t\t\t\"add \" + temp + \".xy, \" + temp + \".xy, \" + toTexRegister + \".xx\\n\" +\n\t\t\t\"mov \" + this._lightProjVarying + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\"mov \" + this._lightProjVarying + \".w, va0.w\\n\";\n\t\t\n\t\treturn code;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._colorReg = registerCache.getFreeFragmentConstant();\n\t\tthis._decReg = registerCache.getFreeFragmentConstant();\n\t\tthis._propReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._colorReg.index*4;\n\t\t\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pIsFirstLight = true;\n\t\tthis._lightColorReg = lightColReg;\n\t\treturn super.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\t\n\t\tcode += \"mul \" + temp + \".xyz, \" + this._lightColorReg + \".xyz, \" + this._targetReg + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".xyz, \" + this._colorReg + \".xyz\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t\n\t\tif (this._targetReg != sharedRegisters.viewDirFragment)\n\t\t\tregisterCache.removeFragmentTempUsage(targetReg);\n\t\t\n\t\treturn code;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._scatterR;\n\t\tdata[index + 1] = this._scatterG;\n\t\tdata[index + 2] = this._scatterB;\n\t\tdata[index + 8] = this._scattering;\n\t\tdata[index + 9] = this._translucency;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(this._depthPass._iGetDepthMap(renderable));\n\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\n\t\tthis._depthPass._iGetProjection(renderable).copyRawDataTo(shaderObject.vertexConstantData, methodVO.secondaryVertexConstantsIndex + 4, true);\n\t}\n\t\n\t/**\n\t * Generates the code for this method\n\t */\n\tprivate scatterLight(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// only scatter first light\n\t\tif (!this._pIsFirstLight)\n\t\t\treturn \"\";\n\n\t\tthis._pIsFirstLight = false;\n\n\t\tvar code:string = \"\";\n\n\t\tif (sharedRegisters.viewDirFragment)\n\t\t\tthis._targetReg = sharedRegisters.viewDirFragment;\n\t\telse\n\t\t\tregisterCache.addFragmentTempUsages(this._targetReg = registerCache.getFreeFragmentVectorTemp(), 1);\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode += methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, temp, registerCache, this._lightProjVarying) +\n\t\t\t// reencode RGBA\n\t\t\t\"dp4 \" + targetReg + \".z, \" + temp + \", \" + this._decReg + \"\\n\";\n\t\t// currentDistanceToLight - closestDistanceToLight\n\t\tcode += \"sub \" + targetReg + \".z, \" + this._lightProjVarying + \".z, \" + targetReg + \".z\\n\" +\n\t\t\t\n\t\t\t\"sub \" + targetReg + \".z, \" + this._propReg + \".x, \" + targetReg + \".z\\n\" +\n\t\t\t\"mul \" + targetReg + \".z, \" + this._propReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"sat \" + targetReg + \".z, \" + targetReg + \".z\\n\" +\n\t\t\t\n\t\t\t// targetReg.x contains dot(lightDir, normal)\n\t\t\t// modulate according to incident light angle (scatter = scatter*(-.5*dot(light, normal) + .5)\n\t\t\t\"neg \" + targetReg + \".y, \" + targetReg + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".y, \" + targetReg + \".y, \" + this._propReg + \".z\\n\" +\n\t\t\t\"add \" + targetReg + \".y, \" + targetReg + \".y, \" + this._propReg + \".z\\n\" +\n\t\t\t\"mul \" + this._targetReg + \".w, \" + targetReg + \".z, \" + targetReg + \".y\\n\" +\n\t\t\t\n\t\t\t// blend diffuse: d' = (1-s)*d + s*1\n\t\t\t\"sub \" + targetReg + \".y, \" + this._colorReg + \".w, \" + this._targetReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\t\t\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseSubSurfaceMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseWrapMethod is an alternative to DiffuseBasicMethod in which the light is allowed to be \"wrapped around\" the normally dark area, to some extent.\n * It can be used as a crude approximation to Oren-Nayar or simple subsurface scattering.\n */\nclass DiffuseWrapMethod extends DiffuseBasicMethod\n{\n\tprivate _wrapDataRegister:ShaderRegisterElement;\n\tprivate _wrapFactor:number;\n\n\t/**\n\t * Creates a new DiffuseWrapMethod object.\n\t * @param wrapFactor A factor to indicate the amount by which the light is allowed to wrap\n\t */\n\tconstructor(wrapFactor:number = .5)\n\t{\n\t\tsuper();\n\n\t\tthis.wrapFactor = wrapFactor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._wrapDataRegister = null;\n\t}\n\n\t/**\n\t * A factor to indicate the amount by which the light is allowed to wrap.\n\t */\n\tpublic get wrapFactor():number\n\t{\n\t\treturn this._wrapFactor;\n\t}\n\n\tpublic set wrapFactor(value:number)\n\t{\n\t\tthis._wrapFactor = value;\n\t\tthis._wrapFactor = 1/(value + 1);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t\tthis._pIsFirstLight = true;\n\t\tthis._wrapDataRegister = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._wrapDataRegister.index*4;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".x, \" + lightDirReg + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"add \" + t + \".y, \" + t + \".x, \" + this._wrapDataRegister + \".x\\n\" +\n\t\t\t\"mul \" + t + \".y, \" + t + \".y, \" + this._wrapDataRegister + \".y\\n\" +\n\t\t\t\"sat \" + t + \".w, \" + t + \".y\\n\" +\n\t\t\t\"mul \" + t + \".xz, \" + t + \".w, \" + lightDirReg + \".wz\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, lightDirReg, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \", \" + t + \".x, \" + lightColReg + \"\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._wrapFactor;\n\t\tdata[index + 1] = 1/(this._wrapFactor + 1);\n\t}\n}\n\nexport = DiffuseWrapMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectAlphaMaskMethod allows the use of an additional texture to specify the alpha value of the material. When used\n * with the secondary uv set, it allows for a tiled main texture with independently varying alpha (useful for water\n * etc).\n */\nclass EffectAlphaMaskMethod extends EffectMethodBase\n{\n\tprivate _texture:TextureBase;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new EffectAlphaMaskMethod object.\n\t *\n\t * @param texture The texture to use as the alpha mask.\n\t * @param useSecondaryUV Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently.\n\t */\n\tconstructor(texture:TextureBase, useSecondaryUV:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tthis._texture = texture;\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._texture);\n\n\t\tif (this._useSecondaryUV)\n\t\t\tshaderObject.secondaryUVDependencies++;\n\t\telse\n\t\t\tshaderObject.uvDependencies++;\n\t}\n\n\t/**\n\t * Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently, for\n\t * instance to tile the main texture and normal map while providing untiled alpha, for example to define the\n\t * transparency over a tiled water surface.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\n\t\tthis._useSecondaryUV = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture to use as the alpha mask.\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tif (this._texture == value)\n\t\t\treturn;\n\n\t\tthis._texture = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\treturn methodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying) +\n\t\t\t\"mul \" + targetReg + \", \" + targetReg + \", \" + temp + \".x\\n\";\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tmethodVO.textureObject.activate(shaderObject);\n\t}\n}\n\nexport = EffectAlphaMaskMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectColorMatrixMethod provides a shading method that changes the colour of a material analogous to a ColorMatrixFilter.\n */\nclass EffectColorMatrixMethod extends EffectMethodBase\n{\n\tprivate _matrix:Array<number>;\n\n\t/**\n\t * Creates a new EffectColorTransformMethod.\n\t *\n\t * @param matrix An array of 20 items for 4 x 5 color transform.\n\t */\n\tconstructor(matrix:Array<number>)\n\t{\n\t\tsuper();\n\n\t\tif (matrix.length != 20)\n\t\t\tthrow new Error(\"Matrix length must be 20!\");\n\n\t\tthis._matrix = matrix;\n\t}\n\n\t/**\n\t * The 4 x 5 matrix to transform the color of the material.\n\t */\n\tpublic get colorMatrix():Array<number>\n\t{\n\t\treturn this._matrix;\n\t}\n\n\tpublic set colorMatrix(value:Array<number>)\n\t{\n\t\tthis._matrix = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar colorMultReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\n\t\tvar colorOffsetReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = colorMultReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode += \"m44 \" + temp + \", \" + targetReg + \", \" + colorMultReg + \"\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + temp + \", \" + colorOffsetReg + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar matrix:Array<number> = this._matrix;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\n\t\t// r\n\t\tdata[index] = matrix[0];\n\t\tdata[index + 1] = matrix[1];\n\t\tdata[index + 2] = matrix[2];\n\t\tdata[index + 3] = matrix[3];\n\n\t\t// g\n\t\tdata[index + 4] = matrix[5];\n\t\tdata[index + 5] = matrix[6];\n\t\tdata[index + 6] = matrix[7];\n\t\tdata[index + 7] = matrix[8];\n\n\t\t// b\n\t\tdata[index + 8] = matrix[10];\n\t\tdata[index + 9] = matrix[11];\n\t\tdata[index + 10] = matrix[12];\n\t\tdata[index + 11] = matrix[13];\n\n\t\t// a\n\t\tdata[index + 12] = matrix[15];\n\t\tdata[index + 13] = matrix[16];\n\t\tdata[index + 14] = matrix[17];\n\t\tdata[index + 15] = matrix[18];\n\n\t\t// rgba offset\n\t\tdata[index + 16] = matrix[4];\n\t\tdata[index + 17] = matrix[9];\n\t\tdata[index + 18] = matrix[14];\n\t\tdata[index + 19] = matrix[19];\n\t}\n}\n\nexport = EffectColorMatrixMethod;",
    "import ColorTransform\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectColorTransformMethod provides a shading method that changes the colour of a material analogous to a\n * ColorTransform object.\n */\nclass EffectColorTransformMethod extends EffectMethodBase\n{\n\tprivate _colorTransform:ColorTransform;\n\n\t/**\n\t * Creates a new EffectColorTransformMethod.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * The ColorTransform object to transform the colour of the material with.\n\t */\n\tpublic get colorTransform():ColorTransform\n\t{\n\t\treturn this._colorTransform;\n\t}\n\n\tpublic set colorTransform(value:ColorTransform)\n\t{\n\t\tthis._colorTransform = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar colorMultReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar colorOffsReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = colorMultReg.index*4;\n\n\t\t//TODO: AGAL <> GLSL\n\n\t\tcode += \"mul \" + targetReg + \", \" + targetReg + \", \" + colorMultReg + \"\\n\" + \"add \" + targetReg + \", \" + targetReg + \", \" + colorOffsReg + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar inv:number = 1/0xff;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\n\t\tdata[index] = this._colorTransform.redMultiplier;\n\t\tdata[index + 1] = this._colorTransform.greenMultiplier;\n\t\tdata[index + 2] = this._colorTransform.blueMultiplier;\n\t\tdata[index + 3] = this._colorTransform.alphaMultiplier;\n\t\tdata[index + 4] = this._colorTransform.redOffset*inv;\n\t\tdata[index + 5] = this._colorTransform.greenOffset*inv;\n\t\tdata[index + 6] = this._colorTransform.blueOffset*inv;\n\t\tdata[index + 7] = this._colorTransform.alphaOffset*inv;\n\n\t}\n}\n\nexport = EffectColorTransformMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectEnvMapMethod provides a material method to perform reflection mapping using cube maps.\n */\nclass EffectEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:TextureBase;\n\tprivate _alpha:number;\n\tprivate _mask:TextureBase;\n\n\t/**\n\t * Creates an EffectEnvMapMethod object.\n\t * @param envMap The environment map containing the reflected scene.\n\t * @param alpha The reflectivity of the surface.\n\t */\n\tconstructor(envMap:TextureBase, alpha:number = 1)\n\t{\n\t\tsuper();\n\t\tthis._envMap = envMap;\n\t\tthis._alpha = alpha;\n\n\t}\n\n\t/**\n\t * An optional texture to modulate the reflectivity of the surface.\n\t */\n\tpublic get mask():TextureBase\n\t{\n\t\treturn this._mask;\n\t}\n\n\tpublic set mask(value:TextureBase)\n\t{\n\t\tif (value == this._mask)\n\t\t\treturn;\n\n\t\tthis._mask = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._envMap);\n\n\t\tif (this._mask != null) {\n\t\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(this._mask);\n\t\t\tshaderObject.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * The cubic environment map containing the reflected scene.\n\t */\n\tpublic get envMap():TextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:TextureBase)\n\t{\n\t\tif (this._envMap == value)\n\t\t\treturn;\n\n\t\tthis._envMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t}\n\n\t/**\n\t * The reflectivity of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex] = this._alpha;\n\n\t\tmethodVO.textureObject.activate(shaderObject);\n\n\t\tif (this._mask)\n\t\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t// r = I - 2(I.N)*N\n\t\tcode += \"dp3 \" + temp + \".w, \" + sharedRegisters.viewDirFragment + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"add \" + temp + \".w, \" + temp + \".w, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + sharedRegisters.normalFragment + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\"sub \" + temp + \".xyz, \" + temp + \".xyz, \" + sharedRegisters.viewDirFragment + \".xyz\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, temp) +\n\t\t\t\"sub \" + temp2 + \".w, \" + temp + \".w, fc0.x\\n\" + // -.5\n\t\t\t\"kil \" + temp2 + \".w\\n\" +\t// used for real time reflection mapping - if alpha is not 1 (mock texture) kil output\n\t\t\t\"sub \" + temp + \", \" + temp + \", \" + targetReg + \"\\n\";\n\n\t\tif (this._mask) {\n\t\t\tmethodVO.secondaryTextureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, temp2, registerCache, sharedRegisters.uvVarying) +\n\t\t\t\t\"mul \" + temp + \", \" + temp2 + \", \" + temp + \"\\n\";\n\t\t}\n\n\t\tcode += \"mul \" + temp + \", \" + temp + \", \" + dataRegister + \".x\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(temp2);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectEnvMapMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectFogMethod provides a method to add distance-based fog to a material.\n */\nclass EffectFogMethod extends EffectMethodBase\n{\n\tprivate _minDistance:number = 0;\n\tprivate _maxDistance:number = 1000;\n\tprivate _fogColor:number /*uint*/;\n\tprivate _fogR:number;\n\tprivate _fogG:number;\n\tprivate _fogB:number;\n\n\t/**\n\t * Creates a new EffectFogMethod object.\n\t * @param minDistance The distance from which the fog starts appearing.\n\t * @param maxDistance The distance at which the fog is densest.\n\t * @param fogColor The colour of the fog.\n\t */\n\tconstructor(minDistance:number, maxDistance:number, fogColor:number /*uint*/ = 0x808080)\n\t{\n\t\tsuper();\n\t\tthis.minDistance = minDistance;\n\t\tthis.maxDistance = maxDistance;\n\t\tthis.fogColor = fogColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index + 3] = 1;\n\t\tdata[index + 6] = 0;\n\t\tdata[index + 7] = 0;\n\t}\n\n\t/**\n\t * The distance from which the fog starts appearing.\n\t */\n\tpublic get minDistance():number\n\t{\n\t\treturn this._minDistance;\n\t}\n\n\tpublic set minDistance(value:number)\n\t{\n\t\tthis._minDistance = value;\n\t}\n\n\t/**\n\t * The distance at which the fog is densest.\n\t */\n\tpublic get maxDistance():number\n\t{\n\t\treturn this._maxDistance;\n\t}\n\n\tpublic set maxDistance(value:number)\n\t{\n\t\tthis._maxDistance = value;\n\t}\n\n\t/**\n\t * The colour of the fog.\n\t */\n\tpublic get fogColor():number /*uint*/\n\t{\n\t\treturn this._fogColor;\n\t}\n\n\tpublic set fogColor(value:number/*uint*/)\n\t{\n\t\tthis._fogColor = value;\n\t\tthis._fogR = ((value >> 16) & 0xff)/0xff;\n\t\tthis._fogG = ((value >> 8) & 0xff)/0xff;\n\t\tthis._fogB = (value & 0xff)/0xff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = this._fogR;\n\t\tdata[index + 1] = this._fogG;\n\t\tdata[index + 2] = this._fogB;\n\t\tdata[index + 4] = this._minDistance;\n\t\tdata[index + 5] = 1/(this._maxDistance - this._minDistance);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar fogColor:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar fogData:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\t\tmethodVO.fragmentConstantsIndex = fogColor.index*4;\n\n\t\tcode += \"sub \" + temp2 + \".w, \" + sharedRegisters.projectionFragment + \".z, \" + fogData + \".x\\n\" +\n\t\t\t\t\"mul \" + temp2 + \".w, \" + temp2 + \".w, \" + fogData + \".y\\n\" +\n\t\t\t\t\"sat \" + temp2 + \".w, \" + temp2 + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \", \" + fogColor + \", \" + targetReg + \"\\n\" + // (fogColor- col)\n\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + temp2 + \".w\\n\" + // (fogColor- col)*fogRatio\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\"; // fogRatio*(fogColor- col) + col\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectFogMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectFresnelEnvMapMethod provides a method to add fresnel-based reflectivity to an object using cube maps, which gets\n * stronger as the viewing angle becomes more grazing.\n */\nclass EffectFresnelEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:TextureBase;\n\tprivate _fresnelPower:number = 5;\n\tprivate _normalReflectance:number = 0;\n\tprivate _alpha:number;\n\tprivate _mask:TextureBase;\n\n\t/**\n\t * Creates a new <code>EffectFresnelEnvMapMethod</code> object.\n\t *\n\t * @param envMap The environment map containing the reflected scene.\n\t * @param alpha The reflectivity of the material.\n\t */\n\tconstructor(envMap:TextureBase, alpha:number = 1)\n\t{\n\t\tsuper();\n\n\t\tthis._envMap = envMap;\n\t\tthis._alpha = alpha;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._envMap);\n\n\t\tif (this._mask != null) {\n\t\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(this._mask);\n\t\t\tshaderObject.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 3] = 1;\n\t}\n\n\t/**\n\t * An optional texture to modulate the reflectivity of the surface.\n\t */\n\tpublic get mask():TextureBase\n\t{\n\t\treturn this._mask;\n\t}\n\n\tpublic set mask(value:TextureBase)\n\t{\n\t\tif (this._mask == value)\n\t\t\treturn;\n\t\t\n\t\tthis._mask = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.\n\t */\n\tpublic get fresnelPower():number\n\t{\n\t\treturn this._fresnelPower;\n\t}\n\n\tpublic set fresnelPower(value:number)\n\t{\n\t\tthis._fresnelPower = value;\n\t}\n\n\t/**\n\t * The cubic environment map containing the reflected scene.\n\t */\n\tpublic get envMap():TextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:TextureBase)\n\t{\n\t\tthis._envMap = value;\n\t}\n\n\t/**\n\t * The reflectivity of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.\n\t */\n\tpublic get normalReflectance():number\n\t{\n\t\treturn this._normalReflectance;\n\t}\n\n\tpublic set normalReflectance(value:number)\n\t{\n\t\tthis._normalReflectance = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = this._alpha;\n\t\tdata[index + 1] = this._normalReflectance;\n\t\tdata[index + 2] = this._fresnelPower;\n\n\t\tmethodVO.textureObject.activate(shaderObject);\n\n\t\tif (this._mask)\n\t\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t// r = V - 2(V.N)*N\n\t\tcode += \"dp3 \" + temp + \".w, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"add \" + temp + \".w, \" + temp + \".w, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + normalReg + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".xyz, \" + temp + \".xyz, \" + viewDirReg + \".xyz\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, temp) +\n\t\t\t\t\"sub \" + temp2 + \".w, \" + temp + \".w, fc0.x\\n\" +               \t// -.5\n\t\t\t\t\"kil \" + temp2 + \".w\\n\" +\t// used for real time reflection mapping - if alpha is not 1 (mock texture) kil output\n\t\t\t\t\"sub \" + temp + \", \" + temp + \", \" + targetReg + \"\\n\";\n\n\t\t// calculate fresnel term\n\t\tcode += \"dp3 \" + viewDirReg + \".w, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +  // dot(V, H)\n\t\t\t\t\"sub \" + viewDirReg + \".w, \" + dataRegister + \".w, \" + viewDirReg + \".w\\n\" +       // base = 1-dot(V, H)\n\t\t\t\t\"pow \" + viewDirReg + \".w, \" + viewDirReg + \".w, \" + dataRegister + \".z\\n\" +       // exp = pow(base, 5)\n\t\t\t\t\"sub \" + normalReg + \".w, \" + dataRegister + \".w, \" + viewDirReg + \".w\\n\" +        // 1 - exp\n\t\t\t\t\"mul \" + normalReg + \".w, \" + dataRegister + \".y, \" + normalReg + \".w\\n\" +         // f0*(1 - exp)\n\t\t\t\t\"add \" + viewDirReg + \".w, \" + viewDirReg + \".w, \" + normalReg + \".w\\n\" +          // exp + f0*(1 - exp)\n\n\t\t\t\t// total alpha\n\t\t\t\t\"mul \" + viewDirReg + \".w, \" + dataRegister + \".x, \" + viewDirReg + \".w\\n\";\n\n\t\tif (this._mask) {\n\t\t\tmethodVO.secondaryTextureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, temp2, registerCache, sharedRegisters.uvVarying) +\n\t\t\t\t\"mul \" + viewDirReg + \".w, \" + temp2 + \".x, \" + viewDirReg + \".w\\n\";\n\t\t}\n\n\t\t// blend\n\t\tcode += \"mul \" + temp + \", \" + temp + \", \" + viewDirReg + \".w\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(temp2);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectFresnelEnvMapMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectLightMapMethod provides a method that allows applying a light map texture to the calculated pixel colour.\n * It is different from DiffuseLightMapMethod in that the latter only modulates the diffuse shading value rather\n * than the whole pixel colour.\n */\nclass EffectLightMapMethod extends EffectMethodBase\n{\n\t/**\n\t * Indicates the light map should be multiplied with the calculated shading result.\n\t */\n\tpublic static MULTIPLY:string = \"multiply\";\n\n\t/**\n\t * Indicates the light map should be added into the calculated shading result.\n\t */\n\tpublic static ADD:string = \"add\";\n\n\tprivate _lightMap:TextureBase;\n\n\tprivate _blendMode:string;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new EffectLightMapMethod object.\n\t *\n\t * @param lightMap The texture containing the light map.\n\t * @param blendMode The blend mode with which the light map should be applied to the lighting result.\n\t * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tconstructor(lightMap:TextureBase, blendMode:string = \"multiply\", useSecondaryUV:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tif (blendMode != EffectLightMapMethod.ADD && blendMode != EffectLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tthis._lightMap = lightMap;\n\t\tthis._blendMode = blendMode;\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._lightMap);\n\n\t\tif (this._useSecondaryUV)\n\t\t\tshaderObject.secondaryUVDependencies++;\n\t\telse\n\t\t\tshaderObject.uvDependencies++;\n\t}\n\n\t/**\n\t * The blend mode with which the light map should be applied to the lighting result.\n\t *\n\t * @see EffectLightMapMethod.ADD\n\t * @see EffectLightMapMethod.MULTIPLY\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tif (value != EffectLightMapMethod.ADD && value != EffectLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The lightMap containing the light map.\n\t */\n\tpublic get lightMap():TextureBase\n\t{\n\t\treturn this._lightMap;\n\t}\n\n\tpublic set lightMap(value:TextureBase)\n\t{\n\t\tif (this._lightMap == value)\n\t\t\treturn;\n\n\t\tthis._lightMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\n\t\tthis._useSecondaryUV = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode = methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, temp, registerCache, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying);\n\n\t\tswitch (this._blendMode) {\n\t\t\tcase EffectLightMapMethod.MULTIPLY:\n\t\t\t\tcode += \"mul \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase EffectLightMapMethod.ADD:\n\t\t\t\tcode += \"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tmethodVO.textureObject.activate(shaderObject);\n\t}\n}\n\nexport = EffectLightMapMethod;",
    "import IAsset\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport AbstractMethodError\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * EffectMethodBase forms an abstract base class for shader methods that are not dependent on light sources,\n * and are in essence post-process effects on the materials.\n */\nclass EffectMethodBase extends ShadingMethodBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset EffectMethod]\";\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn EffectMethodBase.assetType;\n\t}\n\n\t/**\n\t * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register that will be containing the method's output.\n\t * @private\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n}\n\nexport = EffectMethodBase;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectRefractionEnvMapMethod provides a method to add refracted transparency based on cube maps.\n */\nclass EffectRefractionEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:TextureBase;\n\n\tprivate _dispersionR:number = 0;\n\tprivate _dispersionG:number = 0;\n\tprivate _dispersionB:number = 0;\n\tprivate _useDispersion:boolean;\n\tprivate _refractionIndex:number;\n\tprivate _alpha:number = 1;\n\n\t/**\n\t * Creates a new EffectRefractionEnvMapMethod object. Example values for dispersion are: dispersionR: -0.03, dispersionG: -0.01, dispersionB: = .0015\n\t *\n\t * @param envMap The environment map containing the refracted scene.\n\t * @param refractionIndex The refractive index of the material.\n\t * @param dispersionR The amount of chromatic dispersion of the red channel. Defaults to 0 (none).\n\t * @param dispersionG The amount of chromatic dispersion of the green channel. Defaults to 0 (none).\n\t * @param dispersionB The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).\n\t */\n\tconstructor(envMap:TextureBase, refractionIndex:number = .1, dispersionR:number = 0, dispersionG:number = 0, dispersionB:number = 0)\n\t{\n\t\tsuper();\n\t\tthis._envMap = envMap;\n\t\tthis._dispersionR = dispersionR;\n\t\tthis._dispersionG = dispersionG;\n\t\tthis._dispersionB = dispersionB;\n\t\tthis._useDispersion = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tthis._refractionIndex = refractionIndex;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index + 4] = 1;\n\t\tdata[index + 5] = 0;\n\t\tdata[index + 7] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._envMap);\n\t}\n\n\t/**\n\t * The cube environment map to use for the refraction.\n\t */\n\tpublic get envMap():TextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:TextureBase)\n\t{\n\t\tthis._envMap = value;\n\t}\n\n\t/**\n\t * The refractive index of the material.\n\t */\n\tpublic get refractionIndex():number\n\t{\n\t\treturn this._refractionIndex;\n\t}\n\n\tpublic set refractionIndex(value:number)\n\t{\n\t\tthis._refractionIndex = value;\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the red channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionR():number\n\t{\n\t\treturn this._dispersionR;\n\t}\n\n\tpublic set dispersionR(value:number)\n\t{\n\t\tthis._dispersionR = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the green channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionG():number\n\t{\n\t\treturn this._dispersionG;\n\t}\n\n\tpublic set dispersionG(value:number)\n\t{\n\t\tthis._dispersionG = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionB():number\n\t{\n\t\treturn this._dispersionB;\n\t}\n\n\tpublic set dispersionB(value:number)\n\t{\n\t\tthis._dispersionB = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of transparency of the object. Warning: the alpha applies to the refracted color, not the actual\n\t * material. A value of 1 will make it appear fully transparent.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\n\t\tdata[index] = this._dispersionR + this._refractionIndex;\n\n\t\tif (this._useDispersion) {\n\t\t\tdata[index + 1] = this._dispersionG + this._refractionIndex;\n\t\t\tdata[index + 2] = this._dispersionB + this._refractionIndex;\n\t\t}\n\t\tdata[index + 3] = this._alpha;\n\n\t\tmethodVO.textureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// todo: data2.x could use common reg, so only 1 reg is used\n\t\tvar data:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar data2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\t\tvar refractionDir:ShaderRegisterElement;\n\t\tvar refractionColor:ShaderRegisterElement;\n\t\tvar temp:ShaderRegisterElement;\n\n\t\tmethodVO.fragmentConstantsIndex = data.index*4;\n\n\t\trefractionDir = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(refractionDir, 1);\n\t\trefractionColor = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(refractionColor, 1);\n\t\ttemp = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\tcode += \"neg \" + viewDirReg + \".xyz, \" + viewDirReg + \".xyz\\n\";\n\n\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + data + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + data + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\"mul \" + temp + \".x, \" + data + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\"mul \" + refractionDir + \", \" + data + \".x, \" + viewDirReg + \"\\n\" +\n\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\" +\n\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, refractionColor, registerCache, refractionDir) +\n\t\t\t\"sub \" + refractionColor + \".w, \" + refractionColor + \".w, fc0.x\t\\n\" +\n\t\t\t\"kil \" + refractionColor + \".w\\n\";\n\n\t\tif (this._useDispersion) {\n\t\t\t// GREEN\n\t\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".y, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".y, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\t\"mul \" + temp + \".x, \" + data + \".y, \" + temp + \".x\\n\" +\n\t\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\t\"mul \" + refractionDir + \", \" + data + \".y, \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, refractionDir) +\n\t\t\t\t\"mov \" + refractionColor + \".y, \" + temp + \".y\\n\";\n\n\t\t\t// BLUE\n\t\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".z, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".z, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\t\"mul \" + temp + \".x, \" + data + \".z, \" + temp + \".x\\n\" +\n\t\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\t\"mul \" + refractionDir + \", \" + data + \".z, \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, refractionDir) +\n\t\t\t\t\"mov \" + refractionColor + \".z, \" + temp + \".z\\n\";\n\t\t}\n\n\t\tcode += \"sub \" + refractionColor + \".xyz, \" + refractionColor + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\"mul \" + refractionColor + \".xyz, \" + refractionColor + \".xyz, \" + data + \".w\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + refractionColor + \".xyz\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(refractionDir);\n\t\tregisterCache.removeFragmentTempUsage(refractionColor);\n\n\t\t// restore\n\t\tcode += \"neg \" + viewDirReg + \".xyz, \" + viewDirReg + \".xyz\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectRefractionEnvMapMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectRimLightMethod provides a method to add rim lighting to a material. This adds a glow-like effect to edges of objects.\n */\nclass EffectRimLightMethod extends EffectMethodBase\n{\n\tpublic static ADD:string = \"add\";\n\tpublic static MULTIPLY:string = \"multiply\";\n\tpublic static MIX:string = \"mix\";\n\n\tprivate _color:number /*uint*/;\n\tprivate _blendMode:string;\n\tprivate _colorR:number;\n\tprivate _colorG:number;\n\tprivate _colorB:number;\n\tprivate _strength:number;\n\tprivate _power:number;\n\n\t/**\n\t * Creates a new <code>EffectRimLightMethod</code> object.\n\t *\n\t * @param color The colour of the rim light.\n\t * @param strength The strength of the rim light.\n\t * @param power The power of the rim light. Higher values will result in a higher edge fall-off.\n\t * @param blend The blend mode with which to add the light to the object.\n\t */\n\tconstructor(color:number /*uint*/ = 0xffffff, strength:number = .4, power:number = 2, blend:string = \"mix\")\n\t{\n\t\tsuper();\n\n\t\tthis._blendMode = blend;\n\t\tthis._strength = strength;\n\t\tthis._power = power;\n\n\t\tthis.color = color;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\n\t/**\n\t * The blend mode with which to add the light to the object.\n\t *\n\t * EffectRimLightMethod.MULTIPLY multiplies the rim light with the material's colour.\n\t * EffectRimLightMethod.ADD adds the rim light with the material's colour.\n\t * EffectRimLightMethod.MIX provides normal alpha blending.\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The color of the rim light.\n\t */\n\tpublic get color():number /*uint*/\n\t{\n\t\treturn this._color;\n\t}\n\n\tpublic set color(value:number /*uint*/)\n\t{\n\t\tthis._color = value;\n\t\tthis._colorR = ((value >> 16) & 0xff)/0xff;\n\t\tthis._colorG = ((value >> 8) & 0xff)/0xff;\n\t\tthis._colorB = (value & 0xff)/0xff;\n\t}\n\n\t/**\n\t * The strength of the rim light.\n\t */\n\tpublic get strength():number\n\t{\n\t\treturn this._strength;\n\t}\n\n\tpublic set strength(value:number)\n\t{\n\t\tthis._strength = value;\n\t}\n\n\t/**\n\t * The power of the rim light. Higher values will result in a higher edge fall-off.\n\t */\n\tpublic get power():number\n\t{\n\t\treturn this._power;\n\t}\n\n\tpublic set power(value:number)\n\t{\n\t\tthis._power = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._colorR;\n\t\tdata[index + 1] = this._colorG;\n\t\tdata[index + 2] = this._colorB;\n\t\tdata[index + 4] = this._strength;\n\t\tdata[index + 5] = this._power;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataRegister2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tcode += \"dp3 \" + temp + \".x, \" + sharedRegisters.viewDirFragment + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"sat \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".x, \" + dataRegister + \".w, \" + temp + \".x\\n\" +\n\t\t\t\"pow \" + temp + \".x, \" + temp + \".x, \" + dataRegister2 + \".y\\n\" +\n\t\t\t\"mul \" + temp + \".x, \" + temp + \".x, \" + dataRegister2 + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".x, \" + dataRegister + \".w, \" + temp + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + dataRegister + \".w, \" + temp + \".x\\n\";\n\n\t\tif (this._blendMode == EffectRimLightMethod.ADD) {\n\t\t\tcode += \"mul \" + temp + \".xyz, \" + temp + \".w, \" + dataRegister + \".xyz\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t} else if (this._blendMode == EffectRimLightMethod.MULTIPLY) {\n\t\t\tcode += \"mul \" + temp + \".xyz, \" + temp + \".w, \" + dataRegister + \".xyz\\n\" +\n\t\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t} else {\n\t\t\tcode += \"sub \" + temp + \".xyz, \" + dataRegister + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectRimLightMethod;",
    "import ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * LightingMethodBase provides an abstract base method for shading methods that uses lights.\n * Used for diffuse and specular shaders only.\n */\nclass LightingMethodBase extends ShadingMethodBase\n{\n\t/**\n\t * A method that is exposed to wrappers in case the strength needs to be controlled\n\t */\n\tpublic _iModulateMethod:(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string;\n\n\t/**\n\t * Creates a new LightingMethodBase.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * Get the fragment shader code that will be needed before any per-light code is added.\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @private\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that will generate the code relevant to a single light.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param lightDirReg The register containing the light direction vector.\n\t * @param lightColReg The register containing the light colour.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that will generate the code relevant to a single light probe object.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param cubeMapReg The register containing the cube map for the current probe\n\t * @param weightRegister A string representation of the register + component containing the current weight\n\t * @param regCache The register cache providing any necessary registers to the shader\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register containing the final shading output.\n\t * @private\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n}\n\nexport = LightingMethodBase;",
    "import TextureBase\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * NormalBasicMethod is the default method for standard tangent-space normal mapping.\n */\nclass NormalBasicMethod extends ShadingMethodBase\n{\n\tprivate _normalMap:TextureBase;\n\n\t/**\n\t * Creates a new NormalBasicMethod object.\n\t */\n\tconstructor(normalMap:TextureBase = null)\n\t{\n\t\tsuper();\n\n\t\tthis._normalMap = normalMap;\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\tif (this._normalMap && shaderObject.normalDependencies)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tif (this._normalMap) {\n\t\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._normalMap);\n\t\t\tshaderObject.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not this method outputs normals in tangent space. Override for object-space normals.\n\t */\n\tpublic iOutputsTangentNormals():boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar s:any = method;\n\t\tvar bnm:NormalBasicMethod = <NormalBasicMethod> method;\n\n\t\tif (bnm.normalMap != null)\n\t\t\tthis.normalMap = bnm.normalMap;\n\t}\n\n\t/**\n\t * The texture containing the normals per pixel.\n\t */\n\tpublic get normalMap():TextureBase\n\t{\n\t\treturn this._normalMap;\n\t}\n\n\tpublic set normalMap(value:TextureBase)\n\t{\n\t\tif (this._normalMap == value)\n\t\t\treturn;\n\n\t\tthis._normalMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._normalMap)\n\t\t\tthis._normalMap = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._normalMap)\n\t\t\tmethodVO.textureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._normalMap) {\n\t\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.textureObject._iGetFragmentCode(shaderObject, targetReg, registerCache, sharedRegisters.uvVarying);\n\t\t}\n\n\t\tcode += \"sub \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + sharedRegisters.commons + \".xxx\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \"\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = NormalBasicMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * NormalHeightMapMethod provides a normal map method that uses a height map to calculate the normals.\n */\nclass NormalHeightMapMethod extends NormalBasicMethod\n{\n\tprivate _worldXYRatio:number;\n\tprivate _worldXZRatio:number;\n\n\t/**\n\t * Creates a new NormalHeightMapMethod method.\n\t *\n\t * @param heightMap The texture containing the height data. 0 means low, 1 means high.\n\t * @param worldWidth The width of the 'world'. This is used to map uv coordinates' u component to scene dimensions.\n\t * @param worldHeight The height of the 'world'. This is used to map the height map values to scene dimensions.\n\t * @param worldDepth The depth of the 'world'. This is used to map uv coordinates' v component to scene dimensions.\n\t */\n\tconstructor(heightMap:TextureBase, worldWidth:number, worldHeight:number, worldDepth:number)\n\t{\n\t\tsuper();\n\n\t\tthis.normalMap = heightMap;\n\t\tthis._worldXYRatio = worldWidth/worldHeight;\n\t\tthis._worldXZRatio = worldDepth/worldHeight;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = 1/this.normalMap.width;\n\t\tdata[index + 1] = 1/this.normalMap.height;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t\tdata[index + 4] = this._worldXYRatio;\n\t\tdata[index + 5] = this._worldXZRatio;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get tangentSpace():boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tsuper.copyFrom(method);\n\n\t\tthis._worldXYRatio = (<NormalHeightMapMethod> method)._worldXYRatio;\n\t\tthis._worldXZRatio = (<NormalHeightMapMethod> method)._worldXZRatio;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode+= methodVO.textureObject._iGetFragmentCode(shaderObject, targetReg, registerCache, sharedRegisters.uvVarying) +\n\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg + \".xzzz\\n\" +\n\n\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, temp) +\n\n\t\t\t\"sub \" + targetReg + \".x, \" + targetReg + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg + \".zyzz\\n\" +\n\n\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, temp) +\n\n\t\t\t\"sub \" + targetReg + \".z, \" + targetReg + \".z, \" + temp + \".x\\n\" +\n\t\t\t\"mov \" + targetReg + \".y, \" + dataReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".xz, \" + targetReg + \".xz, \" + dataReg2 + \".xy\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \".xyz\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = NormalHeightMapMethod;",
    "import TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\n\n/**\n * NormalSimpleWaterMethod provides a basic normal map method to create water ripples by translating two wave normal maps.\n */\nclass NormalSimpleWaterMethod extends NormalBasicMethod\n{\n\tprivate _secondaryNormalMap:TextureBase;\n\tprivate _water1OffsetX:number = 0;\n\tprivate _water1OffsetY:number = 0;\n\tprivate _water2OffsetX:number = 0;\n\tprivate _water2OffsetY:number = 0;\n\n\t/**\n\t * Creates a new NormalSimpleWaterMethod object.\n\t * @param waveMap1 A normal map containing one layer of a wave structure.\n\t * @param waveMap2 A normal map containing a second layer of a wave structure.\n\t */\n\tconstructor(normalMap:TextureBase = null, secondaryNormalMap:TextureBase = null)\n\t{\n\t\tsuper(normalMap);\n\n\t\tthis._secondaryNormalMap = secondaryNormalMap;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = .5;\n\t\tdata[index + 1] = 0;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shaderObject, methodVO);\n\t\t\n\t\tif (this._secondaryNormalMap) {\n\t\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(this._secondaryNormalMap);\n\t\t\tshaderObject.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * The translation of the first wave layer along the X-axis.\n\t */\n\tpublic get water1OffsetX():number\n\t{\n\t\treturn this._water1OffsetX;\n\t}\n\n\tpublic set water1OffsetX(value:number)\n\t{\n\t\tthis._water1OffsetX = value;\n\t}\n\n\t/**\n\t * The translation of the first wave layer along the Y-axis.\n\t */\n\tpublic get water1OffsetY():number\n\t{\n\t\treturn this._water1OffsetY;\n\t}\n\n\tpublic set water1OffsetY(value:number)\n\t{\n\t\tthis._water1OffsetY = value;\n\t}\n\n\t/**\n\t * The translation of the second wave layer along the X-axis.\n\t */\n\tpublic get water2OffsetX():number\n\t{\n\t\treturn this._water2OffsetX;\n\t}\n\n\tpublic set water2OffsetX(value:number)\n\t{\n\t\tthis._water2OffsetX = value;\n\t}\n\n\t/**\n\t * The translation of the second wave layer along the Y-axis.\n\t */\n\tpublic get water2OffsetY():number\n\t{\n\t\treturn this._water2OffsetY;\n\t}\n\n\tpublic set water2OffsetY(value:number)\n\t{\n\t\tthis._water2OffsetY = value;\n\t}\n\n\t/**\n\t * A second normal map that will be combined with the first to create a wave-like animation pattern.\n\t */\n\tpublic get secondaryNormalMap():TextureBase\n\t{\n\t\treturn this._secondaryNormalMap;\n\t}\n\n\tpublic set secondaryNormalMap(value:TextureBase)\n\t{\n\t\tif (this._secondaryNormalMap == value)\n\t\t\treturn;\n\n\t\tthis._secondaryNormalMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\tthis._secondaryNormalMap = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\n\t\tdata[index + 4] = this._water1OffsetX;\n\t\tdata[index + 5] = this._water1OffsetY;\n\t\tdata[index + 6] = this._water2OffsetX;\n\t\tdata[index + 7] = this._water2OffsetY;\n\n\t\tif (this._secondaryNormalMap)\n\t\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode += \"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg2 + \".xyxy\\n\";\n\n\t\tif (this.normalMap) {\n\t\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.textureObject._iGetFragmentCode(shaderObject, targetReg, registerCache, temp);\n\t\t}\n\n\t\tcode += \"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg2 + \".zwzw\\n\";\n\n\t\tif (this._secondaryNormalMap) {\n\t\t\tmethodVO.secondaryTextureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, temp, registerCache, temp);\n\t\t}\n\n\t\tcode +=\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\t\t\\n\" +\n\t\t\t\"mul \" + targetReg + \", \" + targetReg + \", \" + dataReg + \".x\t\\n\" +\n\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + sharedRegisters.commons + \".xxx\t\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \".xyz\t\t\t\t\t\t\t\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = NormalSimpleWaterMethod;",
    "import AssetBase\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetBase\");\n\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\n\n\n/**\n * ShadingMethodBase provides an abstract base method for shading methods, used by compiled passes to compile\n * the final shading program.\n */\nclass ShadingMethodBase extends AssetBase\n{\n\tpublic static assetType:string = \"[asset ShadingMethod]\";\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn ShadingMethodBase.assetType;\n\t}\n\n\t/**\n\t * Create a new ShadingMethodBase object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Initializes the properties for a MethodVO, including register and texture indices.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t *\n\t * @internal\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\n\t}\n\n\t/**\n\t * Initializes unchanging shader constants using the data from a MethodVO.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t *\n\t * @internal\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\n\n\t}\n\n\t/**\n\t * Indicates whether or not this method expects normals in tangent space. Override for object-space normals.\n\t */\n\tpublic iUsesTangentSpace():boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Cleans up any resources used by the current object.\n\t */\n\tpublic dispose()\n\t{\n\n\t}\n\n\t/**\n\t * Resets the compilation state of the method.\n\t *\n\t * @internal\n\t */\n\tpublic iReset()\n\t{\n\t\tthis.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Resets the method's state for compilation.\n\t *\n\t * @internal\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t}\n\n\t/**\n\t * Get the vertex shader code for this method.\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t *\n\t * @internal\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the render state for this method.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param stage The Stage object currently used for rendering.\n\t *\n\t * @internal\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\n\t}\n\n\t/**\n\t * Sets the render state for a single renderable.\n\t *\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param renderable The renderable currently being rendered.\n\t * @param stage The Stage object currently used for rendering.\n\t * @param camera The camera from which the scene is currently rendered.\n\t *\n\t * @internal\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\n\t}\n\n\t/**\n\t * Clears the render state for this method.\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param stage The Stage object currently used for rendering.\n\t *\n\t * @internal\n\t */\n\tpublic iDeactivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\n\t}\n\n\t/**\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\n\t *\n\t * @internal\n\t */\n\tpublic iInvalidateShaderProgram()\n\t{\n\t\tthis.dispatchEvent(new ShadingMethodEvent(ShadingMethodEvent.SHADER_INVALIDATED));\n\t}\n\n\t/**\n\t * Copies the state from a ShadingMethodBase object into the current object.\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t}\n}\n\nexport = ShadingMethodBase;",
    "import Event\t\t\t\t\t\t\t= require(\"awayjs-core/lib/events/Event\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport CascadeShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CascadeShadowMapper\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowCascadeMethod is a shadow map method to apply cascade shadow mapping on materials.\n * Must be used with a DirectionalLight with a CascadeShadowMapper assigned to its shadowMapper property.\n *\n * @see away.lights.CascadeShadowMapper\n */\nclass ShadowCascadeMethod extends ShadowMapMethodBase\n{\n\tprivate _baseMethod:ShadowMethodBase;\n\tprivate _cascadeShadowMapper:CascadeShadowMapper;\n\tprivate _depthMapCoordVaryings:Array<ShaderRegisterElement>;\n\tprivate _cascadeProjections:Array<ShaderRegisterElement>;\n\n\t/**\n\t * Creates a new ShadowCascadeMethod object.\n\t *\n\t * @param shadowMethodBase The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)\n\t */\n\tconstructor(shadowMethodBase:ShadowMethodBase)\n\t{\n\t\tsuper(shadowMethodBase.castingLight);\n\n\t\tthis._baseMethod = shadowMethodBase;\n\t\tif (!(this._pCastingLight instanceof DirectionalLight))\n\t\t\tthrow new Error(\"ShadowCascadeMethod is only compatible with DirectionalLight\");\n\n\t\tthis._cascadeShadowMapper = <CascadeShadowMapper> this._pCastingLight.shadowMapper;\n\n\t\tif (!this._cascadeShadowMapper)\n\t\t\tthrow new Error(\"ShadowCascadeMethod requires a light that has a CascadeShadowMapper instance assigned to shadowMapper.\");\n\n\t\tthis._cascadeShadowMapper.addEventListener(Event.CHANGE, (event:Event) => this.onCascadeChange(event));\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\t}\n\n\t/**\n\t * The shadow map sampling method used to sample individual cascades. These are typically those used in conjunction\n\t * with a DirectionalShadowMapper.\n\t *\n\t * @see ShadowHardMethod\n\t * @see ShadowSoftMethod\n\t */\n\tpublic get baseMethod():ShadowMethodBase\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:ShadowMethodBase)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tvar tempVO:MethodVO = new MethodVO(this._baseMethod);\n\t\tthis._baseMethod.iInitVO(shaderObject, tempVO);\n\n\t\tmethodVO.needsGlobalVertexPos = true;\n\t\tmethodVO.needsProjection = true;\n\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._pCastingLight.shadowMapper.depthMap);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar vertexData:Array<number> = shaderObject.vertexConstantData;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index] = 1.0;\n\t\tfragmentData[index + 1] = 1/255.0;\n\t\tfragmentData[index + 2] = 1/65025.0;\n\t\tfragmentData[index + 3] = 1/16581375.0;\n\n\t\tfragmentData[index + 6] = .5;\n\t\tfragmentData[index + 7] = -.5;\n\n\t\tindex = methodVO.vertexConstantsIndex;\n\t\tvertexData[index] = .5;\n\t\tvertexData[index + 1] = -.5;\n\t\tvertexData[index + 2] = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._cascadeProjections = null;\n\t\tthis._depthMapCoordVaryings = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\n\t\tthis.initProjectionsRegs(registerCache);\n\t\tmethodVO.vertexConstantsIndex = dataReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\tfor (var i:number = 0; i < this._cascadeShadowMapper.numCascades; ++i) {\n\t\t\tcode += \"m44 \" + temp + \", \" + sharedRegisters.globalPositionVertex + \", \" + this._cascadeProjections[i] + \"\\n\" +\n\t\t\t\t\"add \" + this._depthMapCoordVaryings[i] + \", \" + temp + \", \" + dataReg + \".zzwz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Creates the registers for the cascades' projection coordinates.\n\t */\n\tprivate initProjectionsRegs(registerCache:ShaderRegisterCache)\n\t{\n\t\tthis._cascadeProjections = new Array<ShaderRegisterElement>(this._cascadeShadowMapper.numCascades);\n\t\tthis._depthMapCoordVaryings = new Array<ShaderRegisterElement>(this._cascadeShadowMapper.numCascades);\n\n\t\tfor (var i:number = 0; i < this._cascadeShadowMapper.numCascades; ++i) {\n\t\t\tthis._depthMapCoordVaryings[i] = registerCache.getFreeVarying();\n\t\t\tthis._cascadeProjections[i] = registerCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar numCascades:number = this._cascadeShadowMapper.numCascades;\n\t\tvar decReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar planeDistanceReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar planeDistances:Array<string> = Array<string>( planeDistanceReg + \".x\", planeDistanceReg + \".y\", planeDistanceReg + \".z\", planeDistanceReg + \".w\" );\n\t\tvar code:string;\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tvar inQuad:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(inQuad, 1);\n\t\tvar uvCoord:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(uvCoord, 1);\n\n\t\t// assume lowest partition is selected, will be overwritten later otherwise\n\t\tcode = \"mov \" + uvCoord + \", \" + this._depthMapCoordVaryings[numCascades - 1] + \"\\n\";\n\n\t\tfor (var i:number = numCascades - 2; i >= 0; --i) {\n\t\t\tvar uvProjection:ShaderRegisterElement = this._depthMapCoordVaryings[i];\n\n\t\t\t// calculate if in texturemap (result == 0 or 1, only 1 for a single partition)\n\t\t\tcode += \"slt \" + inQuad + \".z, \" + sharedRegisters.projectionFragment + \".z, \" + planeDistances[i] + \"\\n\"; // z = x > minX, w = y > minY\n\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t\t// linearly interpolate between old and new uv coords using predicate value == conditional toggle to new value if predicate == 1 (true)\n\t\t\tcode += \"sub \" + temp + \", \" + uvProjection + \", \" + uvCoord + \"\\n\" +\n\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + inQuad + \".z\\n\" +\n\t\t\t\t\"add \" + uvCoord + \", \" + uvCoord + \", \" + temp + \"\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(inQuad);\n\n\t\tcode += \"div \" + uvCoord + \", \" + uvCoord + \", \" + uvCoord + \".w\\n\" +\n\t\t\t\"mul \" + uvCoord + \".xy, \" + uvCoord + \".xy, \" + dataReg + \".zw\\n\" +\n\t\t\t\"add \" + uvCoord + \".xy, \" + uvCoord + \".xy, \" + dataReg + \".zz\\n\";\n\n\t\tcode += this._baseMethod._iGetCascadeFragmentCode(shaderObject, methodVO, decReg, uvCoord, targetReg, registerCache, sharedRegisters) +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + dataReg + \".y\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(uvCoord);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tmethodVO.textureObject.activate(shaderObject);\n\n\t\tvar vertexData:Array<number> = shaderObject.vertexConstantData;\n\t\tvar vertexIndex:number = methodVO.vertexConstantsIndex;\n\n\t\tshaderObject.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1/(this._cascadeShadowMapper.depth*this._pEpsilon);\n\n\t\tvar numCascades:number = this._cascadeShadowMapper.numCascades;\n\t\tvertexIndex += 4;\n\t\tfor (var k:number = 0; k < numCascades; ++k) {\n\t\t\tthis._cascadeShadowMapper.getDepthProjections(k).copyRawDataTo(vertexData, vertexIndex, true);\n\t\t\tvertexIndex += 16;\n\t\t}\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar fragmentIndex:number = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[fragmentIndex + 5] = 1 - this._pAlpha;\n\n\t\tvar nearPlaneDistances:Array<number> = this._cascadeShadowMapper._iNearPlaneDistances;\n\n\t\tfragmentIndex += 8;\n\t\tfor (var i:number = 0; i < numCascades; ++i)\n\t\t\tfragmentData[fragmentIndex + i] = nearPlaneDistances[i];\n\n\t\tthis._baseMethod.iActivateForCascade(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t}\n\n\t/**\n\t * Called when the shadow mappers cascade configuration changes.\n\t */\n\tprivate onCascadeChange(event:Event)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = ShadowCascadeMethod;",
    "import BitmapImage2D\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapImage2D\");\n\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowDitheredMethod provides a soft shadowing technique by randomly distributing sample points differently for each fragment.\n */\nclass ShadowDitheredMethod extends ShadowMethodBase\n{\n\tprivate static _grainTexture:Single2DTexture;\n\tprivate static _grainUsages:number /*int*/;\n\tprivate static _grainBitmapImage2D:BitmapImage2D;\n\tprivate _depthMapSize:number /*int*/;\n\tprivate _range:number;\n\tprivate _numSamples:number /*int*/;\n\n\t/**\n\t * Creates a new ShadowDitheredMethod object.\n\t * @param castingLight The light casting the shadows\n\t * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 24.\n\t */\n\tconstructor(castingLight:DirectionalLight, numSamples:number /*int*/ = 4, range:number = 1)\n\t{\n\t\tsuper(castingLight);\n\n\t\tthis._depthMapSize = this._pCastingLight.shadowMapper.depthMapSize;\n\n\t\tthis.numSamples = numSamples;\n\t\tthis.range = range;\n\n\t\t++ShadowDitheredMethod._grainUsages;\n\n\t\tif (!ShadowDitheredMethod._grainTexture)\n\t\t\tthis.initGrainTexture();\n\t}\n\n\t/**\n\t * The amount of samples to take for dithering. Minimum 1, maximum 24. The actual maximum may depend on the\n\t * complexity of the shader.\n\t */\n\tpublic get numSamples():number /*int*/\n\t{\n\t\treturn this._numSamples;\n\t}\n\n\tpublic set numSamples(value:number /*int*/)\n\t{\n\t\tif (value < 1)\n\t\t\tvalue = 1;\n\t\telse if (value > 24)\n\t\t\tvalue = 24;\n\n\t\tif (this._numSamples == value)\n\t\t\treturn;\n\n\t\tthis._numSamples = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shaderObject, methodVO);\n\n\t\tmethodVO.needsProjection = true;\n\n\t\tmethodVO.secondaryTextureObject = shaderObject.getTextureObject(ShadowDitheredMethod._grainTexture);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index + 8] = 1/this._numSamples;\n\t}\n\n\t/**\n\t * The range in the shadow map in which to distribute the samples.\n\t */\n\tpublic get range():number\n\t{\n\t\treturn this._range*2;\n\t}\n\n\tpublic set range(value:number)\n\t{\n\t\tthis._range = value/2;\n\t}\n\n\t/**\n\t * Creates a texture containing the dithering noise texture.\n\t */\n\tprivate initGrainTexture()\n\t{\n\t\tShadowDitheredMethod._grainBitmapImage2D = new BitmapImage2D(64, 64, false);\n\t\tvar vec:Array<number> /*uint*/ = new Array<number>();\n\t\tvar len:number /*uint*/ = 4096;\n\t\tvar step:number = 1/(this._depthMapSize*this._range);\n\t\tvar r:number, g:number;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tr = 2*(Math.random() - .5);\n\t\t\tg = 2*(Math.random() - .5);\n\t\t\tif (r < 0)\n\t\t\t\tr -= step; else\n\t\t\t\tr += step;\n\t\t\tif (g < 0)\n\t\t\t\tg -= step; else\n\t\t\t\tg += step;\n\t\t\tif (r > 1)\n\t\t\t\tr = 1; else if (r < -1)\n\t\t\t\tr = -1;\n\t\t\tif (g > 1)\n\t\t\t\tg = 1; else if (g < -1)\n\t\t\t\tg = -1;\n\t\t\tvec[i] = (Math.floor((r*.5 + .5)*0xff) << 16) | (Math.floor((g*.5 + .5)*0xff) << 8);\n\t\t}\n\n\t\tShadowDitheredMethod._grainBitmapImage2D.setArray(ShadowDitheredMethod._grainBitmapImage2D.rect, vec);\n\t\tShadowDitheredMethod._grainTexture = new Single2DTexture(ShadowDitheredMethod._grainBitmapImage2D);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (--ShadowDitheredMethod._grainUsages == 0) {\n\t\t\tShadowDitheredMethod._grainTexture.dispose();\n\t\t\tShadowDitheredMethod._grainBitmapImage2D.dispose();\n\t\t\tShadowDitheredMethod._grainTexture = null;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index + 9] = (stage.width - 1)/63;\n\t\tdata[index + 10] = (stage.height - 1)/63;\n\t\tdata[index + 11] = 2*this._range/this._depthMapSize;\n\n\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\treturn this.getSampleCode(shaderObject, methodVO, customDataReg, decReg, targetReg, regCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Get the actual shader code for shadow mapping\n\t * @param regCache The register cache managing the registers.\n\t * @param depthMapRegister The texture register containing the depth map.\n\t * @param decReg The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the shadow coverage.\n\t */\n\tprivate getSampleCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, customDataReg:ShaderRegisterElement, decReg:ShaderRegisterElement, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar numSamples:number /*int*/ = this._numSamples;\n\t\tvar uvReg:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar projectionReg:ShaderRegisterElement = sharedRegisters.projectionFragment;\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, regCache);\n\t\tmethodVO.secondaryTextureObject._iInitRegisters(shaderObject, regCache);\n\n\t\tcode += \"div \" + uvReg + \", \" + projectionReg + \", \" + projectionReg + \".w\\n\" +\n\t\t\t\"mul \" + uvReg + \".xy, \" + uvReg + \".xy, \" + customDataReg + \".yz\\n\";\n\n\t\twhile (numSamples > 0) {\n\t\t\tif (numSamples == this._numSamples) {\n\t\t\t\tcode += methodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, uvReg, regCache, uvReg);\n\t\t\t} else {\n\t\t\t\tcode += \"mov \" + temp + \", \" + uvReg + \".zwxy \\n\" +\n\t\t\t\t\tmethodVO.secondaryTextureObject._iGetFragmentCode(shaderObject, uvReg, regCache, temp);\n\t\t\t}\n\n\t\t\t// keep grain in uvReg.zw\n\t\t\tcode += \"sub \" + uvReg + \".zw, \" + uvReg + \".xy, fc0.xx\\n\" + // uv-.5\n\t\t\t\t\"mul \" + uvReg + \".zw, \" + uvReg + \".zw, \" + customDataReg + \".w\\n\"; // (tex unpack scale and tex scale in one)\n\n\t\t\tif (numSamples == this._numSamples) {\n\t\t\t\t// first sample\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".zw, \" + this._pDepthMapCoordReg + \".xy\\n\" +\n\t\t\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, regCache, uvReg) +\n\t\t\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\t\t\"slt \" + targetReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\"; // 0 if in shadow\n\t\t\t} else {\n\t\t\t\tcode += this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\t\t\t}\n\n\t\t\tif (numSamples > 4)\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 1)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 5)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 2) {\n\t\t\t\tcode += \"neg \" + uvReg + \".w, \" + uvReg + \".w\\n\"; // will be rotated 90 degrees when being accessed as wz\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".wz, \" + this._pDepthMapCoordReg + \".xy\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\t\t\t}\n\n\t\t\tif (numSamples > 6)\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 3)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 7)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(shaderObject, methodVO, uvReg, decReg, targetReg, regCache);\n\n\t\t\tnumSamples -= 8;\n\t\t}\n\n\t\tregCache.removeFragmentTempUsage(temp);\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\t\tcode += \"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + customDataReg + \".x\\n\"; // average\n\t\treturn code;\n\t}\n\n\t/**\n\t * Adds the code for another tap to the shader code.\n\t * @param uvReg The uv register for the tap.\n\t * @param depthMapRegister The texture register containing the depth map.\n\t * @param decReg The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the tap comparison result.\n\t * @param regCache The register cache managing the registers.\n\t * @return\n\t */\n\tprivate addSample(shaderObject:ShaderObjectBase, methodVO:MethodVO, uvReg:ShaderRegisterElement, decReg:ShaderRegisterElement, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache):string\n\t{\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\treturn methodVO.textureObject._iGetFragmentCode(shaderObject, temp, regCache, uvReg) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + temp + \".z, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\" + // 0 if in shadow\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + temp + \".z\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index] = 1/this._numSamples;\n\t\tdata[index + 1] = (stage.width - 1)/63;\n\t\tdata[index + 2] = (stage.height - 1)/63;\n\t\tdata[index + 3] = 2*this._range/this._depthMapSize;\n\n\t\tmethodVO.secondaryTextureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pDepthMapCoordReg = depthProjection;\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn this.getSampleCode(shaderObject, methodVO, dataReg, decodeRegister, targetRegister, registerCache, sharedRegisters);\n\t}\n}\n\nexport = ShadowDitheredMethod;",
    "import DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowFilteredMethod provides a softened shadowing technique by bilinearly interpolating shadow comparison\n * results of neighbouring pixels.\n */\nclass ShadowFilteredMethod extends ShadowMethodBase\n{\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t *\n\t * @param castingLight The light casting the shadow\n\t */\n\tconstructor(castingLight:DirectionalLight)\n\t{\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index + 8] = .5;\n\t\tvar size:number /*int*/ = this.castingLight.shadowMapper.depthMapSize;\n\t\tfragmentData[index + 9] = size;\n\t\tfragmentData[index + 10] = 1/size;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tregCache.getFreeFragmentConstant();\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tvar depthCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(depthCol, 1);\n\t\tvar uvReg:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, regCache);\n\n\t\tcode += \"mov \" + uvReg + \", \" + this._pDepthMapCoordReg + \"\\n\" +\n\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, depthCol, regCache, this._pDepthMapCoordReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"add \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".z\\n\" + \t// (1, 0)\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, depthCol, regCache, uvReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".y\\n\" +\n\t\t\t\"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" +\n\t\t\t\"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + uvReg + \".z\\n\" +\n\t\t\t\"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + uvReg + \".z, \" + uvReg + \".w\\n\" +\n\n\t\t\t\"mov \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x\\n\" +\n\t\t\t\"add \" + uvReg + \".y, \" + this._pDepthMapCoordReg + \".y, \" + customDataReg + \".z\\n\" +\t// (0, 1)\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, depthCol, regCache, uvReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"add \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".z\\n\" +\t// (1, 1)\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, depthCol, regCache, uvReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t// recalculate fraction, since we ran out of registers :(\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".y\\n\" +\n\t\t\t\"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" + \"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + uvReg + \".z\\n\" +\n\t\t\t\"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" +\n\t\t\t\"add \" + uvReg + \".w, \" + uvReg + \".z, \" + uvReg + \".w\\n\" +\n\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".y, \" + customDataReg + \".y\\n\" +\n\t\t\t\"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" +\n\t\t\t\"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + targetReg + \".w\\n\" +\n\t\t\t\"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + uvReg + \".w\\n\";\n\n\t\tregCache.removeFragmentTempUsage(depthCol);\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar size:number /*int*/ = this.castingLight.shadowMapper.depthMapSize;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = size;\n\t\tdata[index + 1] = 1/size;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar predicate:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(predicate, 1);\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\tcode = methodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".x, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"add \" + depthProjection + \".x, \" + depthProjection + \".x, \" + dataReg + \".y\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".z, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"add \" + depthProjection + \".y, \" + depthProjection + \".y, \" + dataReg + \".y\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".w, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"sub \" + depthProjection + \".x, \" + depthProjection + \".x, \" + dataReg + \".y\\n\" +\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".y, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"mul \" + temp + \".xy, \" + depthProjection + \".xy, \" + dataReg + \".x\\n\" +\n\t\t\t\"frc \" + temp + \".xy, \" + temp + \".xy\\n\" +\n\n\t\t\t// some strange register juggling to prevent agal bugging out\n\t\t\t\"sub \" + depthProjection + \", \" + predicate + \".xyzw, \" + predicate + \".zwxy\\n\" +\n\t\t\t\"mul \" + depthProjection + \", \" + depthProjection + \", \" + temp + \".x\\n\" +\n\n\t\t\t\"add \" + predicate + \".xy, \" + predicate + \".xy, \" + depthProjection + \".zw\\n\" +\n\n\t\t\t\"sub \" + predicate + \".y, \" + predicate + \".y, \" + predicate + \".x\\n\" +\n\t\t\t\"mul \" + predicate + \".y, \" + predicate + \".y, \" + temp + \".y\\n\" +\n\t\t\t\"add \" + targetRegister + \".w, \" + predicate + \".x, \" + predicate + \".y\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(predicate);\n\t\treturn code;\n\t}\n}\n\nexport = ShadowFilteredMethod;",
    "import LightBase\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowHardMethod provides the cheapest shadow map method by using a single tap without any filtering.\n */\nclass ShadowHardMethod extends ShadowMethodBase\n{\n\t/**\n\t * Creates a new ShadowHardMethod object.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tregCache.getFreeFragmentConstant();\n\n\t\tvar depthCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, regCache);\n\n\t\tcode += methodVO.textureObject._iGetFragmentCode(shaderObject, depthCol, regCache, this._pDepthMapCoordReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + targetReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\"; // 0 if in shadow\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPointFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar epsReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar posReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar depthSampleCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(depthSampleCol, 1);\n\t\tvar lightDir:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(lightDir, 1);\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, regCache);\n\n\t\tcode += \"sub \" + lightDir + \", \" + sharedRegisters.globalPositionVarying + \", \" + posReg + \"\\n\" +\n\t\t\t\"dp3 \" + lightDir + \".w, \" + lightDir + \".xyz, \" + lightDir + \".xyz\\n\" +\n\t\t\t\"mul \" + lightDir + \".w, \" + lightDir + \".w, \" + posReg + \".w\\n\" +\n\t\t\t\"nrm \" + lightDir + \".xyz, \" + lightDir + \".xyz\\n\" +\n\n\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, depthSampleCol, regCache, lightDir) +\n\t\t\t\"dp4 \" + depthSampleCol + \".z, \" + depthSampleCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + lightDir + \".w, \" + epsReg + \".x\\n\" +    // offset by epsilon\n\n\t\t\t\"slt \" + targetReg + \".w, \" + targetReg + \".w, \" + depthSampleCol + \".z\\n\"; // 0 if in shadow\n\n\t\tregCache.removeFragmentTempUsage(lightDir);\n\t\tregCache.removeFragmentTempUsage(depthSampleCol);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\treturn methodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + targetRegister + \".w, \" + depthProjection + \".z, \" + temp + \".z\\n\"; // 0 if in shadow\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t}\n}\n\nexport = ShadowHardMethod;",
    "import IAsset\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\n\nimport LightBase\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport ShadowMapperBase\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\n\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * ShadowMapMethodBase provides an abstract base method for shadow map methods.\n */\nclass ShadowMapMethodBase extends ShadingMethodBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset ShadowMapMethod]\";\n\n\tpublic _pCastingLight:LightBase;\n\tpublic _pShadowMapper:ShadowMapperBase;\n\n\tpublic _pEpsilon:number = .02;\n\tpublic _pAlpha:number = 1;\n\n\t/**\n\t * Creates a new ShadowMapMethodBase object.\n\t * @param castingLight The light used to cast shadows.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tsuper();\n\t\tthis._pCastingLight = castingLight;\n\t\tcastingLight.castsShadows = true;\n\t\tthis._pShadowMapper = castingLight.shadowMapper;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn ShadowMapMethodBase.assetType;\n\t}\n\n\t/**\n\t * The \"transparency\" of the shadows. This allows making shadows less strong.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._pAlpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._pAlpha = value;\n\t}\n\n\t/**\n\t * The light casting the shadows.\n\t */\n\tpublic get castingLight():LightBase\n\t{\n\t\treturn this._pCastingLight;\n\t}\n\n\t/**\n\t * A small value to counter floating point precision errors when comparing values in the shadow map with the\n\t * calculated depth value. Increase this if shadow banding occurs, decrease it if the shadow seems to be too detached.\n\t */\n\tpublic get epsilon():number\n\t{\n\t\treturn this._pEpsilon;\n\t}\n\n\tpublic set epsilon(value:number)\n\t{\n\t\tthis._pEpsilon = value;\n\t}\n}\n\nexport = ShadowMapMethodBase;",
    "import Vector3D\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport LightBase\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport DirectionalShadowMapper\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport TextureBase\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMapMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\n\n/**\n * ShadowMethodBase provides an abstract method for simple (non-wrapping) shadow map methods.\n */\nclass ShadowMethodBase extends ShadowMapMethodBase\n{\n\tpublic _pDepthMapCoordReg:ShaderRegisterElement;\n\tpublic _pUsePoint:boolean;\n\n\t/**\n\t * Creates a new ShadowMethodBase object.\n\t * @param castingLight The light used to cast shadows.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tthis._pUsePoint = (castingLight instanceof PointLight);\n\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsView = true;\n\t\tmethodVO.needsGlobalVertexPos = true;\n\t\tmethodVO.needsGlobalFragmentPos = this._pUsePoint;\n\t\tmethodVO.needsNormals = shaderObject.numLights > 0;\n\n\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._pCastingLight.shadowMapper.depthMap);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar vertexData:Array<number> = shaderObject.vertexConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index] = 1.0;\n\t\tfragmentData[index + 1] = 1/255.0;\n\t\tfragmentData[index + 2] = 1/65025.0;\n\t\tfragmentData[index + 3] = 1/16581375.0;\n\n\t\tfragmentData[index + 6] = 0;\n\t\tfragmentData[index + 7] = 1;\n\n\t\tif (this._pUsePoint) {\n\t\t\tfragmentData[index + 8] = 0;\n\t\t\tfragmentData[index + 9] = 0;\n\t\t\tfragmentData[index + 10] = 0;\n\t\t\tfragmentData[index + 11] = 1;\n\t\t}\n\n\t\tindex = methodVO.vertexConstantsIndex;\n\t\tif (index != -1) {\n\t\t\tvertexData[index] = .5;\n\t\t\tvertexData[index + 1] = .5;\n\t\t\tvertexData[index + 2] = 0.0;\n\t\t\tvertexData[index + 3] = 1.0;\n\t\t}\n\t}\n\n\t/**\n\t * Wrappers that override the vertex shader need to set this explicitly\n\t */\n\tpublic get _iDepthMapCoordReg():ShaderRegisterElement\n\t{\n\t\treturn this._pDepthMapCoordReg;\n\t}\n\n\tpublic set _iDepthMapCoordReg(value:ShaderRegisterElement)\n\t{\n\t\tthis._pDepthMapCoordReg = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._pDepthMapCoordReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._pUsePoint? this._pGetPointVertexCode(methodVO, regCache, sharedRegisters):this.pGetPlanarVertexCode(methodVO, regCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Gets the vertex code for shadow mapping with a point light.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic _pGetPointVertexCode(methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tmethodVO.vertexConstantsIndex = -1;\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Gets the vertex code for shadow mapping with a planar shadow map (fe: directional lights).\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic pGetPlanarVertexCode(methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeVertexVectorTemp();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeVertexConstant();\n\t\tvar depthMapProj:ShaderRegisterElement = regCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tthis._pDepthMapCoordReg = regCache.getFreeVarying();\n\t\tmethodVO.vertexConstantsIndex = dataReg.index*4;\n\n\t\t// todo: can epsilon be applied here instead of fragment shader?\n\n\t\tcode += \"m44 \" + temp + \", \" + sharedRegisters.globalPositionVertex + \", \" + depthMapProj + \"\\n\" +\n\t\t\t\"div \" + temp + \", \" + temp + \", \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xy, \" + temp + \".xy, \" + dataReg + \".xy\\n\" +\n\t\t\t\"add \" + this._pDepthMapCoordReg + \", \" + temp + \", \" + dataReg + \".xxwz\\n\";\n\t\t//\"sub \" + this._pDepthMapCoordReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + this._pDepthMapCoordReg + \".w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._pUsePoint? this._pGetPointFragmentCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters) : this._pGetPlanarFragmentCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t\tcode += \"add \" + targetReg + \".w, \" + targetReg + \".w, fc\" + (methodVO.fragmentConstantsIndex/4 + 1) + \".y\\n\" +\n\t\t\t\"sat \" + targetReg + \".w, \" + targetReg + \".w\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * Gets the fragment code for shadow mapping with a planar shadow map.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _pGetPlanarFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Gets the fragment code for shadow mapping with a point light.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _pGetPointFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (!this._pUsePoint)\n\t\t\t(<DirectionalShadowMapper> this._pShadowMapper).iDepthProjection.copyRawDataTo(shaderObject.vertexConstantData, methodVO.vertexConstantsIndex + 4, true);\n\t}\n\n\t/**\n\t * Gets the fragment code for combining this method with a cascaded shadow map method.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param decodeRegister The register containing the data to decode the shadow map depth value.\n\t * @param depthTexture The texture containing the shadow map.\n\t * @param depthProjection The projection of the fragment relative to the light.\n\t * @param targetRegister The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new Error(\"This shadow method is incompatible with cascade shadows\");\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\n\t\tif (this._pUsePoint)\n\t\t\tfragmentData[index + 4] = -Math.pow(1/((<PointLight> this._pCastingLight).fallOff*this._pEpsilon), 2);\n\t\telse\n\t\t\tshaderObject.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1/((<DirectionalShadowMapper> this._pShadowMapper).depth*this._pEpsilon);\n\n\t\tfragmentData[index + 5] = 1 - this._pAlpha;\n\n\t\tif (this._pUsePoint) {\n\t\t\tvar pos:Vector3D = this._pCastingLight.scenePosition;\n\t\t\tfragmentData[index + 8] = pos.x;\n\t\t\tfragmentData[index + 9] = pos.y;\n\t\t\tfragmentData[index + 10] = pos.z;\n\t\t\t// used to decompress distance\n\t\t\tvar f:number = (<PointLight> this._pCastingLight).fallOff;\n\t\t\tfragmentData[index + 11] = 1/(2*f*f);\n\t\t}\n\n\t\tmethodVO.textureObject.activate(shaderObject);\n\t}\n\n\t/**\n\t * Sets the method state for cascade shadow mapping.\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthrow new Error(\"This shadow method is incompatible with cascade shadows\");\n\t}\n}\n\nexport = ShadowMethodBase;",
    "import NearDirectionalShadowMapper\t\t= require(\"awayjs-display/lib/materials/shadowmappers/NearDirectionalShadowMapper\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n// TODO: shadow mappers references in materials should be an interface so that this class should NOT extend ShadowMapMethodBase just for some delegation work\n/**\n * ShadowNearMethod provides a shadow map method that restricts the shadowed area near the camera to optimize\n * shadow map usage. This method needs to be used in conjunction with a NearDirectionalShadowMapper.\n *\n * @see away.lights.NearDirectionalShadowMapper\n */\nclass ShadowNearMethod extends ShadowMethodBase\n{\n\tprivate _baseMethod:ShadowMethodBase;\n\n\tprivate _fadeRatio:number;\n\tprivate _nearShadowMapper:NearDirectionalShadowMapper;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new ShadowNearMethod object.\n\t * @param baseMethod The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)\n\t * @param fadeRatio The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.\n\t */\n\tconstructor(baseMethod:ShadowMethodBase, fadeRatio:number = .1)\n\t{\n\t\tsuper(baseMethod.castingLight);\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis._baseMethod = baseMethod;\n\t\tthis._fadeRatio = fadeRatio;\n\t\tthis._nearShadowMapper = <NearDirectionalShadowMapper> this._pCastingLight.shadowMapper;\n\t\tif (!this._nearShadowMapper)\n\t\t\tthrow new Error(\"ShadowNearMethod requires a light that has a NearDirectionalShadowMapper instance assigned to shadowMapper.\");\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * The base shadow map method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():ShadowMethodBase\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:ShadowMethodBase)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\t\tthis._baseMethod.iInitConstants(shaderObject, methodVO);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index + 2] = 0;\n\t\tfragmentData[index + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitVO(shaderObject, methodVO);\n\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._baseMethod.alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._baseMethod.alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get epsilon():number\n\t{\n\t\treturn this._baseMethod.epsilon;\n\t}\n\n\tpublic set epsilon(value:number)\n\t{\n\t\tthis._baseMethod.epsilon = value;\n\t}\n\n\t/**\n\t * The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.\n\t */\n\tpublic get fadeRatio():number\n\t{\n\t\treturn this._fadeRatio;\n\t}\n\n\tpublic set fadeRatio(value:number)\n\t{\n\t\tthis._fadeRatio = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._baseMethod.iGetFragmentCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentSingleTemp();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode += \"abs \" + temp + \", \" + sharedRegisters.projectionFragment + \".w\\n\" +\n\t\t\t\"sub \" + temp + \", \" + temp + \", \" + dataReg + \".x\\n\" +\n\t\t\t\"mul \" + temp + \", \" + temp + \", \" + dataReg + \".y\\n\" +\n\t\t\t\"sat \" + temp + \", \" + temp + \"\\n\" +\n\t\t\t\"sub \" + temp + \", \" + dataReg + \".w,\" + temp + \"\\n\" +\n\t\t\t\"sub \" + targetReg + \".w, \" + dataReg + \".w,\" + targetReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + temp + \"\\n\" +\n\t\t\t\"sub \" + targetReg + \".w, \" + dataReg + \".w,\" + targetReg + \".w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iDeactivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\t// todo: move this to activate (needs camera)\n\t\tvar near:number = camera.projection.near;\n\t\tvar d:number = camera.projection.far - near;\n\t\tvar maxDistance:number = this._nearShadowMapper.coverageRatio;\n\t\tvar minDistance:number = maxDistance*(1 - this._fadeRatio);\n\n\t\tmaxDistance = near + maxDistance*d;\n\t\tminDistance = near + minDistance*d;\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index] = minDistance;\n\t\tfragmentData[index + 1] = 1/(maxDistance - minDistance);\n\n\t\tthis._baseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis._baseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._baseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = ShadowNearMethod;",
    "import PoissonLookup\t\t\t\t\t= require(\"awayjs-core/lib/geom/PoissonLookup\");\n\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowSoftMethod provides a soft shadowing technique by randomly distributing sample points.\n */\nclass ShadowSoftMethod extends ShadowMethodBase\n{\n\tprivate _range:number = 1;\n\tprivate _numSamples:number /*int*/;\n\tprivate _offsets:Array<number>;\n\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t *\n\t * @param castingLight The light casting the shadows\n\t * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 32.\n\t */\n\tconstructor(castingLight:DirectionalLight, numSamples:number /*int*/ = 5, range:number = 1)\n\t{\n\t\tsuper(castingLight);\n\n\t\tthis.numSamples = numSamples;\n\t\tthis.range = range;\n\t}\n\n\t/**\n\t * The amount of samples to take for dithering. Minimum 1, maximum 32. The actual maximum may depend on the\n\t * complexity of the shader.\n\t */\n\tpublic get numSamples():number /*int*/\n\t{\n\t\treturn this._numSamples;\n\t}\n\n\tpublic set numSamples(value:number /*int*/)\n\t{\n\t\tthis._numSamples = value;\n\t\t\n\t\tif (this._numSamples < 1)\n\t\t\tthis._numSamples = 1;\n\t\telse if (this._numSamples > 32)\n\t\t\tthis._numSamples = 32;\n\n\t\tthis._offsets = PoissonLookup.getDistribution(this._numSamples);\n\t\t\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The range in the shadow map in which to distribute the samples.\n\t */\n\tpublic get range():number\n\t{\n\t\treturn this._range;\n\t}\n\n\tpublic set range(value:number)\n\t{\n\t\tthis._range = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 8] = 1/this._numSamples;\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 9] = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar texRange:number = .5*this._range/this._pCastingLight.shadowMapper.depthMapSize;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.fragmentConstantsIndex + 10;\n\t\tvar len:number /*uint*/ = this._numSamples << 1;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i)\n\t\t\tdata[index + i] = this._offsets[i]*texRange;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// todo: move some things to super\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tregCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tmethodVO.textureObject._iInitRegisters(shaderObject, regCache);\n\n\t\treturn this.getSampleCode(shaderObject, methodVO, decReg, targetReg, regCache, dataReg);\n\t}\n\n\t/**\n\t * Adds the code for another tap to the shader code.\n\t * @param uv The uv register for the tap.\n\t * @param texture The texture register containing the depth map.\n\t * @param decode The register containing the depth map decoding data.\n\t * @param target The target register to add the tap comparison result.\n\t * @param regCache The register cache managing the registers.\n\t * @return\n\t */\n\tprivate addSample(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, uvReg:ShaderRegisterElement):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\treturn methodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, uvReg) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\" + // 0 if in shadow\n\t\t\t\"add \" + targetRegister + \".w, \" + targetRegister + \".w, \" + uvReg + \".w\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar texRange:number = this._range/this._pCastingLight.shadowMapper.depthMapSize;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar len:number /*uint*/ = this._numSamples << 1;\n\t\tdata[index] = 1/this._numSamples;\n\t\tdata[index + 1] = 0;\n\t\tindex += 2;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i)\n\t\t\tdata[index + i] = this._offsets[i]*texRange;\n\n\t\tif (len%4 == 0) {\n\t\t\tdata[index + len] = 0;\n\t\t\tdata[index + len + 1] = 0;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pDepthMapCoordReg = depthProjection;\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn this.getSampleCode(shaderObject, methodVO, decodeRegister, targetRegister, registerCache, dataReg);\n\t}\n\n\t/**\n\t * Get the actual shader code for shadow mapping\n\t * @param regCache The register cache managing the registers.\n\t * @param depthTexture The texture register containing the depth map.\n\t * @param decodeRegister The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the shadow coverage.\n\t * @param dataReg The register containing additional data.\n\t */\n\tprivate getSampleCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, dataReg:ShaderRegisterElement):string\n\t{\n\t\tvar code:string;\n\t\tvar uvReg:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tvar offsets:Array<string> = new Array<string>(dataReg + \".zw\");\n\t\tvar numRegs:number /*int*/ = this._numSamples >> 1;\n\n\t\tfor (var i:number /*int*/ = 0; i < numRegs; ++i) {\n\t\t\tvar reg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\toffsets.push(reg + \".xy\");\n\t\t\toffsets.push(reg + \".zw\");\n\t\t}\n\n\t\tfor (i = 0; i < this._numSamples; ++i) {\n\t\t\tif (i == 0) {\n\t\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t\t\tcode = \"add \" + uvReg + \", \" + this._pDepthMapCoordReg + \", \" + dataReg + \".zwyy\\n\" +\n\t\t\t\t\tmethodVO.textureObject._iGetFragmentCode(shaderObject, temp, registerCache, uvReg) +\n\t\t\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\t\t\"slt \" + targetRegister + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\"; // 0 if in shadow;\n\t\t\t} else {\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + offsets[i] + \"\\n\" +\n\t\t\t\t\tthis.addSample(shaderObject, methodVO, decodeRegister, targetRegister, registerCache, uvReg);\n\t\t\t}\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(uvReg);\n\n\t\tcode += \"mul \" + targetRegister + \".w, \" + targetRegister + \".w, \" + dataReg + \".x\\n\"; // average\n\n\t\treturn code;\n\t}\n}\n\nexport = ShadowSoftMethod;",
    "import ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularAnisotropicMethod provides a specular method resulting in anisotropic highlights. These are typical for\n * surfaces with microfacet details such as tiny grooves. In particular, this uses the Heidrich-Seidel distrubution.\n * The tangent vectors are used as the surface groove directions.\n */\nclass SpecularAnisotropicMethod extends SpecularBasicMethod\n{\n\t/**\n\t * Creates a new SpecularAnisotropicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsTangents = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight)\n\t\t\tt = this._pTotalLightColorReg;\n\t\telse {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\t// (sin(l,t) * sin(v,t) - cos(l,t)*cos(v,t)) ^ k\n\n\t\tcode += \"nrm \" + t + \".xyz, \" + sharedRegisters.tangentVarying + \".xyz\\n\" +\n\t\t\t\"dp3 \" + t + \".w, \" + t + \".xyz, \" + lightDirReg + \".xyz\\n\" +\n\t\t\t\"dp3 \" + t + \".z, \" + t + \".xyz, \" + sharedRegisters.viewDirFragment + \".xyz\\n\";\n\n\t\t// (sin(t.w) * sin(t.z) - cos(t.w)*cos(t.z)) ^ k\n\t\tcode += \"sin \" + t + \".x, \" + t + \".w\\n\" +\n\t\t\t\"sin \" + t + \".y, \" + t + \".z\\n\" +\n\t\t\t// (t.x * t.y - cos(t.w)*cos(t.z)) ^ k\n\t\t\t\"mul \" + t + \".x, \" + t + \".x, \" + t + \".y\\n\" +\n\t\t\t// (t.x - cos(t.w)*cos(t.z)) ^ k\n\t\t\t\"cos \" + t + \".z, \" + t + \".z\\n\" +\n\t\t\t\"cos \" + t + \".w, \" + t + \".w\\n\" +\n\t\t\t// (t.x - t.w*t.z) ^ k\n\t\t\t\"mul \" + t + \".w, \" + t + \".w, \" + t + \".z\\n\" +\n\t\t\t// (t.x - t.w) ^ k\n\t\t\t\"sub \" + t + \".w, \" + t + \".x, \" + t + \".w\\n\";\n\n\t\tif (this.texture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\n\t\t// attenuate\n\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \".xyz, \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n}\n\nexport = SpecularAnisotropicMethod;",
    "import TextureBase\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport LightingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * SpecularBasicMethod provides the default shading method for Blinn-Phong specular highlights (an optimized but approximated\n * version of Phong specularity).\n */\nclass SpecularBasicMethod extends LightingMethodBase\n{\n\tpublic _pTotalLightColorReg:ShaderRegisterElement;\n\tpublic _pSpecularTexData:ShaderRegisterElement;\n\tpublic _pSpecularDataRegister:ShaderRegisterElement;\n\n\tprivate _texture:TextureBase;\n\n\tprivate _gloss:number = 50;\n\tprivate _specular:number = 1;\n\tprivate _specularColor:number = 0xffffff;\n\tpublic _iSpecularR:number = 1;\n\tpublic _iSpecularG:number = 1;\n\tpublic _iSpecularB:number = 1;\n\tpublic _pIsFirstLight:boolean;\n\n\t/**\n\t * Creates a new SpecularBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderLightingObject):boolean\n\t{\n\t\tif (!shaderObject.numLights)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = shaderObject.numLights > 0;\n\t\tmethodVO.needsView = shaderObject.numLights > 0;\n\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureObject = shaderObject.getTextureObject(this._texture);\n\t\t\tshaderObject.uvDependencies++;\n\t\t} else if (methodVO.textureObject) {\n\t\t\tmethodVO.textureObject.dispose();\n\t\t\tmethodVO.textureObject = null;\n\t\t}\n\t}\n\n\t/**\n\t * The sharpness of the specular highlight.\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._gloss = value;\n\t}\n\n\t/**\n\t * The overall strength of the specular highlights.\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tif (value == this._specular)\n\t\t\treturn;\n\n\t\tthis._specular = value;\n\t\tthis.updateSpecular();\n\t}\n\n\t/**\n\t * The colour of the specular reflection of the surface.\n\t */\n\tpublic get specularColor():number\n\t{\n\t\treturn this._specularColor;\n\t}\n\n\tpublic set specularColor(value:number)\n\t{\n\t\tif (this._specularColor == value)\n\t\t\treturn;\n\n\t\t// specular is now either enabled or disabled\n\t\tif (this._specularColor == 0 || value == 0)\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._specularColor = value;\n\t\tthis.updateSpecular();\n\t}\n\n\t/**\n\t * The bitmapData that encodes the specular highlight strength per texel in the red channel, and the sharpness\n\t * in the green channel. You can use SpecularTextureBase if you want to easily set specular and gloss maps\n\t * from grayscale images, but prepared images are preferred.\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tif (this._texture == value)\n\t\t\treturn;\n\n\t\tthis._texture = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\n\t\tvar m:any = method;\n\t\tvar bsm:SpecularBasicMethod = <SpecularBasicMethod> method;\n\n\t\tvar spec:SpecularBasicMethod = bsm;//SpecularBasicMethod(method);\n\t\tthis.texture = spec.texture;\n\t\tthis.specular = spec.specular;\n\t\tthis.specularColor = spec.specularColor;\n\t\tthis.gloss = spec.gloss;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._pTotalLightColorReg = null;\n\t\tthis._pSpecularTexData = null;\n\t\tthis._pSpecularDataRegister = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tthis._pIsFirstLight = true;\n\n\t\tthis._pSpecularDataRegister = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = this._pSpecularDataRegister.index*4;\n\n\t\tif (this._texture) {\n\n\t\t\tthis._pSpecularTexData = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(this._pSpecularTexData, 1);\n\n\t\t\tmethodVO.textureObject._iInitRegisters(shaderObject, registerCache);\n\n\t\t\tcode += methodVO.textureObject._iGetFragmentCode(shaderObject, this._pSpecularTexData, registerCache, sharedRegisters.uvVarying);\n\t\t}\n\n\t\tthis._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(this._pTotalLightColorReg, 1);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\t// blinn-phong half vector model\n\t\tcode += \"add \" + t + \", \" + lightDirReg + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"nrm \" + t + \".xyz, \" + t + \"\\n\" +\n\t\t\t\t\"dp3 \" + t + \".w, \" + normalReg + \", \" + t + \"\\n\" +\n\t\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\";\n\n\t\tif (this._texture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else {\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\t\t}\n\n\t\t// attenuate\n\t\tif (shaderObject.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \", \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\n\t\tcode += \"dp3 \" + t + \".w, \" + normalReg + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + t + \".w\\n\" +\n\t\t\t\t\"mul \" + t + \", \" + t + \".w, \" + normalReg + \"\\n\" +\n\t\t\t\t\"sub \" + t + \", \" + t + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"tex \" + t + \", \" + t + \", \" + cubeMapReg + \" <cube,\" + (shaderObject.useSmoothTextures? \"linear\":\"nearest\") + \",miplinear>\\n\" +\n\t\t\t\t\"mul \" + t + \".xyz, \" + t + \", \" + weightRegister + \"\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (sharedRegisters.shadowTarget)\n\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + sharedRegisters.shadowTarget + \".w\\n\";\n\n\t\tif (this._texture) {\n\t\t\t// apply strength modulation from texture\n\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + this._pSpecularTexData + \".x\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(this._pSpecularTexData);\n\t\t}\n\n\t\t// apply material's specular reflection\n\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + this._pSpecularDataRegister + \"\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\";\n\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._texture)\n\t\t\tmethodVO.textureObject.activate(shaderObject);\n\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._iSpecularR;\n\t\tdata[index + 1] = this._iSpecularG;\n\t\tdata[index + 2] = this._iSpecularB;\n\t\tdata[index + 3] = this._gloss;\n\t}\n\n\t/**\n\t * Updates the specular color data used by the render state.\n\t */\n\tprivate updateSpecular()\n\t{\n\t\tthis._iSpecularR = (( this._specularColor >> 16) & 0xff)/0xff*this._specular;\n\t\tthis._iSpecularG = (( this._specularColor >> 8) & 0xff)/0xff*this._specular;\n\t\tthis._iSpecularB = ( this._specularColor & 0xff)/0xff*this._specular;\n\t}\n}\n\nexport = SpecularBasicMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport SpecularCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCompositeMethod\");\n\n/**\n * SpecularCelMethod provides a shading method to add specular cel (cartoon) shading.\n */\nclass SpecularCelMethod extends SpecularCompositeMethod\n{\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _smoothness:number = .1;\n\tprivate _specularCutOff:number = .1;\n\n\t/**\n\t * Creates a new SpecularCelMethod object.\n\t * @param specularCutOff The threshold at which the specular highlight should be shown.\n\t * @param baseMethod An optional specular method on which the cartoon shading is based. If ommitted, SpecularBasicMethod is used.\n\t */\n\tconstructor(specularCutOff:number = .5, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.clampSpecular(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._specularCutOff = specularCutOff;\n\t}\n\n\t/**\n\t * The smoothness of the highlight edge.\n\t */\n\tpublic get smoothness():number\n\t{\n\t\treturn this._smoothness;\n\t}\n\n\tpublic set smoothness(value:number)\n\t{\n\t\tthis._smoothness = value;\n\t}\n\n\t/**\n\t * The threshold at which the specular highlight should be shown.\n\t */\n\tpublic get specularCutOff():number\n\t{\n\t\treturn this._specularCutOff;\n\t}\n\n\tpublic set specularCutOff(value:number)\n\t{\n\t\tthis._specularCutOff = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._smoothness;\n\t\tdata[index + 1] = this._specularCutOff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * Snaps the specular shading strength of the wrapped method to zero or one, depending on whether or not it exceeds the specularCutOff\n\t * @param vo The MethodVO used to compile the current shader.\n\t * @param t The register containing the specular strength in the \"w\" component, and either the half-vector or the reflection vector in \"xyz\".\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared register data for this shader.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate clampSpecular(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + this._dataReg + \".y\\n\" + // x - cutoff\n\t\t\t\"div \" + targetReg + \".y, \" + targetReg + \".y, \" + this._dataReg + \".x\\n\" + // (x - cutoff)/epsilon\n\t\t\t\"sat \" + targetReg + \".y, \" + targetReg + \".y\\n\" +\n\t\t\t\"sge \" + targetReg + \".w, \" + targetReg + \".w, \" + this._dataReg + \".y\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n}\n\nexport = SpecularCelMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularCompositeMethod provides a base class for specular methods that wrap a specular method to alter the\n * calculated specular reflection strength.\n */\nclass SpecularCompositeMethod extends SpecularBasicMethod\n{\n\tprivate _baseMethod:SpecularBasicMethod;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new <code>SpecularCompositeMethod</code> object.\n\t *\n\t * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature modSpecular(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the specular strength and t.xyz will contain the half-vector or the reflection vector.\n\t * @param baseMethod The base specular method on which this method's shading is based.\n\t */\n\tconstructor(modulateMethod:(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\tsuper();\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis._baseMethod = baseMethod || new SpecularBasicMethod();\n\t\tthis._baseMethod._iModulateMethod = modulateMethod;\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitVO(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitConstants(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * The base specular method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():SpecularBasicMethod\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._baseMethod.gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._baseMethod.gloss = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._baseMethod.specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tthis._baseMethod.specular = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis._baseMethod.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._baseMethod.texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tthis._baseMethod.texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderLightingObject, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tthis._baseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iDeactivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @return\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentCodePerProbe(shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis._baseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._baseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = SpecularCompositeMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport SpecularCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCompositeMethod\");\n\n/**\n * SpecularFresnelMethod provides a specular shading method that causes stronger highlights on grazing view angles.\n */\nclass SpecularFresnelMethod extends SpecularCompositeMethod\n{\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _incidentLight:boolean;\n\tprivate _fresnelPower:number = 5;\n\tprivate _normalReflectance:number = .028; // default value for skin\n\n\t/**\n\t * Creates a new SpecularFresnelMethod object.\n\t * @param basedOnSurface Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.\n\t * @param baseMethod The specular method to which the fresnel equation. Defaults to SpecularBasicMethod.\n\t */\n\tconstructor(basedOnSurface:boolean = true, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\t// may want to offer diff speculars\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.modulateSpecular(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._incidentLight = !basedOnSurface;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\n\t\tvar index:number = methodVO.secondaryFragmentConstantsIndex;\n\t\tshaderObject.fragmentConstantData[index + 2] = 1;\n\t\tshaderObject.fragmentConstantData[index + 3] = 0;\n\t}\n\n\t/**\n\t * Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.\n\t */\n\tpublic get basedOnSurface():boolean\n\t{\n\t\treturn !this._incidentLight;\n\t}\n\n\tpublic set basedOnSurface(value:boolean)\n\t{\n\t\tif (this._incidentLight != value)\n\t\t\treturn;\n\n\t\tthis._incidentLight = !value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.\n\t */\n\tpublic get fresnelPower():number\n\t{\n\t\treturn this._fresnelPower;\n\t}\n\n\tpublic set fresnelPower(value:number)\n\t{\n\t\tthis._fresnelPower = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.\n\t */\n\tpublic get normalReflectance():number\n\t{\n\t\treturn this._normalReflectance;\n\t}\n\n\tpublic set normalReflectance(value:number)\n\t{\n\t\tthis._normalReflectance = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\n\t\tvar index:number = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index] = this._normalReflectance;\n\t\tfragmentData[index + 1] = this._fresnelPower;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Applies the fresnel effect to the specular strength.\n\t *\n\t * @param vo The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param target The register containing the specular strength in the \"w\" component, and the half-vector/reflection vector in \"xyz\".\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared registers created by the compiler.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate modulateSpecular(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\n\t\tcode = \"dp3 \" + targetReg + \".y, \" + sharedRegisters.viewDirFragment + \".xyz, \" + (this._incidentLight? targetReg : sharedRegisters.normalFragment) + \".xyz\\n\" +   // dot(V, H)\n\t\t\t\"sub \" + targetReg + \".y, \" + this._dataReg + \".z, \" + targetReg + \".y\\n\" +             // base = 1-dot(V, H)\n\t\t\t\"pow \" + targetReg + \".x, \" + targetReg + \".y, \" + this._dataReg + \".y\\n\" +             // exp = pow(base, 5)\n\t\t\t\"sub \" + targetReg + \".y, \" + this._dataReg + \".z, \" + targetReg + \".y\\n\" +             // 1 - exp\n\t\t\t\"mul \" + targetReg + \".y, \" + this._dataReg + \".x, \" + targetReg + \".y\\n\" +             // f0*(1 - exp)\n\t\t\t\"add \" + targetReg + \".y, \" + targetReg + \".x, \" + targetReg + \".y\\n\" +          // exp + f0*(1 - exp)\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\n\t\treturn code;\n\t}\n\n}\n\nexport = SpecularFresnelMethod;",
    "import ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularPhongMethod provides a specular method that provides Phong highlights.\n */\nclass SpecularPhongMethod extends SpecularBasicMethod\n{\n\t/**\n\t * Creates a new SpecularPhongMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar viewDirReg:ShaderRegisterElement =sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement =sharedRegisters.normalFragment;\n\n\t\t// phong model\n\t\tcode += \"dp3 \" + t + \".w, \" + lightDirReg + \", \" + normalReg + \"\\n\" + // sca1 = light.normal\n\n\t\t\t//find the reflected light vector R\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + t + \".w\\n\" + // sca1 = sca1*2\n\t\t\t\"mul \" + t + \".xyz, \" + normalReg + \", \" + t + \".w\\n\" + // vec1 = normal*sca1\n\t\t\t\"sub \" + t + \".xyz, \" + t + \", \" + lightDirReg + \"\\n\" + // vec1 = vec1 - light (light vector is negative)\n\n\t\t\t//smooth the edge as incidence angle approaches 90\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" +sharedRegisters.commons + \".w\\n\" + // sca1 = sca1 + smoothtep;\n\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\" + // sca1 range 0 - 1\n\t\t\t\"mul \" + t + \".xyz, \" + t + \", \" + t + \".w\\n\" + // vec1 = vec1*sca1\n\n\t\t\t//find the dot product between R and V\n\t\t\t\"dp3 \" + t + \".w, \" + t + \", \" + viewDirReg + \"\\n\" + // sca1 = vec1.view\n\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\";\n\n\t\tif (this.texture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\n\t\t// attenuate\n\t\tif (shaderObject.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \".xyz, \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n}\n\nexport = SpecularPhongMethod;",
    "class PassMode\n{\n\t/**\n\t *\n\t */\n\tpublic static EFFECTS:number = 0x01;\n\n\t/**\n\t *\n\t */\n\tpublic static LIGHTING:number = 0x02;\n\n\t/**\n\t *\n\t */\n\tpublic static SUPER_SHADER:number = 0x03;\n}\n\nexport = PassMode;",
    "import TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Matrix3DUtils\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\nimport Event\t\t\t\t\t\t\t= require(\"awayjs-core/lib/events/Event\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IRenderObjectOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport LightSources\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/LightSources\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport RenderPassBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/passes/RenderPassBase\");\nimport IRenderLightingPass\t\t\t\t= require(\"awayjs-renderergl/lib/passes/IRenderLightingPass\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport RenderMethodMaterialObject\t\t= require(\"awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodPassMode\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/passes/MethodPassMode\");\n\n/**\n * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,\n * using material methods to define their appearance.\n */\nclass MethodPass extends RenderPassBase implements IRenderLightingPass\n{\n\tprivate _maxLights:number = 3;\n\n\tprivate _mode:number = 0x03;\n\tprivate _material:MaterialBase;\n\tprivate _lightPicker:LightPickerBase;\n\n\tprivate _includeCasters:boolean = true;\n\n\tpublic _iColorTransformMethodVO:MethodVO;\n\tpublic _iNormalMethodVO:MethodVO;\n\tpublic _iAmbientMethodVO:MethodVO;\n\tpublic _iShadowMethodVO:MethodVO;\n\tpublic _iDiffuseMethodVO:MethodVO;\n\tpublic _iSpecularMethodVO:MethodVO;\n\tpublic _iMethodVOs:Array<MethodVO> = new Array<MethodVO>();\n\n\tpublic _numEffectDependencies:number = 0;\n\n\tprivate _onLightsChangeDelegate:(event:Event) => void;\n\tprivate _onMethodInvalidatedDelegate:(event:ShadingMethodEvent) => void;\n\n\tpublic numDirectionalLights:number = 0;\n\n\tpublic numPointLights:number = 0;\n\n\tpublic numLightProbes:number = 0;\n\n\tpublic pointLightsOffset:number = 0;\n\t\n\tpublic directionalLightsOffset:number= 0;\n\t\n\tpublic lightProbesOffset:number = 0;\n\t\n\t/**\n\t *\n\t */\n\tpublic get mode():number\n\t{\n\t\treturn this._mode;\n\t}\n\n\tpublic set mode(value:number)\n\t{\n\t\tif (this._mode == value)\n\t\t\treturn;\n\t\t\n\t\tthis._mode = value;\n\n\t\tthis._updateLights();\n\t}\n\n\t/**\n\t * Indicates whether or not shadow casting lights need to be included.\n\t */\n\tpublic get includeCasters():boolean\n\t{\n\t\treturn this._includeCasters;\n\t}\n\n\tpublic set includeCasters(value:boolean)\n\t{\n\t\tif (this._includeCasters == value)\n\t\t\treturn;\n\n\t\tthis._includeCasters = value;\n\n\t\tthis._updateLights();\n\t}\n\n\t/**\n\t * \n\t * @returns {LightPickerBase}\n\t */\n\tpublic get lightPicker():LightPickerBase\n\t{\n\t\treturn this._lightPicker;\n\t}\n\n\tpublic set lightPicker(value:LightPickerBase)\n\t{\n\t\t//if (this._lightPicker == value)\n\t\t//\treturn;\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.removeEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\tthis._lightPicker = value;\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.addEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\tthis._updateLights();\n\t}\n\t\n\t/**\n\t * Whether or not to use fallOff and radius properties for lights. This can be used to improve performance and\n\t * compatibility for constrained mode.\n\t */\n\tpublic get enableLightFallOff():boolean\n\t{\n\t\treturn this._material.enableLightFallOff;\n\t}\n\n\t/**\n\t * Define which light source types to use for diffuse reflections. This allows choosing between regular lights\n\t * and/or light probes for diffuse reflections.\n\t *\n\t * @see away3d.materials.LightSources\n\t */\n\tpublic get diffuseLightSources():number\n\t{\n\t\treturn this._material.diffuseLightSources;\n\t}\n\n\t/**\n\t * Define which light source types to use for specular reflections. This allows choosing between regular lights\n\t * and/or light probes for specular reflections.\n\t *\n\t * @see away3d.materials.LightSources\n\t */\n\tpublic get specularLightSources():number\n\t{\n\t\treturn this._material.specularLightSources;\n\t}\n\n\t/**\n\t * Creates a new CompiledPass object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(mode:number, renderObject:RenderMethodMaterialObject, renderObjectOwner:MaterialBase, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(renderObject, renderObjectOwner, renderableClass, stage);\n\n\t\tthis._mode = mode;\n\n\t\tthis._material = renderObjectOwner;\n\n\t\tthis._onLightsChangeDelegate = (event:Event) => this.onLightsChange(event);\n\t\t\n\t\tthis._onMethodInvalidatedDelegate = (event:ShadingMethodEvent) => this.onMethodInvalidated(event);\n\n\t\tthis.lightPicker = renderObjectOwner.lightPicker;\n\n\t\tif (this._shader == null)\n\t\t\tthis._updateShader();\n\t}\n\n\tprivate _updateShader()\n\t{\n\t\tif ((this.numDirectionalLights || this.numPointLights || this.numLightProbes) && !(this._shader instanceof ShaderLightingObject)) {\n\t\t\tif (this._shader != null)\n\t\t\t\tthis._shader.dispose();\n\n\t\t\tthis._shader = new ShaderLightingObject(this._renderableClass, this, this._stage);\n\t\t} else if (!(this._shader instanceof ShaderObjectBase)) {\n\t\t\tif (this._shader != null)\n\t\t\t\tthis._shader.dispose();\n\n\t\t\tthis._shader = new ShaderObjectBase(this._renderableClass, this, this._stage);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the unchanging constant data for this material.\n\t */\n\tpublic _iInitConstantData(shaderObject:ShaderObjectBase)\n\t{\n\t\tsuper._iInitConstantData(shaderObject);\n\n\t\t//Updates method constants if they have changed.\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tthis._iMethodVOs[i].method.iInitConstants(shaderObject, this._iMethodVOs[i]);\n\t}\n\n\t/**\n\t * The ColorTransform object to transform the colour of the material with. Defaults to null.\n\t */\n\tpublic get colorTransform():ColorTransform\n\t{\n\t\treturn this.colorTransformMethod? this.colorTransformMethod.colorTransform : null;\n\t}\n\n\tpublic set colorTransform(value:ColorTransform)\n\t{\n\t\tif (value) {\n\t\t\tif (this.colorTransformMethod == null)\n\t\t\t\tthis.colorTransformMethod = new EffectColorTransformMethod();\n\n\t\t\tthis.colorTransformMethod.colorTransform = value;\n\n\t\t} else if (!value) {\n\t\t\tif (this.colorTransformMethod)\n\t\t\t\tthis.colorTransformMethod = null;\n\t\t}\n\t}\n\n\t/**\n\t * The EffectColorTransformMethod object to transform the colour of the material with. Defaults to null.\n\t */\n\tpublic get colorTransformMethod():EffectColorTransformMethod\n\t{\n\t\treturn this._iColorTransformMethodVO? <EffectColorTransformMethod> this._iColorTransformMethodVO.method : null;\n\t}\n\n\tpublic set colorTransformMethod(value:EffectColorTransformMethod)\n\t{\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iColorTransformMethodVO) {\n\t\t\tthis._removeDependency(this._iColorTransformMethodVO);\n\t\t\tthis._iColorTransformMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iColorTransformMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iColorTransformMethodVO);\n\t\t}\n\t}\n\n\tprivate _removeDependency(methodVO:MethodVO, effectsDependency:boolean = false)\n\t{\n\t\tvar index:number = this._iMethodVOs.indexOf(methodVO);\n\n\t\tif (!effectsDependency)\n\t\t\tthis._numEffectDependencies--;\n\n\t\tmethodVO.method.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onMethodInvalidatedDelegate);\n\t\tthis._iMethodVOs.splice(index, 1);\n\n\t\tthis.invalidatePass();\n\t}\n\n\tprivate _addDependency(methodVO:MethodVO, effectsDependency:boolean = false, index:number = -1)\n\t{\n\t\tmethodVO.method.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onMethodInvalidatedDelegate);\n\n\t\tif (effectsDependency) {\n\t\t\tif (index != -1)\n\t\t\t\tthis._iMethodVOs.splice(index + this._iMethodVOs.length - this._numEffectDependencies, 0, methodVO);\n\t\t\telse\n\t\t\t\tthis._iMethodVOs.push(methodVO);\n\t\t\tthis._numEffectDependencies++;\n\t\t} else {\n\t\t\tthis._iMethodVOs.splice(this._iMethodVOs.length - this._numEffectDependencies, 0, methodVO);\n\t\t}\n\n\t\tthis.invalidatePass();\n\t}\n\n\t/**\n\t * Appends an \"effect\" shading method to the shader. Effect methods are those that do not influence the lighting\n\t * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the\n\t * methods added prior.\n\t */\n\tpublic addEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._addDependency(new MethodVO(method), true);\n\t}\n\n\t/**\n\t * The number of \"effect\" methods added to the material.\n\t */\n\tpublic get numEffectMethods():number\n\t{\n\t\treturn this._numEffectDependencies;\n\t}\n\n\t/**\n\t * Queries whether a given effects method was added to the material.\n\t *\n\t * @param method The method to be queried.\n\t * @return true if the method was added to the material, false otherwise.\n\t */\n\tpublic hasEffectMethod(method:EffectMethodBase):boolean\n\t{\n\t\treturn this.getDependencyForMethod(method) != null;\n\t}\n\n\t/**\n\t * Returns the method added at the given index.\n\t * @param index The index of the method to retrieve.\n\t * @return The method at the given index.\n\t */\n\tpublic getEffectMethodAt(index:number):EffectMethodBase\n\t{\n\t\tif (index < 0 || index > this._numEffectDependencies - 1)\n\t\t\treturn null;\n\n\t\treturn <EffectMethodBase> this._iMethodVOs[index + this._iMethodVOs.length - this._numEffectDependencies].method;\n\t}\n\n\t/**\n\t * Adds an effect method at the specified index amongst the methods already added to the material. Effect\n\t * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,\n\t * etc. The method will be applied to the result of the methods with a lower index.\n\t */\n\tpublic addEffectMethodAt(method:EffectMethodBase, index:number)\n\t{\n\t\tthis._addDependency(new MethodVO(method), true, index);\n\t}\n\n\t/**\n\t * Removes an effect method from the material.\n\t * @param method The method to be removed.\n\t */\n\tpublic removeEffectMethod(method:EffectMethodBase)\n\t{\n\t\tvar methodVO:MethodVO = this.getDependencyForMethod(method);\n\n\t\tif (methodVO != null)\n\t\t\tthis._removeDependency(methodVO, true);\n\t}\n\n\n\t/**\n\t * remove an effect method at the specified index from the material.\n\t */\n\tpublic removeEffectMethodAt(index:number)\n\t{\n\t\tif (index < 0 || index > this._numEffectDependencies - 1)\n\t\t\treturn;\n\n\t\tvar methodVO:MethodVO = this._iMethodVOs[index + this._iMethodVOs.length - this._numEffectDependencies];\n\n\t\tif (methodVO != null)\n\t\t\tthis._removeDependency(methodVO, true);\n\t}\n\n\n\tprivate getDependencyForMethod(method:EffectMethodBase):MethodVO\n\t{\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tif (this._iMethodVOs[i].method == method)\n\t\t\t\treturn this._iMethodVOs[i];\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.\n\t */\n\tpublic get normalMethod():NormalBasicMethod\n\t{\n\t\treturn this._iNormalMethodVO? <NormalBasicMethod> this._iNormalMethodVO.method : null;\n\t}\n\n\tpublic set normalMethod(value:NormalBasicMethod)\n\t{\n\t\tif (this._iNormalMethodVO && this._iNormalMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iNormalMethodVO) {\n\t\t\tthis._removeDependency(this._iNormalMethodVO);\n\t\t\tthis._iNormalMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iNormalMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iNormalMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.\n\t */\n\tpublic get ambientMethod():AmbientBasicMethod\n\t{\n\t\treturn this._iAmbientMethodVO? <AmbientBasicMethod> this._iAmbientMethodVO.method : null;\n\t}\n\n\tpublic set ambientMethod(value:AmbientBasicMethod)\n\t{\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iAmbientMethodVO) {\n\t\t\tthis._removeDependency(this._iAmbientMethodVO);\n\t\t\tthis._iAmbientMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iAmbientMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iAmbientMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.\n\t */\n\tpublic get shadowMethod():ShadowMapMethodBase\n\t{\n\t\treturn this._iShadowMethodVO? <ShadowMapMethodBase> this._iShadowMethodVO.method : null;\n\t}\n\n\tpublic set shadowMethod(value:ShadowMapMethodBase)\n\t{\n\t\tif (this._iShadowMethodVO && this._iShadowMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iShadowMethodVO) {\n\t\t\tthis._removeDependency(this._iShadowMethodVO);\n\t\t\tthis._iShadowMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iShadowMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iShadowMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.\n\t */\n\tpublic get diffuseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this._iDiffuseMethodVO? <DiffuseBasicMethod> this._iDiffuseMethodVO.method : null;\n\t}\n\n\tpublic set diffuseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iDiffuseMethodVO) {\n\t\t\tthis._removeDependency(this._iDiffuseMethodVO);\n\t\t\tthis._iDiffuseMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iDiffuseMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iDiffuseMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.\n\t */\n\tpublic get specularMethod():SpecularBasicMethod\n\t{\n\t\treturn this._iSpecularMethodVO? <SpecularBasicMethod> this._iSpecularMethodVO.method : null;\n\t}\n\n\tpublic set specularMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iSpecularMethodVO) {\n\t\t\tthis._removeDependency(this._iSpecularMethodVO);\n\t\t\tthis._iSpecularMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iSpecularMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iSpecularMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.removeEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\t\t\n\t\twhile (this._iMethodVOs.length)\n\t\t\tthis._removeDependency(this._iMethodVOs[0]);\n\n\t\tthis._iMethodVOs = null;\n\t}\n\n\t/**\n\t * Called when any method's shader code is invalidated.\n\t */\n\tprivate onMethodInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.invalidatePass();\n\t}\n\n\t// RENDER LOOP\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera)\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iActivate(this._shader, methodVO, this._stage);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t *\n\t * @param renderable\n\t * @param stage\n\t * @param camera\n\t */\n\tpublic _iRender(renderable:RenderableBase, camera:Camera, viewProjection:Matrix3D)\n\t{\n\t\tsuper._iRender(renderable, camera, viewProjection);\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iSetRenderState(this._shader, methodVO, renderable, this._stage, camera);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iDeactivate()\n\t{\n\t\tsuper._iDeactivate();\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iDeactivate(this._shader, methodVO, this._stage);\n\t\t}\n\t}\n\n\tpublic _iIncludeDependencies(shaderObject:ShaderLightingObject)\n\t{\n\t\tsuper._iIncludeDependencies(shaderObject);\n\n\t\t//TODO: fragment animtion should be compatible with lighting pass\n\t\tshaderObject.usesFragmentAnimation = Boolean(this._mode == MethodPassMode.SUPER_SHADER);\n\n\t\tif (!shaderObject.usesTangentSpace && this.numPointLights > 0 && shaderObject.usesLights) {\n\t\t\tshaderObject.globalPosDependencies++;\n\n\t\t\tif (Boolean(this._mode & MethodPassMode.EFFECTS))\n\t\t\t\tshaderObject.usesGlobalPosFragment = true;\n\t\t}\n\n\t\tvar i:number;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis.setupAndCountDependencies(shaderObject, this._iMethodVOs[i]);\n\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis._iMethodVOs[i].useMethod = this._iMethodVOs[i].method.iIsUsed(shaderObject);\n\t}\n\n\n\t/**\n\t * Counts the dependencies for a given method.\n\t * @param method The method to count the dependencies for.\n\t * @param methodVO The method's data for this material.\n\t */\n\tprivate setupAndCountDependencies(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.reset();\n\n\t\tmethodVO.method.iInitVO(shaderObject, methodVO);\n\n\t\tif (methodVO.needsProjection)\n\t\t\tshaderObject.projectionDependencies++;\n\n\t\tif (methodVO.needsGlobalVertexPos || methodVO.needsGlobalFragmentPos) {\n\n\t\t\tshaderObject.globalPosDependencies++;\n\n\t\t\tif (methodVO.needsGlobalFragmentPos)\n\t\t\t\tshaderObject.usesGlobalPosFragment = true;\n\n\t\t}\n\n\t\tif (methodVO.needsNormals)\n\t\t\tshaderObject.normalDependencies++;\n\n\t\tif (methodVO.needsTangents)\n\t\t\tshaderObject.tangentDependencies++;\n\n\t\tif (methodVO.needsView)\n\t\t\tshaderObject.viewDirDependencies++;\n\t}\n\n\tpublic _iGetPreLightingVertexCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.useMethod)\n\t\t\tcode += this._iAmbientMethodVO.method.iGetVertexCode(shaderObject, this._iAmbientMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod)\n\t\t\tcode += this._iDiffuseMethodVO.method.iGetVertexCode(shaderObject, this._iDiffuseMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod)\n\t\t\tcode += this._iSpecularMethodVO.method.iGetVertexCode(shaderObject, this._iSpecularMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPreLightingFragmentCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.useMethod) {\n\t\t\tcode += this._iAmbientMethodVO.method.iGetFragmentCode(shaderObject, this._iAmbientMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\n\t\t\tif (this._iAmbientMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\n\t\t\tif (this._iAmbientMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod)\n\t\t\tcode += (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentPreLightingCode(<ShaderLightingObject> shaderObject, this._iDiffuseMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod)\n\t\t\tcode += (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentPreLightingCode(<ShaderLightingObject> shaderObject, this._iSpecularMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPerLightDiffuseFragmentCode(shaderObject:ShaderLightingObject, lightDirReg:ShaderRegisterElement, diffuseColorReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentCodePerLight(shaderObject, this._iDiffuseMethodVO, lightDirReg, diffuseColorReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerLightSpecularFragmentCode(shaderObject:ShaderLightingObject, lightDirReg:ShaderRegisterElement, specularColorReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentCodePerLight(shaderObject, this._iSpecularMethodVO, lightDirReg, specularColorReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerProbeDiffuseFragmentCode(shaderObject:ShaderLightingObject, texReg:ShaderRegisterElement, weightReg:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentCodePerProbe(shaderObject, this._iDiffuseMethodVO, texReg, weightReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerProbeSpecularFragmentCode(shaderObject:ShaderLightingObject, texReg:ShaderRegisterElement, weightReg:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentCodePerProbe(shaderObject, this._iSpecularMethodVO, texReg, weightReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPostLightingVertexCode(shaderObject:ShaderLightingObject, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tcode += this._iShadowMethodVO.method.iGetVertexCode(shaderObject, this._iShadowMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPostLightingFragmentCode(shaderObject:ShaderLightingObject, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (shaderObject.useAlphaPremultiplied && this._pEnableBlending) {\n\t\t\tcode += \"add \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.commons + \".z\\n\" +\n\t\t\t\"div \" + sharedRegisters.shadedTarget + \".xyz, \" + sharedRegisters.shadedTarget + \", \" + sharedRegisters.shadedTarget + \".w\\n\" +\n\t\t\t\"sub \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.commons + \".z\\n\" +\n\t\t\t\"sat \" + sharedRegisters.shadedTarget + \".xyz, \" + sharedRegisters.shadedTarget + \"\\n\";\n\t\t}\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tcode += this._iShadowMethodVO.method.iGetFragmentCode(shaderObject, this._iShadowMethodVO, sharedRegisters.shadowTarget, registerCache, sharedRegisters);\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod) {\n\t\t\tcode += (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentPostLightingCode(shaderObject, this._iDiffuseMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\n\t\t\t// resolve other dependencies as well?\n\t\t\tif (this._iDiffuseMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\n\t\t\tif (this._iDiffuseMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod) {\n\t\t\tcode += (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentPostLightingCode(shaderObject, this._iSpecularMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\t\t\tif (this._iSpecularMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\t\t\tif (this._iSpecularMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.shadowTarget);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Indicates whether or not normals are allowed in tangent space. This is only the case if no object-space\n\t * dependencies exist.\n\t */\n\tpublic _pUsesTangentSpace(shaderObject:ShaderLightingObject):boolean\n\t{\n\t\tif (shaderObject.usesProbes)\n\t\t\treturn false;\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod && !methodVO.method.iUsesTangentSpace())\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Indicates whether or not normals are output in tangent space.\n\t */\n\tpublic _pOutputsTangentNormals(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn (<NormalBasicMethod> this._iNormalMethodVO.method).iOutputsTangentNormals();\n\t}\n\n\t/**\n\t * Indicates whether or not normals are output by the pass.\n\t */\n\tpublic _pOutputsNormals(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn this._iNormalMethodVO && this._iNormalMethodVO.useMethod;\n\t}\n\n\n\tpublic _iGetNormalVertexCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._iNormalMethodVO.method.iGetVertexCode(shaderObject, this._iNormalMethodVO, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetNormalFragmentCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._iNormalMethodVO.method.iGetFragmentCode(shaderObject, this._iNormalMethodVO, sharedRegisters.normalFragment, registerCache, sharedRegisters);\n\n\t\tif (this._iNormalMethodVO.needsView)\n\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\n\t\tif (this._iNormalMethodVO.needsGlobalFragmentPos || this._iNormalMethodVO.needsGlobalVertexPos)\n\t\t\tregisterCache.removeVertexTempUsage(sharedRegisters.globalPositionVertex);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetVertexCode(shaderObject:ShaderObjectBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = len - this._numEffectDependencies; i < len; i++) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod) {\n\t\t\t\tcode += methodVO.method.iGetVertexCode(shaderObject, methodVO, regCache, sharedReg);\n\n\t\t\t\tif (methodVO.needsGlobalVertexPos || methodVO.needsGlobalFragmentPos)\n\t\t\t\t\tregCache.removeVertexTempUsage(sharedReg.globalPositionVertex);\n\t\t\t}\n\t\t}\n\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.useMethod)\n\t\t\tcode += this._iColorTransformMethodVO.method.iGetVertexCode(shaderObject, this._iColorTransformMethodVO, regCache, sharedReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shaderObject:ShaderObjectBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar alphaReg:ShaderRegisterElement;\n\n\t\tif (this.preserveAlpha && this._numEffectDependencies > 0) {\n\t\t\talphaReg = regCache.getFreeFragmentSingleTemp();\n\t\t\tregCache.addFragmentTempUsages(alphaReg, 1);\n\t\t\tcode += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\n\t\t}\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = len - this._numEffectDependencies; i < len; i++) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod) {\n\t\t\t\tcode += methodVO.method.iGetFragmentCode(shaderObject, methodVO, sharedReg.shadedTarget, regCache, sharedReg);\n\n\t\t\t\tif (methodVO.needsNormals)\n\t\t\t\t\tregCache.removeFragmentTempUsage(sharedReg.normalFragment);\n\n\t\t\t\tif (methodVO.needsView)\n\t\t\t\t\tregCache.removeFragmentTempUsage(sharedReg.viewDirFragment);\n\n\t\t\t}\n\t\t}\n\n\t\tif (this.preserveAlpha && this._numEffectDependencies > 0) {\n\t\t\tcode += \"mov \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\n\t\t\tregCache.removeFragmentTempUsage(alphaReg);\n\t\t}\n\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.useMethod)\n\t\t\tcode += this._iColorTransformMethodVO.method.iGetFragmentCode(shaderObject, this._iColorTransformMethodVO, sharedReg.shadedTarget, regCache, sharedReg);\n\n\t\treturn code;\n\t}\n\t/**\n\t * Indicates whether the shader uses any shadows.\n\t */\n\tpublic _iUsesShadows(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn Boolean(this._iShadowMethodVO && (this._lightPicker.castingDirectionalLights.length > 0 || this._lightPicker.castingPointLights.length > 0));\n\t}\n\n\t/**\n\t * Indicates whether the shader uses any specular component.\n\t */\n\tpublic _iUsesSpecular(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn Boolean(this._iSpecularMethodVO);\n\t}\n\n\t/**\n\t * Indicates whether the shader uses any specular component.\n\t */\n\tpublic _iUsesDiffuse(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn Boolean(this._iDiffuseMethodVO);\n\t}\n\n\n\tprivate onLightsChange(event:Event)\n\t{\n\t\tthis._updateLights();\n\t}\n\n\tprivate _updateLights()\n\t{\n\t\tvar numDirectionalLightsOld:number = this.numDirectionalLights;\n\t\tvar numPointLightsOld:number = this.numPointLights;\n\t\tvar numLightProbesOld:number = this.numLightProbes;\n\n\t\tif (this._lightPicker && (this._mode & MethodPassMode.LIGHTING)) {\n\t\t\tthis.numDirectionalLights = this.calculateNumDirectionalLights(this._lightPicker.numDirectionalLights);\n\t\t\tthis.numPointLights = this.calculateNumPointLights(this._lightPicker.numPointLights);\n\t\t\tthis.numLightProbes = this.calculateNumProbes(this._lightPicker.numLightProbes);\n\n\t\t\tif (this._includeCasters) {\n\t\t\t\tthis.numDirectionalLights += this._lightPicker.numCastingDirectionalLights;\n\t\t\t\tthis.numPointLights += this._lightPicker.numCastingPointLights;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.numDirectionalLights = 0;\n\t\t\tthis.numPointLights = 0;\n\t\t\tthis.numLightProbes = 0;\n\t\t}\n\n\t\tif (numDirectionalLightsOld != this.numDirectionalLights || numPointLightsOld != this.numPointLights || numLightProbesOld != this.numLightProbes) {\n\t\t\tthis._updateShader();\n\n\t\t\tthis.invalidatePass();\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the amount of directional lights this material will support.\n\t * @param numDirectionalLights The maximum amount of directional lights to support.\n\t * @return The amount of directional lights this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumDirectionalLights(numDirectionalLights:number):number\n\t{\n\t\treturn Math.min(numDirectionalLights - this.directionalLightsOffset, this._maxLights);\n\t}\n\n\t/**\n\t * Calculates the amount of point lights this material will support.\n\t * @param numDirectionalLights The maximum amount of point lights to support.\n\t * @return The amount of point lights this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumPointLights(numPointLights:number):number\n\t{\n\t\tvar numFree:number = this._maxLights - this.numDirectionalLights;\n\t\treturn Math.min(numPointLights - this.pointLightsOffset, numFree);\n\t}\n\n\t/**\n\t * Calculates the amount of light probes this material will support.\n\t * @param numDirectionalLights The maximum amount of light probes to support.\n\t * @return The amount of light probes this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumProbes(numLightProbes:number):number\n\t{\n\t\tvar numChannels:number = 0;\n\n\t\tif ((this.specularLightSources & LightSources.PROBES) != 0)\n\t\t\t++numChannels;\n\n\t\tif ((this.diffuseLightSources & LightSources.PROBES) != 0)\n\t\t\t++numChannels;\n\n\t\t// 4 channels available\n\t\treturn Math.min(numLightProbes - this.lightProbesOffset, (4/numChannels) | 0);\n\t}\n}\n\nexport = MethodPass;",
    "import Image2D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Image2D\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-core/lib/data/TriangleSubGeometry\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\n\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderObjectOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport ContextGLProgramType\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nimport IContextGL\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/IContextGL\");\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport RenderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\nimport RenderPassBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/passes/RenderPassBase\");\n\n/**\n * The SingleObjectDepthPass provides a material pass that renders a single object to a depth map from the point\n * of view from a light.\n */\nclass SingleObjectDepthPass extends RenderPassBase\n{\n\tprivate _textures:Object;\n\tprivate _projections:Object;\n\tprivate _textureSize:number /*uint*/ = 512;\n\tprivate _polyOffset:Array<number> = Array<number>(15, 0, 0, 0);\n\tprivate _enc:Array<number>;\n\tprivate _projectionTexturesInvalid:Boolean = true;\n\n\t/**\n\t * The size of the depth map texture to render to.\n\t */\n\tpublic get textureSize():number\n\t{\n\t\treturn this._textureSize;\n\t}\n\n\tpublic set textureSize(value:number)\n\t{\n\t\tthis._textureSize = value;\n\t}\n\n\t/**\n\t * The amount by which the rendered object will be inflated, to prevent depth map rounding errors.\n\t */\n\tpublic get polyOffset():number\n\t{\n\t\treturn this._polyOffset[0];\n\t}\n\n\tpublic set polyOffset(value:number)\n\t{\n\t\tthis._polyOffset[0] = value;\n\t}\n\n\t/**\n\t * Creates a new SingleObjectDepthPass object.\n\t */\n\tconstructor(renderObject:RenderObjectBase, renderObjectOwner:IRenderObjectOwner, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(renderObject, renderObjectOwner, renderableClass, stage);\n\n\t\t//this._pNumUsedStreams = 2;\n\t\t//this._pNumUsedVertexConstants = 7;\n\t\t//this._enc = Array<number>(1.0, 255.0, 65025.0, 16581375.0, 1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);\n\t\t//\n\t\t//this._pAnimatableAttributes = Array<string>(\"va0\", \"va1\");\n\t\t//this._pAnimationTargetRegisters = Array<string>(\"vt0\", \"vt1\");\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._textures) {\n\t\t\tfor (var key in this._textures) {\n\t\t\t\tvar texture:TextureBase = this._textures[key];\n\t\t\t\ttexture.dispose();\n\t\t\t}\n\t\t\tthis._textures = null;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the projection textures used to contain the depth renders.\n\t */\n\tprivate updateProjectionTextures()\n\t{\n\t\tif (this._textures) {\n\t\t\tfor (var key in this._textures) {\n\t\t\t\tvar texture:TextureBase = this._textures[key];\n\t\t\t\ttexture.dispose();\n\t\t\t}\n\t\t}\n\n\t\tthis._textures = new Object();\n\t\tthis._projections = new Object();\n\t\tthis._projectionTexturesInvalid = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetVertexCode():string\n\t{\n\t\tvar code:string;\n\t\t// offset\n\t\tcode = \"mul vt7, vt1, vc4.x\t\\n\" +\n\t\t\t\t\"add vt7, vt7, vt0\\n\" +\n\t\t\t\t\"mov vt7.w, vt0.w\\n\";\n\t\t// project\n\t\tcode += \"m44 vt2, vt7, vc0\\n\" +\n\t\t\t\t\"mov op, vt2\\n\";\n\n\t\t// perspective divide\n\t\tcode += \"div v0, vt2, vt2.w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\t// encode float -> rgba\n\t\tcode += \"mul ft0, fc0, v0.z\\n\" +\n\t\t\t\t\"frc ft0, ft0\\n\" +\n\t\t\t\t\"mul ft1, ft0.yzww, fc1\\n\" +\n\t\t\t\t\"sub ft0, ft0, ft1\\n\" +\n\t\t\t\t\"mov oc, ft0\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Gets the depth maps rendered for this object from all lights.\n\t * @param renderable The renderable for which to retrieve the depth maps.\n\t * @param stage3DProxy The Stage3DProxy object currently used for rendering.\n\t * @return A list of depth map textures for all supported lights.\n\t */\n\tpublic _iGetDepthMap(renderable:RenderableBase):TextureBase\n\t{\n\t\treturn this._textures[renderable.renderableOwner.id];\n\t}\n\n\t/**\n\t * Retrieves the depth map projection maps for all lights.\n\t * @param renderable The renderable for which to retrieve the projection maps.\n\t * @return A list of projection maps for all supported lights.\n\t */\n\tpublic _iGetProjection(renderable:RenderableBase):Matrix3D\n\t{\n\t\treturn this._projections[renderable.renderableOwner.id];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iRender(renderable:RenderableBase, camera:Camera, viewProjection:Matrix3D)\n\t{\n\t\tvar matrix:Matrix3D;\n\t\tvar context:IContextGL = this._stage.context;\n\t\tvar len:number /*uint*/;\n\t\tvar light:LightBase;\n\t\tvar lights:Array<LightBase> = this._renderObjectOwner.lightPicker.allPickedLights;\n\t\tvar rId:number = renderable.renderableOwner.id;\n\n\t\tif (!this._textures[rId])\n\t\t\tthis._textures[rId] = new Single2DTexture(new Image2D(this._textureSize, this._textureSize));\n\n\t\tif (!this._projections[rId])\n\t\t\tthis._projections[rId] = new Matrix3D();\n\n\t\tlen = lights.length;\n\n\t\t// local position = enough\n\t\tlight = lights[0];\n\n\t\tmatrix = light.iGetObjectProjectionMatrix(renderable.sourceEntity, camera, this._projections[rId]);\n\n\t\tthis._stage.setRenderTarget(this._textures[rId], true);\n\t\tcontext.clear(1.0, 1.0, 1.0);\n\t\tcontext.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, matrix, true);\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, 0, this._enc, 2);\n\n\t\tthis._stage.activateBuffer(0, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);\n\t\tthis._stage.activateBuffer(1, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);\n\t\tcontext.drawTriangles(this._stage.getIndexBuffer(renderable.getIndexData()), 0, renderable.numTriangles);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera)\n\t{\n\t\tif (this._projectionTexturesInvalid)\n\t\t\tthis.updateProjectionTextures();\n\n\t\t// never scale\n\t\tsuper._iActivate(camera);\n\n\t\tthis._stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 4, this._polyOffset, 1);\n\t}\n}\n\nexport = SingleObjectDepthPass;",
    "import IRenderObjectOwner\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport IRenderableOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderableOwner\");\nimport MaterialBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderablePool\t\t\t\t= require(\"awayjs-display/lib/pool/IRenderablePool\");\nimport IRenderObject\t\t\t\t= require(\"awayjs-display/lib/pool/IRenderObject\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport RenderablePoolBase\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderablePoolBase\");\nimport IRenderableClass\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\nimport RenderObjectPool\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectPool\");\nimport SkyboxRenderObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/SkyboxRenderObject\");\nimport DepthRenderObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/DepthRenderObject\");\nimport DistanceRenderObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/DistanceRenderObject\");\nimport RenderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderMethodMaterialObject\t= require(\"awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject\");\n\n/**\n * @class away.pool.MethodRenderablePool\n */\nclass MethodRenderablePool extends RenderablePoolBase\n{\n\tprivate _methodMaterialRenderObjectPool:RenderObjectPool;\n\n\t/**\n\t * //TODO\n\t *\n\t * @param renderableClass\n\t */\n\tconstructor(renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(renderableClass, stage);\n\n\t\tthis._methodMaterialRenderObjectPool = new RenderObjectPool(RenderMethodMaterialObject, this._renderableClass, this._stage);\n\t}\n\n\t/**\n\t *\n\t * @param material\n\t * @param renderable\n\t */\n\tpublic getMethodRenderObject(renderObjectOwner:IRenderObjectOwner):RenderObjectBase\n\t{\n\t\treturn this._methodMaterialRenderObjectPool.getItem(renderObjectOwner);\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param renderableClass\n\t * @returns MethodRenderablePool\n\t */\n\tpublic static getPool(renderableClass:IRenderableClass, stage:Stage):MethodRenderablePool\n\t{\n\t\tvar pools:Object = (RenderablePoolBase._pools[stage.stageIndex] || (RenderablePoolBase._pools[stage.stageIndex] = new Object()));\n\n\t\treturn (pools[renderableClass.id] || (pools[renderableClass.id] = new MethodRenderablePool(renderableClass, stage)));\n\t}\n}\n\nexport = MethodRenderablePool;",
    "import RendererBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport BillboardRenderable\t\t\t= require(\"awayjs-renderergl/lib/pool/BillboardRenderable\");\nimport LineSegmentRenderable\t\t= require(\"awayjs-renderergl/lib/pool/LineSegmentRenderable\");\nimport LineSubMeshRenderable\t\t= require(\"awayjs-renderergl/lib/pool/LineSubMeshRenderable\");\nimport TriangleSubMeshRenderable\t= require(\"awayjs-renderergl/lib/pool/TriangleSubMeshRenderable\");\nimport CurveSubMeshRenderable\t\t= require(\"awayjs-renderergl/lib/pool/CurveSubMeshRenderable\");\nimport RendererPoolBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RendererPoolBase\");\n\nimport MethodRenderablePool\t\t\t= require(\"awayjs-methodmaterials/lib/pool/MethodRenderablePool\");\n\n/**\n * MethodRendererPool forms an abstract base class for classes that are used in the rendering pipeline to render the\n * contents of a partition\n *\n * @class away.render.MethodRendererPool\n */\nclass MethodRendererPool extends RendererPoolBase\n{\n\t/**\n\t * Creates a new MethodRendererPool object.\n\t */\n\tconstructor(renderer:RendererBase)\n\t{\n\t\tsuper(renderer);\n\t}\n\n\tpublic _pUpdatePool()\n\t{\n\t\tthis._billboardRenderablePool = MethodRenderablePool.getPool(BillboardRenderable, this._pStage);\n\t\tthis._lineSegmentRenderablePool = MethodRenderablePool.getPool(LineSegmentRenderable, this._pStage);\n\t\tthis._triangleSubMeshRenderablePool = MethodRenderablePool.getPool(TriangleSubMeshRenderable, this._pStage);\n\t\tthis._lineSubMeshRenderablePool = MethodRenderablePool.getPool(LineSubMeshRenderable, this._pStage);\n\t\tthis._curveSubMeshRenderablePool = MethodRenderablePool.getPool(CurveSubMeshRenderable, this._pStage);\n\t}\n}\n\nexport = MethodRendererPool;"
  ],
  "sourceRoot": ""
}
{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","awayjs-methodmaterials/lib/MethodMaterialMode.ts","awayjs-methodmaterials/lib/MethodMaterial.ts","awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject.ts","awayjs-methodmaterials/lib/data/MethodVO.ts","awayjs-methodmaterials/lib/methods/AmbientBasicMethod.ts","awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseBasicMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseCelMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseDepthMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseGradientMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseSubSurfaceMethod.ts","awayjs-methodmaterials/lib/methods/DiffuseWrapMethod.ts","awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod.ts","awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod.ts","awayjs-methodmaterials/lib/methods/EffectColorTransformMethod.ts","awayjs-methodmaterials/lib/methods/EffectEnvMapMethod.ts","awayjs-methodmaterials/lib/methods/EffectFogMethod.ts","awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod.ts","awayjs-methodmaterials/lib/methods/EffectLightMapMethod.ts","awayjs-methodmaterials/lib/methods/EffectMethodBase.ts","awayjs-methodmaterials/lib/methods/EffectRefractionEnvMapMethod.ts","awayjs-methodmaterials/lib/methods/EffectRimLightMethod.ts","awayjs-methodmaterials/lib/methods/LightingMethodBase.ts","awayjs-methodmaterials/lib/methods/NormalBasicMethod.ts","awayjs-methodmaterials/lib/methods/NormalHeightMapMethod.ts","awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod.ts","awayjs-methodmaterials/lib/methods/ShadingMethodBase.ts","awayjs-methodmaterials/lib/methods/ShadowCascadeMethod.ts","awayjs-methodmaterials/lib/methods/ShadowDitheredMethod.ts","awayjs-methodmaterials/lib/methods/ShadowFilteredMethod.ts","awayjs-methodmaterials/lib/methods/ShadowHardMethod.ts","awayjs-methodmaterials/lib/methods/ShadowMapMethodBase.ts","awayjs-methodmaterials/lib/methods/ShadowMethodBase.ts","awayjs-methodmaterials/lib/methods/ShadowNearMethod.ts","awayjs-methodmaterials/lib/methods/ShadowSoftMethod.ts","awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod.ts","awayjs-methodmaterials/lib/methods/SpecularBasicMethod.ts","awayjs-methodmaterials/lib/methods/SpecularCelMethod.ts","awayjs-methodmaterials/lib/methods/SpecularCompositeMethod.ts","awayjs-methodmaterials/lib/methods/SpecularFresnelMethod.ts","awayjs-methodmaterials/lib/methods/SpecularPhongMethod.ts","awayjs-methodmaterials/lib/passes/MethodPassMode.ts","awayjs-methodmaterials/lib/passes/MethodPass.ts","awayjs-methodmaterials/lib/passes/SingleObjectDepthPass.ts","awayjs-methodmaterials/lib/pool/MethodRenderablePool.ts","awayjs-methodmaterials/lib/pool/MethodRendererPool.ts"],"names":[],"mappings":"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","file":"awayjs-methodmaterials.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","class MethodMaterialMode\n{\n\t/**\n\t *\n\t */\n\tpublic static SINGLE_PASS:string = \"singlePass\";\n\n\t/**\n\t *\n\t */\n\tpublic static MULTI_PASS:string = \"multiPass\";\n}\n\nexport = MethodMaterialMode;","﻿import Texture2DBase\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport BlendMode\t\t\t\t\t= require(\"awayjs-display/lib/base/BlendMode\");\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport StaticLightPicker\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport IRenderObjectOwner\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport MaterialBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderObject\t\t\t\t= require(\"awayjs-display/lib/pool/IRenderObject\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLCompareMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\n\nimport AmbientBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport NormalBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodMaterialMode\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\nimport MethodRenderablePool\t\t\t= require(\"awayjs-methodmaterials/lib/pool/MethodRenderablePool\");\n\n/**\n * MethodMaterial forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nclass MethodMaterial extends MaterialBase\n{\n\tprivate _effectMethods:Array<EffectMethodBase> = new Array<EffectMethodBase>();\n\tprivate _mode:string;\n\n\tprivate _ambientMethod:AmbientBasicMethod = new AmbientBasicMethod();\n\tprivate _shadowMethod:ShadowMapMethodBase;\n\tprivate _diffuseMethod:DiffuseBasicMethod = new DiffuseBasicMethod();\n\tprivate _normalMethod:NormalBasicMethod = new NormalBasicMethod();\n\tprivate _specularMethod:SpecularBasicMethod = new SpecularBasicMethod();\n\n\n\tprivate _depthCompareMode:string = ContextGLCompareMode.LESS_EQUAL;\n\n\t/**\n\t * Creates a new MethodMaterial object.\n\t *\n\t * @param texture The texture used for the material's albedo color.\n\t * @param smooth Indicates whether the texture should be filtered when sampled. Defaults to true.\n\t * @param repeat Indicates whether the texture should be tiled when sampled. Defaults to false.\n\t * @param mipmap Indicates whether or not any used textures should use mipmapping. Defaults to false.\n\t */\n\tconstructor(texture?:Texture2DBase, smooth?:boolean, repeat?:boolean, mipmap?:boolean);\n\tconstructor(color?:number, alpha?:number);\n\tconstructor(textureColor:any = null, smoothAlpha:any = null, repeat:boolean = false, mipmap:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tthis._mode = MethodMaterialMode.SINGLE_PASS;\n\n\t\tif (textureColor instanceof Texture2DBase) {\n\t\t\tthis.texture = <Texture2DBase> textureColor;\n\n\t\t\tthis.smooth = (smoothAlpha == null)? true : false;\n\t\t\tthis.repeat = repeat;\n\t\t\tthis.mipmap = mipmap;\n\t\t} else {\n\t\t\tthis.color = (textureColor == null)? 0xFFFFFF : Number(textureColor);\n\t\t\tthis.alpha = (smoothAlpha == null)? 1 : Number(smoothAlpha);\n\t\t}\n\t}\n\n\n\tpublic get mode():string\n\t{\n\t\treturn this._mode;\n\t}\n\n\tpublic set mode(value:string)\n\t{\n\t\tif (this._mode == value)\n\t\t\treturn;\n\n\t\tthis._mode = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The depth compare mode used to render the renderables using this material.\n\t *\n\t * @see away.stagegl.ContextGLCompareMode\n\t */\n\n\tpublic get depthCompareMode():string\n\t{\n\t\treturn this._depthCompareMode;\n\t}\n\n\tpublic set depthCompareMode(value:string)\n\t{\n\t\tif (this._depthCompareMode == value)\n\t\t\treturn;\n\n\t\tthis._depthCompareMode = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The texture object to use for the ambient colour.\n\t */\n\tpublic get diffuseTexture():Texture2DBase\n\t{\n\t\treturn this._diffuseMethod.texture;\n\t}\n\n\tpublic set diffuseTexture(value:Texture2DBase)\n\t{\n\t\tthis._diffuseMethod.texture = value;\n\t}\n\n\t/**\n\t * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.\n\t */\n\tpublic get ambientMethod():AmbientBasicMethod\n\t{\n\t\treturn this._ambientMethod;\n\t}\n\n\tpublic set ambientMethod(value:AmbientBasicMethod)\n\t{\n\t\tif (this._ambientMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._ambientMethod)\n\t\t\tvalue.copyFrom(this._ambientMethod);\n\n\t\tthis._ambientMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.\n\t */\n\tpublic get shadowMethod():ShadowMapMethodBase\n\t{\n\t\treturn this._shadowMethod;\n\t}\n\n\tpublic set shadowMethod(value:ShadowMapMethodBase)\n\t{\n\t\tif (this._shadowMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._shadowMethod)\n\t\t\tvalue.copyFrom(this._shadowMethod);\n\n\t\tthis._shadowMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.\n\t */\n\tpublic get diffuseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this._diffuseMethod;\n\t}\n\n\tpublic set diffuseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this._diffuseMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._diffuseMethod)\n\t\t\tvalue.copyFrom(this._diffuseMethod);\n\n\t\tthis._diffuseMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.\n\t */\n\tpublic get specularMethod():SpecularBasicMethod\n\t{\n\t\treturn this._specularMethod;\n\t}\n\n\tpublic set specularMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._specularMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._specularMethod)\n\t\t\tvalue.copyFrom(this._specularMethod);\n\n\t\tthis._specularMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.\n\t */\n\tpublic get normalMethod():NormalBasicMethod\n\t{\n\t\treturn this._normalMethod;\n\t}\n\n\tpublic set normalMethod(value:NormalBasicMethod)\n\t{\n\t\tif (this._normalMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._normalMethod)\n\t\t\tvalue.copyFrom(this._normalMethod);\n\n\t\tthis._normalMethod = value;\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\tpublic get numEffectMethods():number\n\t{\n\t\treturn this._effectMethods.length;\n\t}\n\n\t/**\n\t * Appends an \"effect\" shading method to the shader. Effect methods are those that do not influence the lighting\n\t * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the\n\t * methods added prior.\n\t */\n\tpublic addEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._effectMethods.push(method);\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * Returns the method added at the given index.\n\t * @param index The index of the method to retrieve.\n\t * @return The method at the given index.\n\t */\n\tpublic getEffectMethodAt(index:number):EffectMethodBase\n\t{\n\t\treturn this._effectMethods[index];\n\t}\n\n\t/**\n\t * Adds an effect method at the specified index amongst the methods already added to the material. Effect\n\t * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,\n\t * etc. The method will be applied to the result of the methods with a lower index.\n\t */\n\tpublic addEffectMethodAt(method:EffectMethodBase, index:number)\n\t{\n\t\tthis._effectMethods.splice(index, 0, method);\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * Removes an effect method from the material.\n\t * @param method The method to be removed.\n\t */\n\tpublic removeEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._effectMethods.splice(this._effectMethods.indexOf(method), 1);\n\n\t\tthis._pInvalidateRenderObject();\n\t}\n\n\t/**\n\t * The normal map to modulate the direction of the surface for each texel. The default normal method expects\n\t * tangent-space normal maps, but others could expect object-space maps.\n\t */\n\tpublic get normalMap():Texture2DBase\n\t{\n\t\treturn this._normalMethod.normalMap;\n\t}\n\n\tpublic set normalMap(value:Texture2DBase)\n\t{\n\t\tthis._normalMethod.normalMap = value;\n\t}\n\n\t/**\n\t * A specular map that defines the strength of specular reflections for each texel in the red channel,\n\t * and the gloss factor in the green channel. You can use SpecularBitmapTexture if you want to easily set\n\t * specular and gloss maps from grayscale images, but correctly authored images are preferred.\n\t */\n\tpublic get specularMap():Texture2DBase\n\t{\n\t\treturn this._specularMethod.texture;\n\t}\n\n\tpublic set specularMap(value:Texture2DBase)\n\t{\n\t\tthis._specularMethod.texture = value;\n\t}\n\n\t/**\n\t * The glossiness of the material (sharpness of the specular highlight).\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._specularMethod.gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._specularMethod.gloss = value;\n\t}\n\n\t/**\n\t * The strength of the ambient reflection.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambientMethod.ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tthis._ambientMethod.ambient = value;\n\t}\n\n\t/**\n\t * The overall strength of the specular reflection.\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._specularMethod.specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tthis._specularMethod.specular = value;\n\t}\n\n\t/**\n\t * The colour of the ambient reflection.\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this._diffuseMethod.ambientColor;\n\t}\n\n\tpublic set ambientColor(value:number)\n\t{\n\t\tthis._diffuseMethod.ambientColor = value;\n\t}\n\n\t/**\n\t * The colour of the diffuse reflection.\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this._diffuseMethod.diffuseColor;\n\t}\n\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tthis._diffuseMethod.diffuseColor = value;\n\t}\n\n\t/**\n\t * The colour of the specular reflection.\n\t */\n\tpublic get specularColor():number\n\t{\n\t\treturn this._specularMethod.specularColor;\n\t}\n\n\tpublic set specularColor(value:number)\n\t{\n\t\tthis._specularMethod.specularColor = value;\n\t}\n\n\t/**\n\t *\n\t * @param renderer\n\t *\n\t * @internal\n\t */\n\tpublic getRenderObject(renderablePool:MethodRenderablePool):IRenderObject\n\t{\n\t\treturn renderablePool.getMethodRenderObject(this);\n\t}\n}\n\nexport = MethodMaterial;","import ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Matrix3DUtils\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport BlendMode\t\t\t\t\t\t= require(\"awayjs-display/lib/base/BlendMode\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IRenderObjectOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLCompareMode\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/base/RendererBase\");\nimport RenderObjectPool\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectPool\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport RenderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodPassMode\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/passes/MethodPassMode\");\nimport MethodPass\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/passes/MethodPass\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\n\n/**\n * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,\n * using material methods to define their appearance.\n */\nclass RenderMethodMaterialObject extends RenderObjectBase\n{\n\t/**\n\t *\n\t */\n\tpublic static id:string = \"method\";\n\n\tprivate _material:MethodMaterial;\n\tprivate _screenPass:MethodPass;\n\tprivate _casterLightPass:MethodPass;\n\tprivate _nonCasterLightPasses:Array<MethodPass>;\n\t\n\t/**\n\t * The maximum total number of lights provided by the light picker.\n\t */\n\tprivate get numLights():number\n\t{\n\t\treturn this._material.lightPicker? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights + this._material.lightPicker.numCastingDirectionalLights + this._material.lightPicker.numCastingPointLights : 0;\n\t}\n\n\t/**\n\t * The amount of lights that don't cast shadows.\n\t */\n\tprivate get numNonCasters():number\n\t{\n\t\treturn this._material.lightPicker? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights : 0;\n\t}\n\n\t/**\n\t * Creates a new CompiledPass object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(pool:RenderObjectPool, renderObjectOwner:MethodMaterial, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(pool, renderObjectOwner, renderableClass, stage);\n\n\t\tthis._material = renderObjectOwner;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateRenderObject()\n\t{\n\t\tsuper._pUpdateRenderObject();\n\n\t\tthis.initPasses();\n\n\t\tthis.setBlendAndCompareModes();\n\n\t\tthis._pClearScreenPasses();\n\n\t\tif (this._material.mode == MethodMaterialMode.MULTI_PASS) {\n\t\t\tif (this._casterLightPass)\n\t\t\t\tthis._pAddScreenPass(this._casterLightPass);\n\n\t\t\tif (this._nonCasterLightPasses)\n\t\t\t\tfor (var i:number = 0; i < this._nonCasterLightPasses.length; ++i)\n\t\t\t\t\tthis._pAddScreenPass(this._nonCasterLightPasses[i]);\n\t\t}\n\n\t\tif (this._screenPass)\n\t\t\tthis._pAddScreenPass(this._screenPass);\n\t}\n\n\t/**\n\t * Initializes all the passes and their dependent passes.\n\t */\n\tprivate initPasses()\n\t{\n\t\t// let the effects pass handle everything if there are no lights, when there are effect methods applied\n\t\t// after shading, or when the material mode is single pass.\n\t\tif (this.numLights == 0 || this._material.numEffectMethods > 0 || this._material.mode == MethodMaterialMode.SINGLE_PASS)\n\t\t\tthis.initEffectPass();\n\t\telse if (this._screenPass)\n\t\t\tthis.removeEffectPass();\n\n\t\t// only use a caster light pass if shadows need to be rendered\n\t\tif (this._material.shadowMethod && this._material.mode == MethodMaterialMode.MULTI_PASS)\n\t\t\tthis.initCasterLightPass();\n\t\telse if (this._casterLightPass)\n\t\t\tthis.removeCasterLightPass();\n\n\t\t// only use non caster light passes if there are lights that don't cast\n\t\tif (this.numNonCasters > 0 && this._material.mode == MethodMaterialMode.MULTI_PASS)\n\t\t\tthis.initNonCasterLightPasses();\n\t\telse if (this._nonCasterLightPasses)\n\t\t\tthis.removeNonCasterLightPasses();\n\t}\n\n\t/**\n\t * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.\n\t */\n\tprivate setBlendAndCompareModes()\n\t{\n\t\tvar forceSeparateMVP:boolean = Boolean(this._casterLightPass || this._screenPass);\n\n\t\t// caster light pass is always first if it exists, hence it uses normal blending\n\t\tif (this._casterLightPass) {\n\t\t\tthis._casterLightPass.forceSeparateMVP = forceSeparateMVP;\n\t\t\tthis._casterLightPass.setBlendMode(BlendMode.NORMAL);\n\t\t\tthis._casterLightPass.depthCompareMode = this._material.depthCompareMode;\n\t\t}\n\n\t\tif (this._nonCasterLightPasses) {\n\t\t\tvar firstAdditiveIndex:number = 0;\n\n\t\t\t// if there's no caster light pass, the first non caster light pass will be the first\n\t\t\t// and should use normal blending\n\t\t\tif (!this._casterLightPass) {\n\t\t\t\tthis._nonCasterLightPasses[0].forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._nonCasterLightPasses[0].setBlendMode(BlendMode.NORMAL);\n\t\t\t\tthis._nonCasterLightPasses[0].depthCompareMode = this._material.depthCompareMode;\n\t\t\t\tfirstAdditiveIndex = 1;\n\t\t\t}\n\n\t\t\t// all lighting passes following the first light pass should use additive blending\n\t\t\tfor (var i:number = firstAdditiveIndex; i < this._nonCasterLightPasses.length; ++i) {\n\t\t\t\tthis._nonCasterLightPasses[i].forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._nonCasterLightPasses[i].setBlendMode(BlendMode.ADD);\n\t\t\t\tthis._nonCasterLightPasses[i].depthCompareMode = ContextGLCompareMode.LESS_EQUAL;\n\t\t\t}\n\t\t}\n\n\t\tif (this._casterLightPass || this._nonCasterLightPasses) {\n\t\t\t//cannot be blended by blendmode property if multipass enabled\n\t\t\tthis._pRequiresBlending = false;\n\n\t\t\t// there are light passes, so this should be blended in\n\t\t\tif (this._screenPass) {\n\t\t\t\tthis._screenPass.mode = MethodPassMode.EFFECTS;\n\t\t\t\tthis._screenPass.depthCompareMode = ContextGLCompareMode.LESS_EQUAL;\n\t\t\t\tthis._screenPass.setBlendMode(BlendMode.LAYER);\n\t\t\t\tthis._screenPass.forceSeparateMVP = forceSeparateMVP;\n\t\t\t}\n\n\t\t} else if (this._screenPass) {\n\t\t\tthis._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\n\t\t\t// effects pass is the only pass, so it should just blend normally\n\t\t\tthis._screenPass.mode = MethodPassMode.SUPER_SHADER;\n\t\t\tthis._screenPass.depthCompareMode = this._material.depthCompareMode;\n\t\t\tthis._screenPass.preserveAlpha = this._pRequiresBlending;\n\t\t\tthis._screenPass.colorTransform = this._material.colorTransform;\n\t\t\tthis._screenPass.setBlendMode((this._material.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._material.blendMode);\n\t\t\tthis._screenPass.forceSeparateMVP = false;\n\t\t}\n\t}\n\n\tprivate initCasterLightPass()\n\t{\n\n\t\tif (this._casterLightPass == null)\n\t\t\tthis._casterLightPass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);\n\n\t\tthis._casterLightPass.lightPicker = new StaticLightPicker([this._material.shadowMethod.castingLight]);\n\t\tthis._casterLightPass.shadowMethod = this._material.shadowMethod;\n\t\tthis._casterLightPass.diffuseMethod = this._material.diffuseMethod;\n\t\tthis._casterLightPass.ambientMethod = this._material.ambientMethod;\n\t\tthis._casterLightPass.normalMethod = this._material.normalMethod;\n\t\tthis._casterLightPass.specularMethod = this._material.specularMethod;\n\t}\n\n\tprivate removeCasterLightPass()\n\t{\n\t\tthis._casterLightPass.dispose();\n\t\tthis._pRemoveScreenPass(this._casterLightPass);\n\t\tthis._casterLightPass = null;\n\t}\n\n\tprivate initNonCasterLightPasses()\n\t{\n\t\tthis.removeNonCasterLightPasses();\n\t\tvar pass:MethodPass;\n\t\tvar numDirLights:number = this._material.lightPicker.numDirectionalLights;\n\t\tvar numPointLights:number = this._material.lightPicker.numPointLights;\n\t\tvar numLightProbes:number = this._material.lightPicker.numLightProbes;\n\t\tvar dirLightOffset:number = 0;\n\t\tvar pointLightOffset:number = 0;\n\t\tvar probeOffset:number = 0;\n\n\t\tif (!this._casterLightPass) {\n\t\t\tnumDirLights += this._material.lightPicker.numCastingDirectionalLights;\n\t\t\tnumPointLights += this._material.lightPicker.numCastingPointLights;\n\t\t}\n\n\t\tthis._nonCasterLightPasses = new Array<MethodPass>();\n\n\t\twhile (dirLightOffset < numDirLights || pointLightOffset < numPointLights || probeOffset < numLightProbes) {\n\t\t\tpass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);\n\t\t\tpass.includeCasters = this._material.shadowMethod == null;\n\t\t\tpass.directionalLightsOffset = dirLightOffset;\n\t\t\tpass.pointLightsOffset = pointLightOffset;\n\t\t\tpass.lightProbesOffset = probeOffset;\n\t\t\tpass.lightPicker = this._material.lightPicker;\n\t\t\tpass.diffuseMethod = this._material.diffuseMethod;\n\t\t\tpass.ambientMethod = this._material.ambientMethod;\n\t\t\tpass.normalMethod = this._material.normalMethod;\n\t\t\tpass.specularMethod = this._material.specularMethod;\n\t\t\tthis._nonCasterLightPasses.push(pass);\n\n\t\t\tdirLightOffset += pass.numDirectionalLights;\n\t\t\tpointLightOffset += pass.numPointLights;\n\t\t\tprobeOffset += pass.numLightProbes;\n\t\t}\n\t}\n\n\tprivate removeNonCasterLightPasses()\n\t{\n\t\tif (!this._nonCasterLightPasses)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._nonCasterLightPasses.length; ++i)\n\t\t\tthis._pRemoveScreenPass(this._nonCasterLightPasses[i]);\n\n\t\tthis._nonCasterLightPasses = null;\n\t}\n\n\tprivate removeEffectPass()\n\t{\n\t\tif (this._screenPass.ambientMethod != this._material.ambientMethod)\n\t\t\tthis._screenPass.ambientMethod.dispose();\n\n\t\tif (this._screenPass.diffuseMethod != this._material.diffuseMethod)\n\t\t\tthis._screenPass.diffuseMethod.dispose();\n\n\t\tif (this._screenPass.specularMethod != this._material.specularMethod)\n\t\t\tthis._screenPass.specularMethod.dispose();\n\n\t\tif (this._screenPass.normalMethod != this._material.normalMethod)\n\t\t\tthis._screenPass.normalMethod.dispose();\n\n\t\tthis._pRemoveScreenPass(this._screenPass);\n\t\tthis._screenPass = null;\n\t}\n\n\tprivate initEffectPass()\n\t{\n\t\tif (this._screenPass == null)\n\t\t\tthis._screenPass = new MethodPass(MethodPassMode.SUPER_SHADER, this, this._material, this._renderableClass, this._stage);\n\n\t\tif (this._material.mode == MethodMaterialMode.SINGLE_PASS) {\n\t\t\tthis._screenPass.ambientMethod = this._material.ambientMethod;\n\t\t\tthis._screenPass.diffuseMethod = this._material.diffuseMethod;\n\t\t\tthis._screenPass.specularMethod = this._material.specularMethod;\n\t\t\tthis._screenPass.normalMethod = this._material.normalMethod;\n\t\t\tthis._screenPass.shadowMethod = this._material.shadowMethod;\n\t\t} else if (this._material.mode == MethodMaterialMode.MULTI_PASS) {\n\t\t\tif (this.numLights == 0) {\n\t\t\t\tthis._screenPass.ambientMethod = this._material.ambientMethod;\n\t\t\t} else {\n\t\t\t\tthis._screenPass.ambientMethod = null;\n\t\t\t}\n\n\t\t\tthis._screenPass.preserveAlpha = false;\n\t\t\tthis._screenPass.normalMethod = this._material.normalMethod;\n\t\t}\n\n\t\t//update effect methods\n\t\tvar i:number = 0;\n\t\tvar effectMethod:EffectMethodBase;\n\t\tvar len:number = Math.max(this._material.numEffectMethods, this._screenPass.numEffectMethods);\n\n\t\twhile (i < len) {\n\t\t\teffectMethod = this._material.getEffectMethodAt(i);\n\t\t\tif (effectMethod != this._screenPass.getEffectMethodAt(i)) {\n\t\t\t\tthis._screenPass.removeEffectMethodAt(i);\n\n\t\t\t\tif (effectMethod != null) {\n\t\t\t\t\tif (i < this._screenPass.numEffectMethods)\n\t\t\t\t\t\tthis._screenPass.addEffectMethodAt(effectMethod, i);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis._screenPass.addEffectMethod(effectMethod);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\t//TODO\n\t}\n}\n\nexport = RenderMethodMaterialObject;","import ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * MethodVO contains data for a given shader object for the use within a single material.\n * This allows shader methods to be shared across materials while their non-public state differs.\n */\nclass MethodVO\n{\n\tpublic useMethod:boolean = true;\n\n\tpublic method:ShadingMethodBase;\n\n\t// public register indices\n\tpublic texturesIndex:number;\n\tpublic secondaryTexturesIndex:number; // sometimes needed for composites\n\tpublic vertexConstantsIndex:number;\n\tpublic secondaryVertexConstantsIndex:number; // sometimes needed for composites\n\tpublic fragmentConstantsIndex:number;\n\tpublic secondaryFragmentConstantsIndex:number; // sometimes needed for composites\n\n\t// internal stuff for the material to know before assembling code\n\tpublic needsProjection:boolean;\n\tpublic needsView:boolean;\n\tpublic needsNormals:boolean;\n\tpublic needsTangents:boolean;\n\tpublic needsUV:boolean;\n\tpublic needsSecondaryUV:boolean;\n\tpublic needsGlobalVertexPos:boolean;\n\tpublic needsGlobalFragmentPos:boolean;\n\n\tpublic usesTexture:boolean;\n\n\t/**\n\t * Creates a new MethodVO object.\n\t */\n\tconstructor(method:ShadingMethodBase)\n\t{\n\t\tthis.method = method;\n\t}\n\n\t/**\n\t * Resets the values of the value object to their \"unused\" state.\n\t */\n\tpublic reset()\n\t{\n\t\tthis.method.iReset();\n\n\t\tthis.texturesIndex = -1;\n\t\tthis.vertexConstantsIndex = -1;\n\t\tthis.fragmentConstantsIndex = -1;\n\n\t\tthis.needsProjection = false;\n\t\tthis.needsView = false;\n\t\tthis.needsNormals = false;\n\t\tthis.needsTangents = false;\n\t\tthis.needsUV = false;\n\t\tthis.needsSecondaryUV = false;\n\t\tthis.needsGlobalVertexPos = false;\n\t\tthis.needsGlobalFragmentPos = false;\n\t}\n}\n\nexport = MethodVO;\n","import Texture2DBase\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport ContextGLMipFilter\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLMipFilter\");\nimport ContextGLTextureFilter\t\t= require(\"awayjs-stagegl/lib/base/ContextGLTextureFilter\");\nimport ContextGLWrapMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLWrapMode\");\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * AmbientBasicMethod provides the default shading method for uniform ambient lighting.\n */\nclass AmbientBasicMethod extends ShadingMethodBase\n{\n\tprivate _color:number = 0xffffff;\n\tprivate _alpha:number = 1;\n\n\tprivate _colorR:number = 1;\n\tprivate _colorG:number = 1;\n\tprivate _colorB:number = 1;\n\n\tprivate _ambient:number = 1;\n\n\t/**\n\t * Creates a new AmbientBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsUV = Boolean(shaderObject.texture != null);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tif (!methodVO.needsUV) {\n\t\t\tthis._color = shaderObject.color;\n\t\t\tthis.updateColor();\n\t\t}\n\t}\n\n\t/**\n\t * The strength of the ambient reflection of the surface.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tif (this._ambient == value)\n\t\t\treturn;\n\n\t\tthis._ambient = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * The alpha component of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tif (this._alpha == value)\n\t\t\treturn;\n\n\t\tthis._alpha = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar m:any = method;\n\t\tvar b:AmbientBasicMethod = <AmbientBasicMethod> m;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar ambientInputRegister:ShaderRegisterElement;\n\n\t\tif (methodVO.needsUV) {\n\t\t\tambientInputRegister = registerCache.getFreeTextureReg();\n\n\t\t\tmethodVO.texturesIndex = ambientInputRegister.index;\n\n\t\t\tcode += ShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedRegisters, ambientInputRegister, shaderObject.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);\n\n\t\t\tif (shaderObject.alphaThreshold > 0) {\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\t\tmethodVO.fragmentConstantsIndex = cutOffReg.index*4;\n\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\t\"kil \" + targetReg + \".w\\n\" +\n\t\t\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n\t\t\t}\n\n\t\t} else {\n\t\t\tambientInputRegister = registerCache.getFreeFragmentConstant();\n\t\t\tmethodVO.fragmentConstantsIndex = ambientInputRegister.index*4;\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + ambientInputRegister + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (methodVO.needsUV) {\n\t\t\tstage.context.setSamplerStateAt(methodVO.texturesIndex, shaderObject.repeatTextures? ContextGLWrapMode.REPEAT:ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures? ContextGLTextureFilter.LINEAR:ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping? ContextGLMipFilter.MIPLINEAR:ContextGLMipFilter.MIPNONE);\n\t\t\tstage.activateTexture(methodVO.texturesIndex, shaderObject.texture);\n\n\t\t\tif (shaderObject.alphaThreshold > 0)\n\t\t\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex] = shaderObject.alphaThreshold;\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index] = this._colorR;\n\t\t\tdata[index + 1] = this._colorG;\n\t\t\tdata[index + 2] = this._colorB;\n\t\t\tdata[index + 3] = this._alpha;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateColor()\n\t{\n\t\tthis._colorR = ((this._color >> 16) & 0xff)/0xff*this._ambient;\n\t\tthis._colorG = ((this._color >> 8) & 0xff)/0xff*this._ambient;\n\t\tthis._colorB = (this._color & 0xff)/0xff*this._ambient;\n\t}\n}\n\nexport = AmbientBasicMethod;","import CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\n\n/**\n * AmbientEnvMapMethod provides a diffuse shading method that uses a diffuse irradiance environment map to\n * approximate global lighting rather than lights.\n */\nclass AmbientEnvMapMethod extends AmbientBasicMethod\n{\n\tprivate _cubeTexture:CubeTextureBase;\n\t\n\t/**\n\t * Creates a new <code>AmbientEnvMapMethod</code> object.\n\t *\n\t * @param envMap The cube environment map to use for the ambient lighting.\n\t */\n\tconstructor(envMap:CubeTextureBase)\n\t{\n\t\tsuper();\n\t\tthis._cubeTexture = envMap;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shaderObject, methodVO);\n\n\t\tmethodVO.needsNormals = true;\n\t}\n\t\n\t/**\n\t * The cube environment map to use for the diffuse lighting.\n\t */\n\tpublic get envMap():CubeTextureBase\n\t{\n\t\treturn this._cubeTexture;\n\t}\n\t\n\tpublic set envMap(value:CubeTextureBase)\n\t{\n\t\tthis._cubeTexture = value;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tstage.activateCubeTexture(methodVO.texturesIndex, this._cubeTexture);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar ambientInputRegister:ShaderRegisterElement;\n\t\tvar cubeMapReg:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tmethodVO.texturesIndex = cubeMapReg.index;\n\t\t\n\t\tcode += ShaderCompilerHelper.getTexCubeSampleCode(targetReg, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping, sharedRegisters.normalFragment);\n\n\t\tambientInputRegister = regCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = ambientInputRegister.index;\n\t\t\n\t\tcode += \"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + ambientInputRegister + \".xyz\\n\";\n\t\t\n\t\treturn code;\n\t}\n}\n\nexport = AmbientEnvMapMethod;","import Texture2DBase\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLMipFilter\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLMipFilter\");\nimport ContextGLTextureFilter\t\t= require(\"awayjs-stagegl/lib/base/ContextGLTextureFilter\");\nimport ContextGLWrapMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLWrapMode\");\n\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\nimport LightingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\n\n/**\n * DiffuseBasicMethod provides the default shading method for Lambert (dot3) diffuse lighting.\n */\nclass DiffuseBasicMethod extends LightingMethodBase\n{\n\tprivate _multiply:boolean = true;\n\n\tpublic _pUseTexture:boolean;\n\tpublic _pTotalLightColorReg:ShaderRegisterElement;\n\tpublic _pDiffuseInputRegister:ShaderRegisterElement;\n\n\tprivate _texture:Texture2DBase;\n\tprivate _diffuseColor:number = 0xffffff;\n\tprivate _ambientColor:number = 0xffffff;\n\tprivate _diffuseR:number = 1;\n\tprivate _diffuseG:number = 1;\n\tprivate _diffuseB:number = 1;\n\tprivate _ambientR:number = 1;\n\tprivate _ambientG:number = 1;\n\tprivate _ambientB:number = 1;\n\n\tpublic _pIsFirstLight:boolean;\n\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderLightingObject):boolean\n\t{\n\t\tif (!shaderObject.numLights)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set internally if diffuse color component multiplies or replaces the ambient color\n\t */\n\tpublic get multiply():boolean\n\t{\n\t\treturn this._multiply;\n\t}\n\n\tpublic set multiply(value:boolean)\n\t{\n\t\tif (this._multiply == value)\n\t\t\treturn;\n\n\t\tthis._multiply = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsUV = this._pUseTexture;\n\t\tmethodVO.needsNormals = shaderObject.numLights > 0;\n\t}\n\n\t/**\n\t * Forces the creation of the texture.\n\t * @param stage The Stage used by the renderer\n\t */\n\tpublic generateMip(stage:Stage)\n\t{\n\t\tif (this._pUseTexture)\n\t\t\tstage.activateTexture(0, this._texture);\n\t}\n\n\t/**\n\t * The color of the diffuse reflection when not using a texture.\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this._diffuseColor;\n\t}\n\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tif (this._diffuseColor == value)\n\t\t\treturn;\n\n\t\tthis._diffuseColor = value;\n\n\t\tthis.updateDiffuse();\n\t}\n\n\t/**\n\t * The color of the ambient reflection\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this._ambientColor;\n\t}\n\n\tpublic set ambientColor(value:number)\n\t{\n\t\tif (this._ambientColor == value)\n\t\t\treturn;\n\n\t\tthis._ambientColor = value;\n\n\t\tthis.updateAmbient();\n\t}\n\n\n\t/**\n\t * The bitmapData to use to define the diffuse reflection color per texel.\n\t */\n\tpublic get texture():Texture2DBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:Texture2DBase)\n\t{\n\t\tvar b:boolean = (value != null);\n\n\t\tif (b != this._pUseTexture || (value && this._texture && (value.hasMipmaps != this._texture.hasMipmaps || value.format != this._texture.format)))\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._pUseTexture = b;\n\t\tthis._texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._texture = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar diff:DiffuseBasicMethod = <DiffuseBasicMethod> method;\n\n\t\tthis.texture = diff.texture;\n\t\tthis.multiply = diff.multiply;\n\t\tthis.diffuseColor = diff.diffuseColor;\n\t\tthis.ambientColor = diff.ambientColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._pTotalLightColorReg = null;\n\t\tthis._pDiffuseInputRegister = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tthis._pIsFirstLight = true;\n\n\t\tthis._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(this._pTotalLightColorReg, 1);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".x, \" + lightDirReg + \", \" + sharedRegisters.normalFragment + \"\\n\" +\n\t\t\t\t\"max \" + t + \".w, \" + t + \".x, \" + sharedRegisters.commons + \".y\\n\";\n\n\t\tif (shaderObject.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \", \" + t + \".w, \" + lightColReg + \"\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"tex \" + t + \", \" + sharedRegisters.normalFragment + \", \" + cubeMapReg + \" <cube,linear,miplinear>\\n\" +\n\t\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + weightRegister + \"\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tvar albedo:ShaderRegisterElement;\n\t\tvar cutOffReg:ShaderRegisterElement;\n\n\t\t// incorporate input from ambient\n\t\tif (sharedRegisters.shadowTarget)\n\t\t\tcode += this.pApplyShadow(shaderObject, methodVO, registerCache, sharedRegisters);\n\n\t\talbedo = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(albedo, 1);\n\n\t\tvar ambientColorRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = ambientColorRegister.index*4;\n\n\t\tif (this._pUseTexture) {\n\t\t\tthis._pDiffuseInputRegister = registerCache.getFreeTextureReg();\n\n\t\t\tmethodVO.texturesIndex = this._pDiffuseInputRegister.index;\n\n\t\t\tcode += ShaderCompilerHelper.getTex2DSampleCode(albedo, sharedRegisters, this._pDiffuseInputRegister, this._texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);\n\n\t\t} else {\n\t\t\tthis._pDiffuseInputRegister = registerCache.getFreeFragmentConstant();\n\n\t\t\tcode += \"mov \" + albedo + \", \" + this._pDiffuseInputRegister + \"\\n\";\n\t\t}\n\n\t\tcode += \"sat \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\"mul \" + albedo + \".xyz, \" + albedo + \", \" + this._pTotalLightColorReg + \"\\n\";\n\n\t\tif (this._multiply) {\n\t\t\tcode += \"add \" + albedo + \".xyz, \" + albedo + \", \" + ambientColorRegister + \"\\n\" +\n\t\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \", \" + albedo + \"\\n\";\n\t\t} else {\n\t\t\tcode += \"mul \" + targetReg + \".xyz, \" + targetReg + \", \" + ambientColorRegister + \"\\n\" +\n\t\t\t\t\"mul \" + this._pTotalLightColorReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \", \" + albedo + \"\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\t\tregisterCache.removeFragmentTempUsage(albedo);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Generate the code that applies the calculated shadow to the diffuse light\n\t * @param methodVO The MethodVO object for which the compilation is currently happening.\n\t * @param regCache The register cache the compiler is currently using for the register management.\n\t */\n\tpublic pApplyShadow(shaderObject:ShaderLightingObject, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + sharedRegisters.shadowTarget + \".w\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._pUseTexture) {\n\t\t\tstage.context.setSamplerStateAt(methodVO.texturesIndex, shaderObject.repeatTextures? ContextGLWrapMode.REPEAT:ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures? ContextGLTextureFilter.LINEAR : ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);\n\t\t\tstage.activateTexture(methodVO.texturesIndex, this._texture);\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index + 4] = this._diffuseR;\n\t\t\tdata[index + 5] = this._diffuseG;\n\t\t\tdata[index + 6] = this._diffuseB;\n\t\t\tdata[index + 7] = 1;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the diffuse color data used by the render state.\n\t */\n\tprivate updateDiffuse()\n\t{\n\t\tthis._diffuseR = ((this._diffuseColor >> 16) & 0xff)/0xff;\n\t\tthis._diffuseG = ((this._diffuseColor >> 8) & 0xff)/0xff;\n\t\tthis._diffuseB = (this._diffuseColor & 0xff)/0xff;\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateAmbient()\n\t{\n\t\tthis._ambientR = ((this._ambientColor >> 16) & 0xff)/0xff;\n\t\tthis._ambientG = ((this._ambientColor >> 8) & 0xff)/0xff;\n\t\tthis._ambientB = (this._ambientColor & 0xff)/0xff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderLightingObject, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\t//TODO move this to Activate (ambientR/G/B currently calc'd in render state)\n\t\tif (shaderObject.numLights > 0) {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\t\tdata[index] = shaderObject.ambientR*this._ambientR;\n\t\t\tdata[index + 1] = shaderObject.ambientG*this._ambientG;\n\t\t\tdata[index + 2] = shaderObject.ambientB*this._ambientB;\n\t\t\tdata[index + 3] = 1;\n\t\t}\n\t}\n}\n\nexport = DiffuseBasicMethod;","import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\n\n/**\n * DiffuseCelMethod provides a shading method to add diffuse cel (cartoon) shading.\n */\nclass DiffuseCelMethod extends DiffuseCompositeMethod\n{\n\tprivate _levels:number /*uint*/;\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _smoothness:number = .1;\n\n\t/**\n\t * Creates a new DiffuseCelMethod object.\n\t * @param levels The amount of shadow gradations.\n\t * @param baseMethod An optional diffuse method on which the cartoon shading is based. If omitted, DiffuseBasicMethod is used.\n\t */\n\tconstructor(levels:number /*uint*/ = 3, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.clampDiffuse(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._levels = levels;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\t\tdata[index + 1] = 1;\n\t\tdata[index + 2] = 0;\n\t}\n\n\t/**\n\t * The amount of shadow gradations.\n\t */\n\tpublic get levels():number /*uint*/\n\t{\n\t\treturn this._levels;\n\t}\n\n\tpublic set levels(value:number /*uint*/)\n\t{\n\t\tthis._levels = value;\n\t}\n\n\t/**\n\t * The smoothness of the edge between 2 shading levels.\n\t */\n\tpublic get smoothness():number\n\t{\n\t\treturn this._smoothness;\n\t}\n\n\tpublic set smoothness(value:number)\n\t{\n\t\tthis._smoothness = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index] = this._levels;\n\t\tdata[index + 3] = this._smoothness;\n\t}\n\n\t/**\n\t * Snaps the diffuse shading of the wrapped method to one of the levels.\n\t * @param vo The MethodVO used to compile the current shader.\n\t * @param t The register containing the diffuse strength in the \"w\" component.\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared register data for this shader.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate clampDiffuse(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + this._dataReg + \".x\\n\" +\n\t\t\t\"frc \" + targetReg + \".z, \" + targetReg + \".w\\n\" +\n\t\t\t\"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + targetReg + \".z\\n\" +\n\t\t\t\"mov \" + targetReg + \".x, \" + this._dataReg + \".x\\n\" +\n\t\t\t\"sub \" + targetReg + \".x, \" + targetReg + \".x, \" + this._dataReg + \".y\\n\" +\n\t\t\t\"rcp \" + targetReg + \".x,\" + targetReg + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".y, \" + targetReg + \".x\\n\" +\n\n\t\t\t// previous clamped strength\n\t\t\t\"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + targetReg + \".x\\n\" +\n\n\t\t\t// fract/epsilon (so 0 - epsilon will become 0 - 1)\n\t\t\t\"div \" + targetReg + \".z, \" + targetReg + \".z, \" + this._dataReg + \".w\\n\" +\n\t\t\t\"sat \" + targetReg + \".z, \" + targetReg + \".z\\n\" +\n\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".z\\n\" +\n\t\t\t// 1-z\n\t\t\t\"sub \" + targetReg + \".z, \" + this._dataReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"mul \" + targetReg + \".y, \" + targetReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\" +\n\t\t\t\"sat \" + targetReg + \".w, \" + targetReg + \".w\\n\";\n\t}\n}\n\nexport = DiffuseCelMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseCompositeMethod provides a base class for diffuse methods that wrap a diffuse method to alter the\n * calculated diffuse reflection strength.\n */\nclass DiffuseCompositeMethod extends DiffuseBasicMethod\n{\n\tpublic pBaseMethod:DiffuseBasicMethod;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new <code>DiffuseCompositeMethod</code> object.\n\t *\n\t * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature clampDiffuse(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the diffuse strength.\n\t * @param baseMethod The base diffuse method on which this method's shading is based.\n\t */\n\tconstructor(modulateMethod:(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper();\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis.pBaseMethod = baseMethod || new DiffuseBasicMethod();\n\t\tthis.pBaseMethod._iModulateMethod = modulateMethod;\n\t\tthis.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * The base diffuse method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this.pBaseMethod;\n\t}\n\n\tpublic set baseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this.pBaseMethod == value)\n\t\t\treturn;\n\n\t\tthis.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.pBaseMethod = value;\n\t\tthis.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis.pBaseMethod.iInitVO(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis.pBaseMethod.iInitConstants(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.pBaseMethod.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get texture():Texture2DBase\n\t{\n\t\treturn this.pBaseMethod.texture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set texture(value:Texture2DBase)\n\t{\n\t\tthis.pBaseMethod.texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this.pBaseMethod.diffuseColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tthis.pBaseMethod.diffuseColor = value;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this.pBaseMethod.ambientColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set ambientColor(value:number)\n\t{\n\t\tthis.pBaseMethod.ambientColor = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this.pBaseMethod.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t\tthis._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this.pBaseMethod.iGetFragmentCodePerProbe(shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);\n\t\tthis._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis.pBaseMethod.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderLightingObject, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tthis.pBaseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis.pBaseMethod.iDeactivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis.pBaseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis.pBaseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = DiffuseCompositeMethod;","import ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseDepthMethod provides a debug method to visualise depth maps\n */\nclass DiffuseDepthMethod extends DiffuseBasicMethod\n{\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = 1.0;\n\t\tdata[index + 1] = 1/255.0;\n\t\tdata[index + 2] = 1/65025.0;\n\t\tdata[index + 3] = 1/16581375.0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement;\n\t\tvar decReg:ShaderRegisterElement;\n\n\t\tif (!this._pUseTexture)\n\t\t\tthrow new Error(\"DiffuseDepthMethod requires texture!\");\n\n\t\t// incorporate input from ambient\n\t\tif (shaderObject.numLights > 0) {\n\t\t\tif (sharedRegisters.shadowTarget)\n\t\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + sharedRegisters.shadowTarget + \".w\\n\";\n\t\t\tcode += \"add \" + targetReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\t\"sat \" + targetReg + \".xyz, \" + targetReg + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\t\t}\n\n\t\ttemp = shaderObject.numLights > 0? registerCache.getFreeFragmentVectorTemp():targetReg;\n\n\t\tthis._pDiffuseInputRegister = registerCache.getFreeTextureReg();\n\t\tmethodVO.texturesIndex = this._pDiffuseInputRegister.index;\n\t\tdecReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\t\tcode += ShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, this._pDiffuseInputRegister, this.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping) +\n\t\t\t\"dp4 \" + temp + \".x, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\"mov \" + temp + \".yz, \" + temp + \".xx\t\t\t\\n\" +\n\t\t\t\"mov \" + temp + \".w, \" + decReg + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".xyz, \" + decReg + \".xxx, \" + temp + \".xyz\\n\";\n\n\t\tif (shaderObject.numLights == 0)\n\t\t\treturn code;\n\n\t\tcode += \"mul \" + targetReg + \".xyz, \" + temp + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\"mov \" + targetReg + \".w, \" + temp + \".w\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseDepthMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseGradientMethod is an alternative to DiffuseBasicMethod in which the shading can be modulated with a gradient\n * to introduce color-tinted shading as opposed to the single-channel diffuse strength. This can be used as a crude\n * approximation to subsurface scattering (for instance, the mid-range shading for skin can be tinted red to similate\n * scattered light within the skin attributing to the final colour)\n */\nclass DiffuseGradientMethod extends DiffuseBasicMethod\n{\n\tprivate _gradientTextureRegister:ShaderRegisterElement;\n\tprivate _gradient:Texture2DBase;\n\n\t/**\n\t * Creates a new DiffuseGradientMethod object.\n\t * @param gradient A texture that contains the light colour based on the angle. This can be used to change\n\t * the light colour due to subsurface scattering when the surface faces away from the light.\n\t */\n\tconstructor(gradient:Texture2DBase)\n\t{\n\t\tsuper();\n\n\t\tthis._gradient = gradient;\n\t}\n\n\t/**\n\t * A texture that contains the light colour based on the angle. This can be used to change the light colour\n\t * due to subsurface scattering when the surface faces away from the light.\n\t */\n\tpublic get gradient():Texture2DBase\n\t{\n\t\treturn this._gradient;\n\t}\n\n\tpublic set gradient(value:Texture2DBase)\n\t{\n\t\tif (value.hasMipmaps != this._gradient.hasMipmaps || value.format != this._gradient.format)\n\t\t\tthis.iInvalidateShaderProgram();\n\t\tthis._gradient = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._gradientTextureRegister = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t\tthis._pIsFirstLight = true;\n\n\t\tif (shaderObject.numLights > 0) {\n\t\t\tthis._gradientTextureRegister = registerCache.getFreeTextureReg();\n\t\t\tmethodVO.secondaryTexturesIndex = this._gradientTextureRegister.index;\n\t\t}\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight)\n\t\t\tt = this._pTotalLightColorReg;\n\t\telse {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".w, \" + lightDirReg + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"mul \" + t + \".w, \" + t + \".w, \" + sharedRegisters.commons + \".x\\n\" +\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + sharedRegisters.commons + \".x\\n\" +\n\t\t\t\"mul \" + t + \".xyz, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += ShaderCompilerHelper.getTex2DSampleCode(t, sharedRegisters, this._gradientTextureRegister, this._gradient, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, t, \"clamp\") +\n\t\t\t//\t\t\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + t + \".w\\n\" +\n\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + lightColReg + \".xyz\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic pApplyShadow(shaderObject:ShaderLightingObject, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar t:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\treturn \"mov \" + t + \", \" + sharedRegisters.shadowTarget + \".wwww\\n\" +\n\t\t\tShaderCompilerHelper.getTex2DSampleCode(t, sharedRegisters, this._gradientTextureRegister, this._gradient, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, t, \"clamp\") +\n\t\t\t\"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tstage.activateTexture(methodVO.secondaryTexturesIndex, this._gradient);\n\t}\n}\n\nexport = DiffuseGradientMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\n\n/**\n * DiffuseLightMapMethod provides a diffuse shading method that uses a light map to modulate the calculated diffuse\n * lighting. It is different from EffectLightMapMethod in that the latter modulates the entire calculated pixel color, rather\n * than only the diffuse lighting value.\n */\nclass DiffuseLightMapMethod extends DiffuseCompositeMethod\n{\n\t/**\n\t * Indicates the light map should be multiplied with the calculated shading result.\n\t * This can be used to add pre-calculated shadows or occlusion.\n\t */\n\tpublic static MULTIPLY:string = \"multiply\";\n\n\t/**\n\t * Indicates the light map should be added into the calculated shading result.\n\t * This can be used to add pre-calculated lighting or global illumination.\n\t */\n\tpublic static ADD:string = \"add\";\n\n\tprivate _lightMapTexture:Texture2DBase;\n\tprivate _blendMode:string;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new DiffuseLightMapMethod method.\n\t *\n\t * @param lightMap The texture containing the light map.\n\t * @param blendMode The blend mode with which the light map should be applied to the lighting result.\n\t * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.\n\t * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.\n\t */\n\tconstructor(lightMap:Texture2DBase, blendMode:string = \"multiply\", useSecondaryUV:boolean = false, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t\tthis._lightMapTexture = lightMap;\n\t\tthis.blendMode = blendMode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsSecondaryUV = this._useSecondaryUV;\n\t\tmethodVO.needsUV = !this._useSecondaryUV;\n\t}\n\n\t/**\n\t * The blend mode with which the light map should be applied to the lighting result.\n\t *\n\t * @see DiffuseLightMapMethod.ADD\n\t * @see DiffuseLightMapMethod.MULTIPLY\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (value != DiffuseLightMapMethod.ADD && value != DiffuseLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture containing the light map data.\n\t */\n\tpublic get lightMapTexture():Texture2DBase\n\t{\n\t\treturn this._lightMapTexture;\n\t}\n\n\tpublic set lightMapTexture(value:Texture2DBase)\n\t{\n\t\tthis._lightMapTexture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tstage.activateTexture(methodVO.secondaryTexturesIndex, this._lightMapTexture);\n\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar lightMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tmethodVO.secondaryTexturesIndex = lightMapReg.index;\n\n\t\tcode = ShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, lightMapReg, this._lightMapTexture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, sharedRegisters.secondaryUVVarying);\n\n\t\tswitch (this._blendMode) {\n\t\t\tcase DiffuseLightMapMethod.MULTIPLY:\n\t\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase DiffuseLightMapMethod.ADD:\n\t\t\t\tcode += \"add \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcode += super.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseLightMapMethod;","import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\nimport SingleObjectDepthPass\t\t\t= require(\"awayjs-methodmaterials/lib/passes/SingleObjectDepthPass\");\n\n/**\n * DiffuseSubSurfaceMethod provides a depth map-based diffuse shading method that mimics the scattering of\n * light inside translucent surfaces. It allows light to shine through an object and to soften the diffuse shading.\n * It can be used for candle wax, ice, skin, ...\n */\nclass DiffuseSubSurfaceMethod extends DiffuseCompositeMethod\n{\n\tprivate _depthPass:SingleObjectDepthPass;\n\tprivate _lightProjVarying:ShaderRegisterElement;\n\tprivate _propReg:ShaderRegisterElement;\n\tprivate _scattering:number;\n\tprivate _translucency:number = 1;\n\tprivate _lightColorReg:ShaderRegisterElement;\n\tprivate _scatterColor:number /*uint*/ = 0xffffff;\n\tprivate _colorReg:ShaderRegisterElement;\n\tprivate _decReg:ShaderRegisterElement;\n\tprivate _scatterR:number = 1.0;\n\tprivate _scatterG:number = 1.0;\n\tprivate _scatterB:number = 1.0;\n\tprivate _targetReg:ShaderRegisterElement;\n\t\n\t/**\n\t * Creates a new <code>DiffuseSubSurfaceMethod</code> object.\n\t *\n\t * @param depthMapSize The size of the depth map used.\n\t * @param depthMapOffset The amount by which the rendered object will be inflated, to prevent depth map rounding errors.\n\t * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.\n\t */\n\tconstructor(depthMapSize:number /*int*/ = 512, depthMapOffset:number = 15, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.pBaseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.scatterLight(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\t//this._passes = new Array<MaterialPassGLBase>();\n\t\t//this._depthPass = new SingleObjectDepthPass();\n\t\t//this._depthPass.textureSize = depthMapSize;\n\t\t//this._depthPass.polyOffset = depthMapOffset;\n\t\t//this._passes.push(this._depthPass);\n\t\tthis._scattering = 0.2;\n\t\tthis._translucency = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tvar data:Array<number> = shaderObject.vertexConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryVertexConstantsIndex;\n\t\tdata[index] = .5;\n\t\tdata[index + 1] = -.5;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t\t\n\t\tdata = shaderObject.fragmentConstantData;\n\t\tindex = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index + 3] = 1.0;\n\t\tdata[index + 4] = 1.0;\n\t\tdata[index + 5] = 1/255;\n\t\tdata[index + 6] = 1/65025;\n\t\tdata[index + 7] = 1/16581375;\n\t\tdata[index + 10] = .5;\n\t\tdata[index + 11] = -.1;\n\t}\n\t\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._lightProjVarying = null;\n\t\tthis._propReg = null;\n\t\tthis._lightColorReg = null;\n\t\tthis._colorReg = null;\n\t\tthis._decReg = null;\n\t\tthis._targetReg = null;\n\t}\n\t\n\t/**\n\t * The amount by which the light scatters. It can be used to set the translucent surface's thickness. Use low\n\t * values for skin.\n\t */\n\tpublic get scattering():number\n\t{\n\t\treturn this._scattering;\n\t}\n\t\n\tpublic set scattering(value:number)\n\t{\n\t\tthis._scattering = value;\n\t}\n\t\n\t/**\n\t * The translucency of the object.\n\t */\n\tpublic get translucency():number\n\t{\n\t\treturn this._translucency;\n\t}\n\t\n\tpublic set translucency(value:number)\n\t{\n\t\tthis._translucency = value;\n\t}\n\t\n\t/**\n\t * The colour of the \"insides\" of the object, ie: the colour the light becomes after leaving the object.\n\t */\n\tpublic get scatterColor():number /*uint*/\n\t{\n\t\treturn this._scatterColor;\n\t}\n\t\n\tpublic set scatterColor(scatterColor:number /*uint*/)\n\t{\n\t\tthis._scatterColor = scatterColor;\n\t\tthis._scatterR = ((scatterColor >> 16) & 0xff)/0xff;\n\t\tthis._scatterG = ((scatterColor >> 8) & 0xff)/0xff;\n\t\tthis._scatterB = (scatterColor & 0xff)/0xff;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t\tvar lightProjection:ShaderRegisterElement;\n\t\tvar toTexRegister:ShaderRegisterElement;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\n\t\ttoTexRegister = registerCache.getFreeVertexConstant();\n\t\tmethodVO.secondaryVertexConstantsIndex = toTexRegister.index*4;\n\n\t\tthis._lightProjVarying = registerCache.getFreeVarying();\n\t\tlightProjection = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\t\n\t\tcode += \"m44 \" + temp + \", vt0, \" + lightProjection + \"\\n\" +\n\t\t\t\"div \" + temp + \".xyz, \" + temp + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xy, \" + temp + \".xy, \" + toTexRegister + \".xy\\n\" +\n\t\t\t\"add \" + temp + \".xy, \" + temp + \".xy, \" + toTexRegister + \".xx\\n\" +\n\t\t\t\"mov \" + this._lightProjVarying + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\"mov \" + this._lightProjVarying + \".w, va0.w\\n\";\n\t\t\n\t\treturn code;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._colorReg = registerCache.getFreeFragmentConstant();\n\t\tthis._decReg = registerCache.getFreeFragmentConstant();\n\t\tthis._propReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._colorReg.index*4;\n\t\t\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pIsFirstLight = true;\n\t\tthis._lightColorReg = lightColReg;\n\t\treturn super.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\t\n\t\tcode += \"mul \" + temp + \".xyz, \" + this._lightColorReg + \".xyz, \" + this._targetReg + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".xyz, \" + this._colorReg + \".xyz\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t\n\t\tif (this._targetReg != sharedRegisters.viewDirFragment)\n\t\t\tregisterCache.removeFragmentTempUsage(targetReg);\n\t\t\n\t\treturn code;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\t\t\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._scatterR;\n\t\tdata[index + 1] = this._scatterG;\n\t\tdata[index + 2] = this._scatterB;\n\t\tdata[index + 8] = this._scattering;\n\t\tdata[index + 9] = this._translucency;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tstage.activateTexture(methodVO.secondaryTexturesIndex, this._depthPass._iGetDepthMap(renderable));\n\n\t\tthis._depthPass._iGetProjection(renderable).copyRawDataTo(shaderObject.vertexConstantData, methodVO.secondaryVertexConstantsIndex + 4, true);\n\t}\n\t\n\t/**\n\t * Generates the code for this method\n\t */\n\tprivate scatterLight(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// only scatter first light\n\t\tif (!this._pIsFirstLight)\n\t\t\treturn \"\";\n\n\t\tthis._pIsFirstLight = false;\n\n\t\tvar code:string = \"\";\n\t\tvar depthReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\n\t\tif (sharedRegisters.viewDirFragment) {\n\t\t\tthis._targetReg = sharedRegisters.viewDirFragment;\n\t\t} else {\n\t\t\tthis._targetReg = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(this._targetReg, 1);\n\t\t}\n\n\t\tmethodVO.secondaryTexturesIndex = depthReg.index;\n\t\t\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tcode += \"tex \" + temp + \", \" + this._lightProjVarying + \", \" + depthReg + \" <2d,nearest,clamp>\\n\" +\n\t\t\t// reencode RGBA\n\t\t\t\"dp4 \" + targetReg + \".z, \" + temp + \", \" + this._decReg + \"\\n\";\n\t\t// currentDistanceToLight - closestDistanceToLight\n\t\tcode += \"sub \" + targetReg + \".z, \" + this._lightProjVarying + \".z, \" + targetReg + \".z\\n\" +\n\t\t\t\n\t\t\t\"sub \" + targetReg + \".z, \" + this._propReg + \".x, \" + targetReg + \".z\\n\" +\n\t\t\t\"mul \" + targetReg + \".z, \" + this._propReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"sat \" + targetReg + \".z, \" + targetReg + \".z\\n\" +\n\t\t\t\n\t\t\t// targetReg.x contains dot(lightDir, normal)\n\t\t\t// modulate according to incident light angle (scatter = scatter*(-.5*dot(light, normal) + .5)\n\t\t\t\"neg \" + targetReg + \".y, \" + targetReg + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".y, \" + targetReg + \".y, \" + this._propReg + \".z\\n\" +\n\t\t\t\"add \" + targetReg + \".y, \" + targetReg + \".y, \" + this._propReg + \".z\\n\" +\n\t\t\t\"mul \" + this._targetReg + \".w, \" + targetReg + \".z, \" + targetReg + \".y\\n\" +\n\t\t\t\n\t\t\t// blend diffuse: d' = (1-s)*d + s*1\n\t\t\t\"sub \" + targetReg + \".y, \" + this._colorReg + \".w, \" + this._targetReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\t\t\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseSubSurfaceMethod;","import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseWrapMethod is an alternative to DiffuseBasicMethod in which the light is allowed to be \"wrapped around\" the normally dark area, to some extent.\n * It can be used as a crude approximation to Oren-Nayar or simple subsurface scattering.\n */\nclass DiffuseWrapMethod extends DiffuseBasicMethod\n{\n\tprivate _wrapDataRegister:ShaderRegisterElement;\n\tprivate _wrapFactor:number;\n\n\t/**\n\t * Creates a new DiffuseWrapMethod object.\n\t * @param wrapFactor A factor to indicate the amount by which the light is allowed to wrap\n\t */\n\tconstructor(wrapFactor:number = .5)\n\t{\n\t\tsuper();\n\n\t\tthis.wrapFactor = wrapFactor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._wrapDataRegister = null;\n\t}\n\n\t/**\n\t * A factor to indicate the amount by which the light is allowed to wrap.\n\t */\n\tpublic get wrapFactor():number\n\t{\n\t\treturn this._wrapFactor;\n\t}\n\n\tpublic set wrapFactor(value:number)\n\t{\n\t\tthis._wrapFactor = value;\n\t\tthis._wrapFactor = 1/(value + 1);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t\tthis._pIsFirstLight = true;\n\t\tthis._wrapDataRegister = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._wrapDataRegister.index*4;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".x, \" + lightDirReg + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"add \" + t + \".y, \" + t + \".x, \" + this._wrapDataRegister + \".x\\n\" +\n\t\t\t\"mul \" + t + \".y, \" + t + \".y, \" + this._wrapDataRegister + \".y\\n\" +\n\t\t\t\"sat \" + t + \".w, \" + t + \".y\\n\" +\n\t\t\t\"mul \" + t + \".xz, \" + t + \".w, \" + lightDirReg + \".wz\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, lightDirReg, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \", \" + t + \".x, \" + lightColReg + \"\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._wrapFactor;\n\t\tdata[index + 1] = 1/(this._wrapFactor + 1);\n\t}\n}\n\nexport = DiffuseWrapMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectAlphaMaskMethod allows the use of an additional texture to specify the alpha value of the material. When used\n * with the secondary uv set, it allows for a tiled main texture with independently varying alpha (useful for water\n * etc).\n */\nclass EffectAlphaMaskMethod extends EffectMethodBase\n{\n\tprivate _texture:Texture2DBase;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new EffectAlphaMaskMethod object.\n\t *\n\t * @param texture The texture to use as the alpha mask.\n\t * @param useSecondaryUV Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently.\n\t */\n\tconstructor(texture:Texture2DBase, useSecondaryUV:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tthis._texture = texture;\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsSecondaryUV = this._useSecondaryUV;\n\t\tmethodVO.needsUV = !this._useSecondaryUV;\n\t}\n\n\t/**\n\t * Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently, for\n\t * instance to tile the main texture and normal map while providing untiled alpha, for example to define the\n\t * transparency over a tiled water surface.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\t\tthis._useSecondaryUV = value;\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture to use as the alpha mask.\n\t */\n\tpublic get texture():Texture2DBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:Texture2DBase)\n\t{\n\t\tthis._texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tstage.activateTexture(methodVO.texturesIndex, this._texture);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar textureReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar uvReg:ShaderRegisterElement = this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying;\n\t\tmethodVO.texturesIndex = textureReg.index;\n\n\t\treturn ShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, textureReg, this._texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, uvReg) +\n\t\t\t\"mul \" + targetReg + \", \" + targetReg + \", \" + temp + \".x\\n\";\n\t}\n}\n\nexport = EffectAlphaMaskMethod;","import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectColorMatrixMethod provides a shading method that changes the colour of a material analogous to a ColorMatrixFilter.\n */\nclass EffectColorMatrixMethod extends EffectMethodBase\n{\n\tprivate _matrix:Array<number>;\n\n\t/**\n\t * Creates a new EffectColorTransformMethod.\n\t *\n\t * @param matrix An array of 20 items for 4 x 5 color transform.\n\t */\n\tconstructor(matrix:Array<number>)\n\t{\n\t\tsuper();\n\n\t\tif (matrix.length != 20)\n\t\t\tthrow new Error(\"Matrix length must be 20!\");\n\n\t\tthis._matrix = matrix;\n\t}\n\n\t/**\n\t * The 4 x 5 matrix to transform the color of the material.\n\t */\n\tpublic get colorMatrix():Array<number>\n\t{\n\t\treturn this._matrix;\n\t}\n\n\tpublic set colorMatrix(value:Array<number>)\n\t{\n\t\tthis._matrix = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar colorMultReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\n\t\tvar colorOffsetReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = colorMultReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode += \"m44 \" + temp + \", \" + targetReg + \", \" + colorMultReg + \"\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + temp + \", \" + colorOffsetReg + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar matrix:Array<number> = this._matrix;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\n\t\t// r\n\t\tdata[index] = matrix[0];\n\t\tdata[index + 1] = matrix[1];\n\t\tdata[index + 2] = matrix[2];\n\t\tdata[index + 3] = matrix[3];\n\n\t\t// g\n\t\tdata[index + 4] = matrix[5];\n\t\tdata[index + 5] = matrix[6];\n\t\tdata[index + 6] = matrix[7];\n\t\tdata[index + 7] = matrix[8];\n\n\t\t// b\n\t\tdata[index + 8] = matrix[10];\n\t\tdata[index + 9] = matrix[11];\n\t\tdata[index + 10] = matrix[12];\n\t\tdata[index + 11] = matrix[13];\n\n\t\t// a\n\t\tdata[index + 12] = matrix[15];\n\t\tdata[index + 13] = matrix[16];\n\t\tdata[index + 14] = matrix[17];\n\t\tdata[index + 15] = matrix[18];\n\n\t\t// rgba offset\n\t\tdata[index + 16] = matrix[4];\n\t\tdata[index + 17] = matrix[9];\n\t\tdata[index + 18] = matrix[14];\n\t\tdata[index + 19] = matrix[19];\n\t}\n}\n\nexport = EffectColorMatrixMethod;","import ColorTransform\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectColorTransformMethod provides a shading method that changes the colour of a material analogous to a\n * ColorTransform object.\n */\nclass EffectColorTransformMethod extends EffectMethodBase\n{\n\tprivate _colorTransform:ColorTransform;\n\n\t/**\n\t * Creates a new EffectColorTransformMethod.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * The ColorTransform object to transform the colour of the material with.\n\t */\n\tpublic get colorTransform():ColorTransform\n\t{\n\t\treturn this._colorTransform;\n\t}\n\n\tpublic set colorTransform(value:ColorTransform)\n\t{\n\t\tthis._colorTransform = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar colorMultReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar colorOffsReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = colorMultReg.index*4;\n\n\t\t//TODO: AGAL <> GLSL\n\n\t\tcode += \"mul \" + targetReg + \", \" + targetReg + \", \" + colorMultReg + \"\\n\" + \"add \" + targetReg + \", \" + targetReg + \", \" + colorOffsReg + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar inv:number = 1/0xff;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\n\t\tdata[index] = this._colorTransform.redMultiplier;\n\t\tdata[index + 1] = this._colorTransform.greenMultiplier;\n\t\tdata[index + 2] = this._colorTransform.blueMultiplier;\n\t\tdata[index + 3] = this._colorTransform.alphaMultiplier;\n\t\tdata[index + 4] = this._colorTransform.redOffset*inv;\n\t\tdata[index + 5] = this._colorTransform.greenOffset*inv;\n\t\tdata[index + 6] = this._colorTransform.blueOffset*inv;\n\t\tdata[index + 7] = this._colorTransform.alphaOffset*inv;\n\n\t}\n}\n\nexport = EffectColorTransformMethod;","import CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectEnvMapMethod provides a material method to perform reflection mapping using cube maps.\n */\nclass EffectEnvMapMethod extends EffectMethodBase\n{\n\tprivate _cubeTexture:CubeTextureBase;\n\tprivate _alpha:number;\n\tprivate _mask:Texture2DBase;\n\n\t/**\n\t * Creates an EffectEnvMapMethod object.\n\t * @param envMap The environment map containing the reflected scene.\n\t * @param alpha The reflectivity of the surface.\n\t */\n\tconstructor(envMap:CubeTextureBase, alpha:number = 1)\n\t{\n\t\tsuper();\n\t\tthis._cubeTexture = envMap;\n\t\tthis._alpha = alpha;\n\n\t}\n\n\t/**\n\t * An optional texture to modulate the reflectivity of the surface.\n\t */\n\tpublic get mask():Texture2DBase\n\t{\n\t\treturn this._mask;\n\t}\n\n\tpublic set mask(value:Texture2DBase)\n\t{\n\t\tif (value != this._mask || (value && this._mask && (value.hasMipmaps != this._mask.hasMipmaps || value.format != this._mask.format)))\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._mask = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\t\tmethodVO.needsUV = this._mask != null;\n\t}\n\n\t/**\n\t * The cubic environment map containing the reflected scene.\n\t */\n\tpublic get envMap():CubeTextureBase\n\t{\n\t\treturn this._cubeTexture;\n\t}\n\n\tpublic set envMap(value:CubeTextureBase)\n\t{\n\t\tthis._cubeTexture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t}\n\n\t/**\n\t * The reflectivity of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex] = this._alpha;\n\n\t\tstage.activateCubeTexture(methodVO.texturesIndex, this._cubeTexture);\n\t\tif (this._mask)\n\t\t\tstage.activateTexture(methodVO.texturesIndex + 1, this._mask);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\t\tvar cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\n\t\tmethodVO.texturesIndex = cubeMapReg.index;\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t// r = I - 2(I.N)*N\n\t\tcode += \"dp3 \" + temp + \".w, \" + sharedRegisters.viewDirFragment + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\t\"add \" + temp + \".w, \" + temp + \".w, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + sharedRegisters.normalFragment + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".xyz, \" + temp + \".xyz, \" + sharedRegisters.viewDirFragment + \".xyz\\n\" +\n\t\t\tShaderCompilerHelper.getTexCubeSampleCode(temp, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping, temp) +\n\t\t\t\t\"sub \" + temp2 + \".w, \" + temp + \".w, fc0.x\\n\" + // -.5\n\t\t\t\t\"kil \" + temp2 + \".w\\n\" +\t// used for real time reflection mapping - if alpha is not 1 (mock texture) kil output\n\t\t\t\t\"sub \" + temp + \", \" + temp + \", \" + targetReg + \"\\n\";\n\n\t\tif (this._mask)\n\t\t\tcode += ShaderCompilerHelper.getTex2DSampleCode(temp2, sharedRegisters, registerCache.getFreeTextureReg(), this._mask, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping) +\n\t\t\t\t\"mul \" + temp + \", \" + temp2 + \", \" + temp + \"\\n\";\n\n\t\tcode += \"mul \" + temp + \", \" + temp + \", \" + dataRegister + \".x\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectEnvMapMethod;","import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectFogMethod provides a method to add distance-based fog to a material.\n */\nclass EffectFogMethod extends EffectMethodBase\n{\n\tprivate _minDistance:number = 0;\n\tprivate _maxDistance:number = 1000;\n\tprivate _fogColor:number /*uint*/;\n\tprivate _fogR:number;\n\tprivate _fogG:number;\n\tprivate _fogB:number;\n\n\t/**\n\t * Creates a new EffectFogMethod object.\n\t * @param minDistance The distance from which the fog starts appearing.\n\t * @param maxDistance The distance at which the fog is densest.\n\t * @param fogColor The colour of the fog.\n\t */\n\tconstructor(minDistance:number, maxDistance:number, fogColor:number /*uint*/ = 0x808080)\n\t{\n\t\tsuper();\n\t\tthis.minDistance = minDistance;\n\t\tthis.maxDistance = maxDistance;\n\t\tthis.fogColor = fogColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index + 3] = 1;\n\t\tdata[index + 6] = 0;\n\t\tdata[index + 7] = 0;\n\t}\n\n\t/**\n\t * The distance from which the fog starts appearing.\n\t */\n\tpublic get minDistance():number\n\t{\n\t\treturn this._minDistance;\n\t}\n\n\tpublic set minDistance(value:number)\n\t{\n\t\tthis._minDistance = value;\n\t}\n\n\t/**\n\t * The distance at which the fog is densest.\n\t */\n\tpublic get maxDistance():number\n\t{\n\t\treturn this._maxDistance;\n\t}\n\n\tpublic set maxDistance(value:number)\n\t{\n\t\tthis._maxDistance = value;\n\t}\n\n\t/**\n\t * The colour of the fog.\n\t */\n\tpublic get fogColor():number /*uint*/\n\t{\n\t\treturn this._fogColor;\n\t}\n\n\tpublic set fogColor(value:number/*uint*/)\n\t{\n\t\tthis._fogColor = value;\n\t\tthis._fogR = ((value >> 16) & 0xff)/0xff;\n\t\tthis._fogG = ((value >> 8) & 0xff)/0xff;\n\t\tthis._fogB = (value & 0xff)/0xff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = this._fogR;\n\t\tdata[index + 1] = this._fogG;\n\t\tdata[index + 2] = this._fogB;\n\t\tdata[index + 4] = this._minDistance;\n\t\tdata[index + 5] = 1/(this._maxDistance - this._minDistance);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar fogColor:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar fogData:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\t\tmethodVO.fragmentConstantsIndex = fogColor.index*4;\n\n\t\tcode += \"sub \" + temp2 + \".w, \" + sharedRegisters.projectionFragment + \".z, \" + fogData + \".x\\n\" +\n\t\t\t\t\"mul \" + temp2 + \".w, \" + temp2 + \".w, \" + fogData + \".y\\n\" +\n\t\t\t\t\"sat \" + temp2 + \".w, \" + temp2 + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \", \" + fogColor + \", \" + targetReg + \"\\n\" + // (fogColor- col)\n\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + temp2 + \".w\\n\" + // (fogColor- col)*fogRatio\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\"; // fogRatio*(fogColor- col) + col\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectFogMethod;","import CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectFresnelEnvMapMethod provides a method to add fresnel-based reflectivity to an object using cube maps, which gets\n * stronger as the viewing angle becomes more grazing.\n */\nclass EffectFresnelEnvMapMethod extends EffectMethodBase\n{\n\tprivate _cubeTexture:CubeTextureBase;\n\tprivate _fresnelPower:number = 5;\n\tprivate _normalReflectance:number = 0;\n\tprivate _alpha:number;\n\tprivate _mask:Texture2DBase;\n\n\t/**\n\t * Creates a new <code>EffectFresnelEnvMapMethod</code> object.\n\t *\n\t * @param envMap The environment map containing the reflected scene.\n\t * @param alpha The reflectivity of the material.\n\t */\n\tconstructor(envMap:CubeTextureBase, alpha:number = 1)\n\t{\n\t\tsuper();\n\n\t\tthis._cubeTexture = envMap;\n\t\tthis._alpha = alpha;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\t\tmethodVO.needsUV = this._mask != null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 3] = 1;\n\t}\n\n\t/**\n\t * An optional texture to modulate the reflectivity of the surface.\n\t */\n\tpublic get mask():Texture2DBase\n\t{\n\t\treturn this._mask;\n\t}\n\n\tpublic set mask(value:Texture2DBase)\n\t{\n\t\tif (Boolean(value) != Boolean(this._mask) ||\n\t\t\t(value && this._mask && (value.hasMipmaps != this._mask.hasMipmaps || value.format != this._mask.format))) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t}\n\t\tthis._mask = value;\n\t}\n\n\t/**\n\t * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.\n\t */\n\tpublic get fresnelPower():number\n\t{\n\t\treturn this._fresnelPower;\n\t}\n\n\tpublic set fresnelPower(value:number)\n\t{\n\t\tthis._fresnelPower = value;\n\t}\n\n\t/**\n\t * The cubic environment map containing the reflected scene.\n\t */\n\tpublic get envMap():CubeTextureBase\n\t{\n\t\treturn this._cubeTexture;\n\t}\n\n\tpublic set envMap(value:CubeTextureBase)\n\t{\n\t\tthis._cubeTexture = value;\n\t}\n\n\t/**\n\t * The reflectivity of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.\n\t */\n\tpublic get normalReflectance():number\n\t{\n\t\treturn this._normalReflectance;\n\t}\n\n\tpublic set normalReflectance(value:number)\n\t{\n\t\tthis._normalReflectance = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = this._alpha;\n\t\tdata[index + 1] = this._normalReflectance;\n\t\tdata[index + 2] = this._fresnelPower;\n\n\t\tstage.activateCubeTexture(methodVO.texturesIndex, this._cubeTexture);\n\n\t\tif (this._mask)\n\t\t\tstage.activateTexture(methodVO.texturesIndex + 1, this._mask);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\t\tvar cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\tmethodVO.texturesIndex = cubeMapReg.index;\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t// r = V - 2(V.N)*N\n\t\tcode += \"dp3 \" + temp + \".w, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"add \" + temp + \".w, \" + temp + \".w, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + normalReg + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".xyz, \" + temp + \".xyz, \" + viewDirReg + \".xyz\\n\" +\n\t\t\tShaderCompilerHelper.getTexCubeSampleCode(temp, cubeMapReg, this._cubeTexture, shaderObject.useSmoothTextures, shaderObject.useMipmapping, temp) +\n\t\t\t\t\"sub \" + temp2 + \".w, \" + temp + \".w, fc0.x\\n\" +               \t// -.5\n\t\t\t\t\"kil \" + temp2 + \".w\\n\" +\t// used for real time reflection mapping - if alpha is not 1 (mock texture) kil output\n\t\t\t\t\"sub \" + temp + \", \" + temp + \", \" + targetReg + \"\\n\";\n\n\t\t// calculate fresnel term\n\t\tcode += \"dp3 \" + viewDirReg + \".w, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +  // dot(V, H)\n\t\t\t\t\"sub \" + viewDirReg + \".w, \" + dataRegister + \".w, \" + viewDirReg + \".w\\n\" +       // base = 1-dot(V, H)\n\t\t\t\t\"pow \" + viewDirReg + \".w, \" + viewDirReg + \".w, \" + dataRegister + \".z\\n\" +       // exp = pow(base, 5)\n\t\t\t\t\"sub \" + normalReg + \".w, \" + dataRegister + \".w, \" + viewDirReg + \".w\\n\" +        // 1 - exp\n\t\t\t\t\"mul \" + normalReg + \".w, \" + dataRegister + \".y, \" + normalReg + \".w\\n\" +         // f0*(1 - exp)\n\t\t\t\t\"add \" + viewDirReg + \".w, \" + viewDirReg + \".w, \" + normalReg + \".w\\n\" +          // exp + f0*(1 - exp)\n\n\t\t\t\t// total alpha\n\t\t\t\t\"mul \" + viewDirReg + \".w, \" + dataRegister + \".x, \" + viewDirReg + \".w\\n\";\n\n\t\tif (this._mask) {\n\t\t\tvar maskReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\t\tcode += ShaderCompilerHelper.getTex2DSampleCode(temp2, sharedRegisters, maskReg, this._mask, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping) +\n\t\t\t\t\"mul \" + viewDirReg + \".w, \" + temp2 + \".x, \" + viewDirReg + \".w\\n\";\n\t\t}\n\n\t\t// blend\n\t\tcode += \"mul \" + temp + \", \" + temp + \", \" + viewDirReg + \".w\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectFresnelEnvMapMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectLightMapMethod provides a method that allows applying a light map texture to the calculated pixel colour.\n * It is different from DiffuseLightMapMethod in that the latter only modulates the diffuse shading value rather\n * than the whole pixel colour.\n */\nclass EffectLightMapMethod extends EffectMethodBase\n{\n\t/**\n\t * Indicates the light map should be multiplied with the calculated shading result.\n\t */\n\tpublic static MULTIPLY:string = \"multiply\";\n\n\t/**\n\t * Indicates the light map should be added into the calculated shading result.\n\t */\n\tpublic static ADD:string = \"add\";\n\n\tprivate _texture:Texture2DBase;\n\n\tprivate _blendMode:string;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new EffectLightMapMethod object.\n\t *\n\t * @param texture The texture containing the light map.\n\t * @param blendMode The blend mode with which the light map should be applied to the lighting result.\n\t * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tconstructor(texture:Texture2DBase, blendMode:string = \"multiply\", useSecondaryUV:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t\tthis._texture = texture;\n\t\tthis.blendMode = blendMode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsUV = !this._useSecondaryUV;\n\t\tmethodVO.needsSecondaryUV = this._useSecondaryUV;\n\t}\n\n\t/**\n\t * The blend mode with which the light map should be applied to the lighting result.\n\t *\n\t * @see EffectLightMapMethod.ADD\n\t * @see EffectLightMapMethod.MULTIPLY\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (value != EffectLightMapMethod.ADD && value != EffectLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture containing the light map.\n\t */\n\tpublic get texture():Texture2DBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:Texture2DBase)\n\t{\n\t\tif (value.hasMipmaps != this._texture.hasMipmaps || value.format != this._texture.format)\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tstage.activateTexture(methodVO.texturesIndex, this._texture);\n\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar lightMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tmethodVO.texturesIndex = lightMapReg.index;\n\n\t\tcode = ShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, lightMapReg, this._texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying);\n\n\t\tswitch (this._blendMode) {\n\t\t\tcase EffectLightMapMethod.MULTIPLY:\n\t\t\t\tcode += \"mul \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase EffectLightMapMethod.ADD:\n\t\t\t\tcode += \"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectLightMapMethod;","import AssetType\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport AbstractMethodError\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * EffectMethodBase forms an abstract base class for shader methods that are not dependent on light sources,\n * and are in essence post-process effects on the materials.\n */\nclass EffectMethodBase extends ShadingMethodBase implements IAsset\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn AssetType.EFFECTS_METHOD;\n\t}\n\n\t/**\n\t * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register that will be containing the method's output.\n\t * @private\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n}\n\nexport = EffectMethodBase;","import CubeTextureBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectRefractionEnvMapMethod provides a method to add refracted transparency based on cube maps.\n */\nclass EffectRefractionEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:CubeTextureBase;\n\n\tprivate _dispersionR:number = 0;\n\tprivate _dispersionG:number = 0;\n\tprivate _dispersionB:number = 0;\n\tprivate _useDispersion:boolean;\n\tprivate _refractionIndex:number;\n\tprivate _alpha:number = 1;\n\n\t/**\n\t * Creates a new EffectRefractionEnvMapMethod object. Example values for dispersion are: dispersionR: -0.03, dispersionG: -0.01, dispersionB: = .0015\n\t *\n\t * @param envMap The environment map containing the refracted scene.\n\t * @param refractionIndex The refractive index of the material.\n\t * @param dispersionR The amount of chromatic dispersion of the red channel. Defaults to 0 (none).\n\t * @param dispersionG The amount of chromatic dispersion of the green channel. Defaults to 0 (none).\n\t * @param dispersionB The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).\n\t */\n\tconstructor(envMap:CubeTextureBase, refractionIndex:number = .1, dispersionR:number = 0, dispersionG:number = 0, dispersionB:number = 0)\n\t{\n\t\tsuper();\n\t\tthis._envMap = envMap;\n\t\tthis._dispersionR = dispersionR;\n\t\tthis._dispersionG = dispersionG;\n\t\tthis._dispersionB = dispersionB;\n\t\tthis._useDispersion = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tthis._refractionIndex = refractionIndex;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index + 4] = 1;\n\t\tdata[index + 5] = 0;\n\t\tdata[index + 7] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\t/**\n\t * The cube environment map to use for the refraction.\n\t */\n\tpublic get envMap():CubeTextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:CubeTextureBase)\n\t{\n\t\tthis._envMap = value;\n\t}\n\n\t/**\n\t * The refractive index of the material.\n\t */\n\tpublic get refractionIndex():number\n\t{\n\t\treturn this._refractionIndex;\n\t}\n\n\tpublic set refractionIndex(value:number)\n\t{\n\t\tthis._refractionIndex = value;\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the red channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionR():number\n\t{\n\t\treturn this._dispersionR;\n\t}\n\n\tpublic set dispersionR(value:number)\n\t{\n\t\tthis._dispersionR = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the green channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionG():number\n\t{\n\t\treturn this._dispersionG;\n\t}\n\n\tpublic set dispersionG(value:number)\n\t{\n\t\tthis._dispersionG = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionB():number\n\t{\n\t\treturn this._dispersionB;\n\t}\n\n\tpublic set dispersionB(value:number)\n\t{\n\t\tthis._dispersionB = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of transparency of the object. Warning: the alpha applies to the refracted color, not the actual\n\t * material. A value of 1 will make it appear fully transparent.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\n\t\tdata[index] = this._dispersionR + this._refractionIndex;\n\n\t\tif (this._useDispersion) {\n\t\t\tdata[index + 1] = this._dispersionG + this._refractionIndex;\n\t\t\tdata[index + 2] = this._dispersionB + this._refractionIndex;\n\t\t}\n\t\tdata[index + 3] = this._alpha;\n\n\t\tstage.activateCubeTexture(methodVO.texturesIndex, this._envMap);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// todo: data2.x could use common reg, so only 1 reg is used\n\t\tvar data:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar data2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\t\tvar cubeMapReg:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\tvar refractionDir:ShaderRegisterElement;\n\t\tvar refractionColor:ShaderRegisterElement;\n\t\tvar temp:ShaderRegisterElement;\n\n\t\tmethodVO.texturesIndex = cubeMapReg.index;\n\t\tmethodVO.fragmentConstantsIndex = data.index*4;\n\n\t\trefractionDir = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(refractionDir, 1);\n\t\trefractionColor = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(refractionColor, 1);\n\n\t\ttemp = registerCache.getFreeFragmentVectorTemp();\n\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\tcode += \"neg \" + viewDirReg + \".xyz, \" + viewDirReg + \".xyz\\n\";\n\n\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + data + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + data + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\"mul \" + temp + \".x, \" + data + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\"mul \" + refractionDir + \", \" + data + \".x, \" + viewDirReg + \"\\n\" +\n\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\";\n\t\tcode += ShaderCompilerHelper.getTexCubeSampleCode(refractionColor, cubeMapReg, this._envMap, shaderObject.useSmoothTextures, shaderObject.useMipmapping, refractionDir) +\n\t\t\t\"sub \" + refractionColor + \".w, \" + refractionColor + \".w, fc0.x\t\\n\" +\n\t\t\t\"kil \" + refractionColor + \".w\\n\";\n\n\t\tif (this._useDispersion) {\n\t\t\t// GREEN\n\t\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".y, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".y, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\t\"mul \" + temp + \".x, \" + data + \".y, \" + temp + \".x\\n\" +\n\t\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\t\"mul \" + refractionDir + \", \" + data + \".y, \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\";\n\t\t\tcode += ShaderCompilerHelper.getTexCubeSampleCode(temp, cubeMapReg, this._envMap, shaderObject.useSmoothTextures, shaderObject.useMipmapping, refractionDir) +\n\t\t\t\t\"mov \" + refractionColor + \".y, \" + temp + \".y\\n\";\n\n\t\t\t// BLUE\n\t\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".z, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".z, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\t\"mul \" + temp + \".x, \" + data + \".z, \" + temp + \".x\\n\" +\n\t\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\t\"mul \" + refractionDir + \", \" + data + \".z, \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\";\n\t\t\tcode += ShaderCompilerHelper.getTexCubeSampleCode(temp, cubeMapReg, this._envMap, shaderObject.useSmoothTextures, shaderObject.useMipmapping, refractionDir) +\n\t\t\t\t\"mov \" + refractionColor + \".z, \" + temp + \".z\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(refractionDir);\n\n\t\tcode += \"sub \" + refractionColor + \".xyz, \" + refractionColor + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\"mul \" + refractionColor + \".xyz, \" + refractionColor + \".xyz, \" + data + \".w\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + refractionColor + \".xyz\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(refractionColor);\n\n\t\t// restore\n\t\tcode += \"neg \" + viewDirReg + \".xyz, \" + viewDirReg + \".xyz\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectRefractionEnvMapMethod;","import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectRimLightMethod provides a method to add rim lighting to a material. This adds a glow-like effect to edges of objects.\n */\nclass EffectRimLightMethod extends EffectMethodBase\n{\n\tpublic static ADD:string = \"add\";\n\tpublic static MULTIPLY:string = \"multiply\";\n\tpublic static MIX:string = \"mix\";\n\n\tprivate _color:number /*uint*/;\n\tprivate _blendMode:string;\n\tprivate _colorR:number;\n\tprivate _colorG:number;\n\tprivate _colorB:number;\n\tprivate _strength:number;\n\tprivate _power:number;\n\n\t/**\n\t * Creates a new <code>EffectRimLightMethod</code> object.\n\t *\n\t * @param color The colour of the rim light.\n\t * @param strength The strength of the rim light.\n\t * @param power The power of the rim light. Higher values will result in a higher edge fall-off.\n\t * @param blend The blend mode with which to add the light to the object.\n\t */\n\tconstructor(color:number /*uint*/ = 0xffffff, strength:number = .4, power:number = 2, blend:string = \"mix\")\n\t{\n\t\tsuper();\n\n\t\tthis._blendMode = blend;\n\t\tthis._strength = strength;\n\t\tthis._power = power;\n\n\t\tthis.color = color;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\n\t/**\n\t * The blend mode with which to add the light to the object.\n\t *\n\t * EffectRimLightMethod.MULTIPLY multiplies the rim light with the material's colour.\n\t * EffectRimLightMethod.ADD adds the rim light with the material's colour.\n\t * EffectRimLightMethod.MIX provides normal alpha blending.\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The color of the rim light.\n\t */\n\tpublic get color():number /*uint*/\n\t{\n\t\treturn this._color;\n\t}\n\n\tpublic set color(value:number /*uint*/)\n\t{\n\t\tthis._color = value;\n\t\tthis._colorR = ((value >> 16) & 0xff)/0xff;\n\t\tthis._colorG = ((value >> 8) & 0xff)/0xff;\n\t\tthis._colorB = (value & 0xff)/0xff;\n\t}\n\n\t/**\n\t * The strength of the rim light.\n\t */\n\tpublic get strength():number\n\t{\n\t\treturn this._strength;\n\t}\n\n\tpublic set strength(value:number)\n\t{\n\t\tthis._strength = value;\n\t}\n\n\t/**\n\t * The power of the rim light. Higher values will result in a higher edge fall-off.\n\t */\n\tpublic get power():number\n\t{\n\t\treturn this._power;\n\t}\n\n\tpublic set power(value:number)\n\t{\n\t\tthis._power = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._colorR;\n\t\tdata[index + 1] = this._colorG;\n\t\tdata[index + 2] = this._colorB;\n\t\tdata[index + 4] = this._strength;\n\t\tdata[index + 5] = this._power;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataRegister2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tcode += \"dp3 \" + temp + \".x, \" + sharedRegisters.viewDirFragment + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"sat \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".x, \" + dataRegister + \".w, \" + temp + \".x\\n\" +\n\t\t\t\"pow \" + temp + \".x, \" + temp + \".x, \" + dataRegister2 + \".y\\n\" +\n\t\t\t\"mul \" + temp + \".x, \" + temp + \".x, \" + dataRegister2 + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".x, \" + dataRegister + \".w, \" + temp + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + dataRegister + \".w, \" + temp + \".x\\n\";\n\n\t\tif (this._blendMode == EffectRimLightMethod.ADD) {\n\t\t\tcode += \"mul \" + temp + \".xyz, \" + temp + \".w, \" + dataRegister + \".xyz\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t} else if (this._blendMode == EffectRimLightMethod.MULTIPLY) {\n\t\t\tcode += \"mul \" + temp + \".xyz, \" + temp + \".w, \" + dataRegister + \".xyz\\n\" +\n\t\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t} else {\n\t\t\tcode += \"sub \" + temp + \".xyz, \" + dataRegister + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectRimLightMethod;","import ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * LightingMethodBase provides an abstract base method for shading methods that uses lights.\n * Used for diffuse and specular shaders only.\n */\nclass LightingMethodBase extends ShadingMethodBase\n{\n\t/**\n\t * A method that is exposed to wrappers in case the strength needs to be controlled\n\t */\n\tpublic _iModulateMethod:(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string;\n\n\t/**\n\t * Creates a new LightingMethodBase.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * Get the fragment shader code that will be needed before any per-light code is added.\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @private\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that will generate the code relevant to a single light.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param lightDirReg The register containing the light direction vector.\n\t * @param lightColReg The register containing the light colour.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that will generate the code relevant to a single light probe object.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param cubeMapReg The register containing the cube map for the current probe\n\t * @param weightRegister A string representation of the register + component containing the current weight\n\t * @param regCache The register cache providing any necessary registers to the shader\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register containing the final shading output.\n\t * @private\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n}\n\nexport = LightingMethodBase;","import Texture2DBase\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLMipFilter\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLMipFilter\");\nimport ContextGLTextureFilter\t\t= require(\"awayjs-stagegl/lib/base/ContextGLTextureFilter\");\nimport ContextGLWrapMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLWrapMode\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * NormalBasicMethod is the default method for standard tangent-space normal mapping.\n */\nclass NormalBasicMethod extends ShadingMethodBase\n{\n\tprivate _texture:Texture2DBase;\n\tprivate _useTexture:boolean;\n\tpublic _pNormalTextureRegister:ShaderRegisterElement;\n\n\t/**\n\t * Creates a new NormalBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\tif (!this._useTexture || !shaderObject.normalDependencies)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsUV = this._useTexture;\n\t}\n\n\t/**\n\t * Indicates whether or not this method outputs normals in tangent space. Override for object-space normals.\n\t */\n\tpublic iOutputsTangentNormals():boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar s:any = method;\n\t\tvar bnm:NormalBasicMethod = <NormalBasicMethod> method;\n\n\t\tif (bnm.normalMap != null)\n\t\t\tthis.normalMap = bnm.normalMap;\n\t}\n\n\t/**\n\t * The texture containing the normals per pixel.\n\t */\n\tpublic get normalMap():Texture2DBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set normalMap(value:Texture2DBase)\n\t{\n\t\tvar b:boolean = (value != null);\n\n\t\tif (b != this._useTexture || (value && this._texture && (value.hasMipmaps != this._texture.hasMipmaps || value.format != this._texture.format)))\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._useTexture = b;\n\t\tthis._texture = value;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._pNormalTextureRegister = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._texture)\n\t\t\tthis._texture = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (methodVO.texturesIndex >= 0) {\n\t\t\tstage.context.setSamplerStateAt(methodVO.texturesIndex, shaderObject.repeatTextures? ContextGLWrapMode.REPEAT:ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures? ContextGLTextureFilter.LINEAR : ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);\n\t\t\tstage.activateTexture(methodVO.texturesIndex, this._texture);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pNormalTextureRegister = registerCache.getFreeTextureReg();\n\n\t\tmethodVO.texturesIndex = this._pNormalTextureRegister.index;\n\n\t\treturn ShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedRegisters, this._pNormalTextureRegister, this._texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping) +\n\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + sharedRegisters.commons + \".xxx\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \"\\n\";\n\t}\n}\n\nexport = NormalBasicMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * NormalHeightMapMethod provides a normal map method that uses a height map to calculate the normals.\n */\nclass NormalHeightMapMethod extends NormalBasicMethod\n{\n\tprivate _worldXYRatio:number;\n\tprivate _worldXZRatio:number;\n\n\t/**\n\t * Creates a new NormalHeightMapMethod method.\n\t *\n\t * @param heightMap The texture containing the height data. 0 means low, 1 means high.\n\t * @param worldWidth The width of the 'world'. This is used to map uv coordinates' u component to scene dimensions.\n\t * @param worldHeight The height of the 'world'. This is used to map the height map values to scene dimensions.\n\t * @param worldDepth The depth of the 'world'. This is used to map uv coordinates' v component to scene dimensions.\n\t */\n\tconstructor(heightMap:Texture2DBase, worldWidth:number, worldHeight:number, worldDepth:number)\n\t{\n\t\tsuper();\n\n\t\tthis.normalMap = heightMap;\n\t\tthis._worldXYRatio = worldWidth/worldHeight;\n\t\tthis._worldXZRatio = worldDepth/worldHeight;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = 1/this.normalMap.width;\n\t\tdata[index + 1] = 1/this.normalMap.height;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t\tdata[index + 4] = this._worldXYRatio;\n\t\tdata[index + 5] = this._worldXZRatio;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get tangentSpace():boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tsuper.copyFrom(method);\n\n\t\tthis._worldXYRatio = (<NormalHeightMapMethod> method)._worldXYRatio;\n\t\tthis._worldXZRatio = (<NormalHeightMapMethod> method)._worldXZRatio;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tthis._pNormalTextureRegister = registerCache.getFreeTextureReg();\n\t\tmethodVO.texturesIndex = this._pNormalTextureRegister.index;\n\t\tmethodVO.fragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn ShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedRegisters, this._pNormalTextureRegister, this.normalMap, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, sharedRegisters.uvVarying, \"clamp\") +\n\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg + \".xzzz\\n\" +\n\n\t\t\tShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, this._pNormalTextureRegister, this.normalMap, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, temp, \"clamp\") +\n\n\t\t\t\"sub \" + targetReg + \".x, \" + targetReg + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg + \".zyzz\\n\" +\n\n\t\t\tShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, this._pNormalTextureRegister, this.normalMap, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, temp, \"clamp\") +\n\n\t\t\t\"sub \" + targetReg + \".z, \" + targetReg + \".z, \" + temp + \".x\\n\" +\n\t\t\t\"mov \" + targetReg + \".y, \" + dataReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".xz, \" + targetReg + \".xz, \" + dataReg2 + \".xy\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \".xyz\\n\";\n\t}\n}\n\nexport = NormalHeightMapMethod;","import Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\n\n/**\n * NormalSimpleWaterMethod provides a basic normal map method to create water ripples by translating two wave normal maps.\n */\nclass NormalSimpleWaterMethod extends NormalBasicMethod\n{\n\tprivate _texture2:Texture2DBase;\n\tprivate _normalTextureRegister2:ShaderRegisterElement;\n\tprivate _useSecondNormalMap:boolean = false;\n\tprivate _water1OffsetX:number = 0;\n\tprivate _water1OffsetY:number = 0;\n\tprivate _water2OffsetX:number = 0;\n\tprivate _water2OffsetY:number = 0;\n\n\t/**\n\t * Creates a new NormalSimpleWaterMethod object.\n\t * @param waveMap1 A normal map containing one layer of a wave structure.\n\t * @param waveMap2 A normal map containing a second layer of a wave structure.\n\t */\n\tconstructor(waveMap1:Texture2DBase, waveMap2:Texture2DBase)\n\t{\n\t\tsuper();\n\t\tthis.normalMap = waveMap1;\n\t\tthis.secondaryNormalMap = waveMap2;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = .5;\n\t\tdata[index + 1] = 0;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shaderObject, methodVO);\n\n\t\tthis._useSecondNormalMap = this.normalMap != this.secondaryNormalMap;\n\t}\n\n\t/**\n\t * The translation of the first wave layer along the X-axis.\n\t */\n\tpublic get water1OffsetX():number\n\t{\n\t\treturn this._water1OffsetX;\n\t}\n\n\tpublic set water1OffsetX(value:number)\n\t{\n\t\tthis._water1OffsetX = value;\n\t}\n\n\t/**\n\t * The translation of the first wave layer along the Y-axis.\n\t */\n\tpublic get water1OffsetY():number\n\t{\n\t\treturn this._water1OffsetY;\n\t}\n\n\tpublic set water1OffsetY(value:number)\n\t{\n\t\tthis._water1OffsetY = value;\n\t}\n\n\t/**\n\t * The translation of the second wave layer along the X-axis.\n\t */\n\tpublic get water2OffsetX():number\n\t{\n\t\treturn this._water2OffsetX;\n\t}\n\n\tpublic set water2OffsetX(value:number)\n\t{\n\t\tthis._water2OffsetX = value;\n\t}\n\n\t/**\n\t * The translation of the second wave layer along the Y-axis.\n\t */\n\tpublic get water2OffsetY():number\n\t{\n\t\treturn this._water2OffsetY;\n\t}\n\n\tpublic set water2OffsetY(value:number)\n\t{\n\t\tthis._water2OffsetY = value;\n\t}\n\n\t/**\n\t * A second normal map that will be combined with the first to create a wave-like animation pattern.\n\t */\n\tpublic get secondaryNormalMap():Texture2DBase\n\t{\n\t\treturn this._texture2;\n\t}\n\n\tpublic set secondaryNormalMap(value:Texture2DBase)\n\t{\n\t\tthis._texture2 = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._normalTextureRegister2 = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\t\tthis._texture2 = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\n\t\tdata[index + 4] = this._water1OffsetX;\n\t\tdata[index + 5] = this._water1OffsetY;\n\t\tdata[index + 6] = this._water2OffsetX;\n\t\tdata[index + 7] = this._water2OffsetY;\n\n\t\t//if (this._useSecondNormalMap >= 0)\n\t\tif (this._useSecondNormalMap)\n\t\t\tstage.activateTexture(methodVO.texturesIndex + 1, this._texture2);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tthis._pNormalTextureRegister = registerCache.getFreeTextureReg();\n\t\tthis._normalTextureRegister2 = this._useSecondNormalMap? registerCache.getFreeTextureReg():this._pNormalTextureRegister;\n\t\tmethodVO.texturesIndex = this._pNormalTextureRegister.index;\n\n\t\tmethodVO.fragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn \"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg2 + \".xyxy\\n\" +\n\t\t\tShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedRegisters, this._pNormalTextureRegister, this.normalMap, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, temp) +\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg2 + \".zwzw\\n\" +\n\t\t\tShaderCompilerHelper.getTex2DSampleCode(temp, sharedRegisters, this._normalTextureRegister2, this._texture2, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping, temp) +\n\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\t\t\\n\" +\n\t\t\t\"mul \" + targetReg + \", \" + targetReg + \", \" + dataReg + \".x\t\\n\" +\n\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + sharedRegisters.commons + \".xxx\t\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \".xyz\t\t\t\t\t\t\t\\n\";\n\t}\n}\n\nexport = NormalSimpleWaterMethod;","import NamedAssetBase\t\t\t\t= require(\"awayjs-core/lib/library/NamedAssetBase\");\n\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\n\n\n/**\n * ShadingMethodBase provides an abstract base method for shading methods, used by compiled passes to compile\n * the final shading program.\n */\nclass ShadingMethodBase extends NamedAssetBase\n{\n\t/**\n\t * Create a new ShadingMethodBase object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Initializes the properties for a MethodVO, including register and texture indices.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t *\n\t * @internal\n\t */\n\tpublic iInitVO(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\n\t}\n\n\t/**\n\t * Initializes unchanging shader constants using the data from a MethodVO.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t *\n\t * @internal\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\n\n\t}\n\n\t/**\n\t * Indicates whether or not this method expects normals in tangent space. Override for object-space normals.\n\t */\n\tpublic iUsesTangentSpace():boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Cleans up any resources used by the current object.\n\t */\n\tpublic dispose()\n\t{\n\n\t}\n\n\t/**\n\t * Resets the compilation state of the method.\n\t *\n\t * @internal\n\t */\n\tpublic iReset()\n\t{\n\t\tthis.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Resets the method's state for compilation.\n\t *\n\t * @internal\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t}\n\n\t/**\n\t * Get the vertex shader code for this method.\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t *\n\t * @internal\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the render state for this method.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param stage The Stage object currently used for rendering.\n\t *\n\t * @internal\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\n\t}\n\n\t/**\n\t * Sets the render state for a single renderable.\n\t *\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param renderable The renderable currently being rendered.\n\t * @param stage The Stage object currently used for rendering.\n\t * @param camera The camera from which the scene is currently rendered.\n\t *\n\t * @internal\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\n\t}\n\n\t/**\n\t * Clears the render state for this method.\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param stage The Stage object currently used for rendering.\n\t *\n\t * @internal\n\t */\n\tpublic iDeactivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\n\t}\n\n\t/**\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\n\t *\n\t * @internal\n\t */\n\tpublic iInvalidateShaderProgram()\n\t{\n\t\tthis.dispatchEvent(new ShadingMethodEvent(ShadingMethodEvent.SHADER_INVALIDATED));\n\t}\n\n\t/**\n\t * Copies the state from a ShadingMethodBase object into the current object.\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t}\n}\n\nexport = ShadingMethodBase;","import Event\t\t\t\t\t\t\t= require(\"awayjs-core/lib/events/Event\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport CascadeShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CascadeShadowMapper\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowCascadeMethod is a shadow map method to apply cascade shadow mapping on materials.\n * Must be used with a DirectionalLight with a CascadeShadowMapper assigned to its shadowMapper property.\n *\n * @see away.lights.CascadeShadowMapper\n */\nclass ShadowCascadeMethod extends ShadowMapMethodBase\n{\n\tprivate _baseMethod:ShadowMethodBase;\n\tprivate _cascadeShadowMapper:CascadeShadowMapper;\n\tprivate _depthMapCoordVaryings:Array<ShaderRegisterElement>;\n\tprivate _cascadeProjections:Array<ShaderRegisterElement>;\n\n\t/**\n\t * Creates a new ShadowCascadeMethod object.\n\t *\n\t * @param shadowMethodBase The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)\n\t */\n\tconstructor(shadowMethodBase:ShadowMethodBase)\n\t{\n\t\tsuper(shadowMethodBase.castingLight);\n\n\t\tthis._baseMethod = shadowMethodBase;\n\t\tif (!(this._pCastingLight instanceof DirectionalLight))\n\t\t\tthrow new Error(\"ShadowCascadeMethod is only compatible with DirectionalLight\");\n\n\t\tthis._cascadeShadowMapper = <CascadeShadowMapper> this._pCastingLight.shadowMapper;\n\n\t\tif (!this._cascadeShadowMapper)\n\t\t\tthrow new Error(\"ShadowCascadeMethod requires a light that has a CascadeShadowMapper instance assigned to shadowMapper.\");\n\n\t\tthis._cascadeShadowMapper.addEventListener(Event.CHANGE, (event:Event) => this.onCascadeChange(event));\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\t}\n\n\t/**\n\t * The shadow map sampling method used to sample individual cascades. These are typically those used in conjunction\n\t * with a DirectionalShadowMapper.\n\t *\n\t * @see ShadowHardMethod\n\t * @see ShadowSoftMethod\n\t */\n\tpublic get baseMethod():ShadowMethodBase\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:ShadowMethodBase)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tvar tempVO:MethodVO = new MethodVO(this._baseMethod);\n\t\tthis._baseMethod.iInitVO(shaderObject, tempVO);\n\n\t\tmethodVO.needsGlobalVertexPos = true;\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar vertexData:Array<number> = shaderObject.vertexConstantData;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index] = 1.0;\n\t\tfragmentData[index + 1] = 1/255.0;\n\t\tfragmentData[index + 2] = 1/65025.0;\n\t\tfragmentData[index + 3] = 1/16581375.0;\n\n\t\tfragmentData[index + 6] = .5;\n\t\tfragmentData[index + 7] = -.5;\n\n\t\tindex = methodVO.vertexConstantsIndex;\n\t\tvertexData[index] = .5;\n\t\tvertexData[index + 1] = -.5;\n\t\tvertexData[index + 2] = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._cascadeProjections = null;\n\t\tthis._depthMapCoordVaryings = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\n\t\tthis.initProjectionsRegs(registerCache);\n\t\tmethodVO.vertexConstantsIndex = dataReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\tfor (var i:number = 0; i < this._cascadeShadowMapper.numCascades; ++i) {\n\t\t\tcode += \"m44 \" + temp + \", \" + sharedRegisters.globalPositionVertex + \", \" + this._cascadeProjections[i] + \"\\n\" +\n\t\t\t\t\"add \" + this._depthMapCoordVaryings[i] + \", \" + temp + \", \" + dataReg + \".zzwz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Creates the registers for the cascades' projection coordinates.\n\t */\n\tprivate initProjectionsRegs(registerCache:ShaderRegisterCache)\n\t{\n\t\tthis._cascadeProjections = new Array<ShaderRegisterElement>(this._cascadeShadowMapper.numCascades);\n\t\tthis._depthMapCoordVaryings = new Array<ShaderRegisterElement>(this._cascadeShadowMapper.numCascades);\n\n\t\tfor (var i:number = 0; i < this._cascadeShadowMapper.numCascades; ++i) {\n\t\t\tthis._depthMapCoordVaryings[i] = registerCache.getFreeVarying();\n\t\t\tthis._cascadeProjections[i] = registerCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar numCascades:number = this._cascadeShadowMapper.numCascades;\n\t\tvar depthMapRegister:ShaderRegisterElement = registerCache.getFreeTextureReg();\n\t\tvar decReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar planeDistanceReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar planeDistances:Array<string> = Array<string>( planeDistanceReg + \".x\", planeDistanceReg + \".y\", planeDistanceReg + \".z\", planeDistanceReg + \".w\" );\n\t\tvar code:string;\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\t\tmethodVO.texturesIndex = depthMapRegister.index;\n\n\t\tvar inQuad:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(inQuad, 1);\n\t\tvar uvCoord:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(uvCoord, 1);\n\n\t\t// assume lowest partition is selected, will be overwritten later otherwise\n\t\tcode = \"mov \" + uvCoord + \", \" + this._depthMapCoordVaryings[numCascades - 1] + \"\\n\";\n\n\t\tfor (var i:number = numCascades - 2; i >= 0; --i) {\n\t\t\tvar uvProjection:ShaderRegisterElement = this._depthMapCoordVaryings[i];\n\n\t\t\t// calculate if in texturemap (result == 0 or 1, only 1 for a single partition)\n\t\t\tcode += \"slt \" + inQuad + \".z, \" + sharedRegisters.projectionFragment + \".z, \" + planeDistances[i] + \"\\n\"; // z = x > minX, w = y > minY\n\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t\t// linearly interpolate between old and new uv coords using predicate value == conditional toggle to new value if predicate == 1 (true)\n\t\t\tcode += \"sub \" + temp + \", \" + uvProjection + \", \" + uvCoord + \"\\n\" +\n\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + inQuad + \".z\\n\" +\n\t\t\t\t\"add \" + uvCoord + \", \" + uvCoord + \", \" + temp + \"\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(inQuad);\n\n\t\tcode += \"div \" + uvCoord + \", \" + uvCoord + \", \" + uvCoord + \".w\\n\" +\n\t\t\t\"mul \" + uvCoord + \".xy, \" + uvCoord + \".xy, \" + dataReg + \".zw\\n\" +\n\t\t\t\"add \" + uvCoord + \".xy, \" + uvCoord + \".xy, \" + dataReg + \".zz\\n\";\n\n\t\tcode += this._baseMethod._iGetCascadeFragmentCode(shaderObject, methodVO, decReg, depthMapRegister, uvCoord, targetReg, registerCache, sharedRegisters) +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + dataReg + \".y\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(uvCoord);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tstage.activateTexture(methodVO.texturesIndex, <Texture2DBase> this._pCastingLight.shadowMapper.depthMap);\n\n\t\tvar vertexData:Array<number> = shaderObject.vertexConstantData;\n\t\tvar vertexIndex:number = methodVO.vertexConstantsIndex;\n\n\t\tshaderObject.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1/(this._cascadeShadowMapper.depth*this._pEpsilon);\n\n\t\tvar numCascades:number = this._cascadeShadowMapper.numCascades;\n\t\tvertexIndex += 4;\n\t\tfor (var k:number = 0; k < numCascades; ++k) {\n\t\t\tthis._cascadeShadowMapper.getDepthProjections(k).copyRawDataTo(vertexData, vertexIndex, true);\n\t\t\tvertexIndex += 16;\n\t\t}\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar fragmentIndex:number = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[fragmentIndex + 5] = 1 - this._pAlpha;\n\n\t\tvar nearPlaneDistances:Array<number> = this._cascadeShadowMapper._iNearPlaneDistances;\n\n\t\tfragmentIndex += 8;\n\t\tfor (var i:number = 0; i < numCascades; ++i)\n\t\t\tfragmentData[fragmentIndex + i] = nearPlaneDistances[i];\n\n\t\tthis._baseMethod.iActivateForCascade(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t}\n\n\t/**\n\t * Called when the shadow mappers cascade configuration changes.\n\t */\n\tprivate onCascadeChange(event:Event)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = ShadowCascadeMethod;","import BitmapData\t\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport BitmapTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/BitmapTexture\");\n\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowDitheredMethod provides a soft shadowing technique by randomly distributing sample points differently for each fragment.\n */\nclass ShadowDitheredMethod extends ShadowMethodBase\n{\n\tprivate static _grainTexture:BitmapTexture;\n\tprivate static _grainUsages:number /*int*/;\n\tprivate static _grainBitmapData:BitmapData;\n\tprivate _depthMapSize:number /*int*/;\n\tprivate _range:number;\n\tprivate _numSamples:number /*int*/;\n\n\t/**\n\t * Creates a new ShadowDitheredMethod object.\n\t * @param castingLight The light casting the shadows\n\t * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 24.\n\t */\n\tconstructor(castingLight:DirectionalLight, numSamples:number /*int*/ = 4, range:number = 1)\n\t{\n\t\tsuper(castingLight);\n\n\t\tthis._depthMapSize = this._pCastingLight.shadowMapper.depthMapSize;\n\n\t\tthis.numSamples = numSamples;\n\t\tthis.range = range;\n\n\t\t++ShadowDitheredMethod._grainUsages;\n\n\t\tif (!ShadowDitheredMethod._grainTexture)\n\t\t\tthis.initGrainTexture();\n\t}\n\n\t/**\n\t * The amount of samples to take for dithering. Minimum 1, maximum 24. The actual maximum may depend on the\n\t * complexity of the shader.\n\t */\n\tpublic get numSamples():number /*int*/\n\t{\n\t\treturn this._numSamples;\n\t}\n\n\tpublic set numSamples(value:number /*int*/)\n\t{\n\t\tthis._numSamples = value;\n\t\tif (this._numSamples < 1)\n\t\t\tthis._numSamples = 1; else if (this._numSamples > 24)\n\t\t\tthis._numSamples = 24;\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shaderObject, methodVO);\n\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index + 8] = 1/this._numSamples;\n\t}\n\n\t/**\n\t * The range in the shadow map in which to distribute the samples.\n\t */\n\tpublic get range():number\n\t{\n\t\treturn this._range*2;\n\t}\n\n\tpublic set range(value:number)\n\t{\n\t\tthis._range = value/2;\n\t}\n\n\t/**\n\t * Creates a texture containing the dithering noise texture.\n\t */\n\tprivate initGrainTexture()\n\t{\n\t\tShadowDitheredMethod._grainBitmapData = new BitmapData(64, 64, false);\n\t\tvar vec:Array<number> /*uint*/ = new Array<number>();\n\t\tvar len:number /*uint*/ = 4096;\n\t\tvar step:number = 1/(this._depthMapSize*this._range);\n\t\tvar r:number, g:number;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tr = 2*(Math.random() - .5);\n\t\t\tg = 2*(Math.random() - .5);\n\t\t\tif (r < 0)\n\t\t\t\tr -= step; else\n\t\t\t\tr += step;\n\t\t\tif (g < 0)\n\t\t\t\tg -= step; else\n\t\t\t\tg += step;\n\t\t\tif (r > 1)\n\t\t\t\tr = 1; else if (r < -1)\n\t\t\t\tr = -1;\n\t\t\tif (g > 1)\n\t\t\t\tg = 1; else if (g < -1)\n\t\t\t\tg = -1;\n\t\t\tvec[i] = (Math.floor((r*.5 + .5)*0xff) << 16) | (Math.floor((g*.5 + .5)*0xff) << 8);\n\t\t}\n\n\t\tShadowDitheredMethod._grainBitmapData.setVector(ShadowDitheredMethod._grainBitmapData.rect, vec);\n\t\tShadowDitheredMethod._grainTexture = new BitmapTexture(ShadowDitheredMethod._grainBitmapData);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (--ShadowDitheredMethod._grainUsages == 0) {\n\t\t\tShadowDitheredMethod._grainTexture.dispose();\n\t\t\tShadowDitheredMethod._grainBitmapData.dispose();\n\t\t\tShadowDitheredMethod._grainTexture = null;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index + 9] = (stage.width - 1)/63;\n\t\tdata[index + 10] = (stage.height - 1)/63;\n\t\tdata[index + 11] = 2*this._range/this._depthMapSize;\n\n\t\tstage.activateTexture(methodVO.texturesIndex + 1, ShadowDitheredMethod._grainTexture);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar depthMapRegister:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\t\tmethodVO.texturesIndex = depthMapRegister.index;\n\n\t\treturn this.getSampleCode(customDataReg, depthMapRegister, decReg, targetReg, regCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Get the actual shader code for shadow mapping\n\t * @param regCache The register cache managing the registers.\n\t * @param depthMapRegister The texture register containing the depth map.\n\t * @param decReg The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the shadow coverage.\n\t */\n\tprivate getSampleCode(customDataReg:ShaderRegisterElement, depthMapRegister:ShaderRegisterElement, decReg:ShaderRegisterElement, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar grainRegister:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tvar uvReg:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tvar numSamples:number /*int*/ = this._numSamples;\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\tvar projectionReg:ShaderRegisterElement = sharedRegisters.projectionFragment;\n\n\t\tcode += \"div \" + uvReg + \", \" + projectionReg + \", \" + projectionReg + \".w\\n\" + \"mul \" + uvReg + \".xy, \" + uvReg + \".xy, \" + customDataReg + \".yz\\n\";\n\n\t\twhile (numSamples > 0) {\n\t\t\tif (numSamples == this._numSamples)\n\t\t\t\tcode += \"tex \" + uvReg + \", \" + uvReg + \", \" + grainRegister + \" <2d,nearest,repeat,mipnone>\\n\";\n\t\t\telse\n\t\t\t\tcode += \"tex \" + uvReg + \", \" + uvReg + \".zwxy, \" + grainRegister + \" <2d,nearest,repeat,mipnone>\\n\";\n\n\t\t\t// keep grain in uvReg.zw\n\t\t\tcode += \"sub \" + uvReg + \".zw, \" + uvReg + \".xy, fc0.xx\\n\" + // uv-.5\n\t\t\t\t\"mul \" + uvReg + \".zw, \" + uvReg + \".zw, \" + customDataReg + \".w\\n\"; // (tex unpack scale and tex scale in one)\n\n\t\t\tif (numSamples == this._numSamples) {\n\t\t\t\t// first sample\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".zw, \" + this._pDepthMapCoordReg + \".xy\\n\" +\n\t\t\t\t\t\"tex \" + temp + \", \" + uvReg + \", \" + depthMapRegister + \" <2d,nearest,clamp,mipnone>\\n\" +\n\t\t\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\t\t\"slt \" + targetReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\"; // 0 if in shadow\n\t\t\t} else {\n\t\t\t\tcode += this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\t\t\t}\n\n\t\t\tif (numSamples > 4)\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 1)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 5)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 2) {\n\t\t\t\tcode += \"neg \" + uvReg + \".w, \" + uvReg + \".w\\n\"; // will be rotated 90 degrees when being accessed as wz\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".wz, \" + this._pDepthMapCoordReg + \".xy\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\t\t\t}\n\n\t\t\tif (numSamples > 6)\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 3)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\n\t\t\tif (numSamples > 7)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(uvReg, depthMapRegister, decReg, targetReg, regCache);\n\n\t\t\tnumSamples -= 8;\n\t\t}\n\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\t\tcode += \"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + customDataReg + \".x\\n\"; // average\n\t\treturn code;\n\t}\n\n\t/**\n\t * Adds the code for another tap to the shader code.\n\t * @param uvReg The uv register for the tap.\n\t * @param depthMapRegister The texture register containing the depth map.\n\t * @param decReg The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the tap comparison result.\n\t * @param regCache The register cache managing the registers.\n\t * @return\n\t */\n\tprivate addSample(uvReg:ShaderRegisterElement, depthMapRegister:ShaderRegisterElement, decReg:ShaderRegisterElement, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache):string\n\t{\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\treturn \"tex \" + temp + \", \" + uvReg + \", \" + depthMapRegister + \" <2d,nearest,clamp,mipnone>\\n\" +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + temp + \".z, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\" + // 0 if in shadow\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + temp + \".z\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index] = 1/this._numSamples;\n\t\tdata[index + 1] = (stage.width - 1)/63;\n\t\tdata[index + 2] = (stage.height - 1)/63;\n\t\tdata[index + 3] = 2*this._range/this._depthMapSize;\n\n\t\tstage.activateTexture(methodVO.texturesIndex + 1, ShadowDitheredMethod._grainTexture);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthTexture:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pDepthMapCoordReg = depthProjection;\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn this.getSampleCode(dataReg, depthTexture, decodeRegister, targetRegister, registerCache, sharedRegisters);\n\t}\n}\n\nexport = ShadowDitheredMethod;","import DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowFilteredMethod provides a softened shadowing technique by bilinearly interpolating shadow comparison\n * results of neighbouring pixels.\n */\nclass ShadowFilteredMethod extends ShadowMethodBase\n{\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t *\n\t * @param castingLight The light casting the shadow\n\t */\n\tconstructor(castingLight:DirectionalLight)\n\t{\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index + 8] = .5;\n\t\tvar size:number /*int*/ = this.castingLight.shadowMapper.depthMapSize;\n\t\tfragmentData[index + 9] = size;\n\t\tfragmentData[index + 10] = 1/size;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar depthMapRegister:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\t// TODO: not used\n\t\tdataReg = dataReg;\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar depthCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tvar uvReg:ShaderRegisterElement;\n\t\tvar code:string = \"\";\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tregCache.addFragmentTempUsages(depthCol, 1);\n\n\t\tuvReg = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tcode += \"mov \" + uvReg + \", \" + this._pDepthMapCoordReg + \"\\n\" +\n\n\t\t\t\"tex \" + depthCol + \", \" + this._pDepthMapCoordReg + \", \" + depthMapRegister + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" + \"slt \" + uvReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"add \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".z\\n\" + \t// (1, 0)\n\t\t\t\"tex \" + depthCol + \", \" + uvReg + \", \" + depthMapRegister + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" + \"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".y\\n\" + \"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" + \"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + uvReg + \".z\\n\" + \"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" + \"add \" + targetReg + \".w, \" + uvReg + \".z, \" + uvReg + \".w\\n\" +\n\n\t\t\t\"mov \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x\\n\" + \"add \" + uvReg + \".y, \" + this._pDepthMapCoordReg + \".y, \" + customDataReg + \".z\\n\" +\t// (0, 1)\n\t\t\t\"tex \" + depthCol + \", \" + uvReg + \", \" + depthMapRegister + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" + \"slt \" + uvReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"add \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".z\\n\" +\t// (1, 1)\n\t\t\t\"tex \" + depthCol + \", \" + uvReg + \", \" + depthMapRegister + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" + \"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t// recalculate fraction, since we ran out of registers :(\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".y\\n\" + \"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" + \"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + uvReg + \".z\\n\" + \"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" + \"add \" + uvReg + \".w, \" + uvReg + \".z, \" + uvReg + \".w\\n\" +\n\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".y, \" + customDataReg + \".y\\n\" + \"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" + \"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + targetReg + \".w\\n\" + \"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" + \"add \" + targetReg + \".w, \" + targetReg + \".w, \" + uvReg + \".w\\n\";\n\n\t\tregCache.removeFragmentTempUsage(depthCol);\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\n\t\tmethodVO.texturesIndex = depthMapRegister.index;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar size:number /*int*/ = this.castingLight.shadowMapper.depthMapSize;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = size;\n\t\tdata[index + 1] = 1/size;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthTexture:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar predicate:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(predicate, 1);\n\n\t\tcode = \"tex \" + temp + \", \" + depthProjection + \", \" + depthTexture + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" + \"slt \" + predicate + \".x, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"add \" + depthProjection + \".x, \" + depthProjection + \".x, \" + dataReg + \".y\\n\" + \"tex \" + temp + \", \" + depthProjection + \", \" + depthTexture + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" + \"slt \" + predicate + \".z, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"add \" + depthProjection + \".y, \" + depthProjection + \".y, \" + dataReg + \".y\\n\" + \"tex \" + temp + \", \" + depthProjection + \", \" + depthTexture + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" + \"slt \" + predicate + \".w, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"sub \" + depthProjection + \".x, \" + depthProjection + \".x, \" + dataReg + \".y\\n\" + \"tex \" + temp + \", \" + depthProjection + \", \" + depthTexture + \" <2d, nearest, clamp>\\n\" + \"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" + \"slt \" + predicate + \".y, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"mul \" + temp + \".xy, \" + depthProjection + \".xy, \" + dataReg + \".x\\n\" + \"frc \" + temp + \".xy, \" + temp + \".xy\\n\" +\n\n\t\t\t// some strange register juggling to prevent agal bugging out\n\t\t\t\"sub \" + depthProjection + \", \" + predicate + \".xyzw, \" + predicate + \".zwxy\\n\" + \"mul \" + depthProjection + \", \" + depthProjection + \", \" + temp + \".x\\n\" +\n\n\t\t\t\"add \" + predicate + \".xy, \" + predicate + \".xy, \" + depthProjection + \".zw\\n\" +\n\n\t\t\t\"sub \" + predicate + \".y, \" + predicate + \".y, \" + predicate + \".x\\n\" + \"mul \" + predicate + \".y, \" + predicate + \".y, \" + temp + \".y\\n\" + \"add \" + targetRegister + \".w, \" + predicate + \".x, \" + predicate + \".y\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(predicate);\n\t\treturn code;\n\t}\n}\n\nexport = ShadowFilteredMethod;","import LightBase\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowHardMethod provides the cheapest shadow map method by using a single tap without any filtering.\n */\nclass ShadowHardMethod extends ShadowMethodBase\n{\n\t/**\n\t * Creates a new ShadowHardMethod object.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar depthMapRegister:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\t// needs to be reserved anyway. DO NOT REMOVE\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tvar depthCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\t\tmethodVO.texturesIndex = depthMapRegister.index;\n\n\t\tcode += \"tex \" + depthCol + \", \" + this._pDepthMapCoordReg + \", \" + depthMapRegister + \" <2d, nearest, clamp>\\n\" +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + targetReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\"; // 0 if in shadow\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPointFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar depthMapRegister:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar epsReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar posReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar depthSampleCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(depthSampleCol, 1);\n\t\tvar lightDir:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\t\tmethodVO.texturesIndex = depthMapRegister.index;\n\n\t\tcode += \"sub \" + lightDir + \", \" + sharedRegisters.globalPositionVarying + \", \" + posReg + \"\\n\" +\n\t\t\t\"dp3 \" + lightDir + \".w, \" + lightDir + \".xyz, \" + lightDir + \".xyz\\n\" +\n\t\t\t\"mul \" + lightDir + \".w, \" + lightDir + \".w, \" + posReg + \".w\\n\" +\n\t\t\t\"nrm \" + lightDir + \".xyz, \" + lightDir + \".xyz\\n\" +\n\n\t\t\t\"tex \" + depthSampleCol + \", \" + lightDir + \", \" + depthMapRegister + \" <cube, nearest, clamp>\\n\" +\n\t\t\t\"dp4 \" + depthSampleCol + \".z, \" + depthSampleCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + lightDir + \".w, \" + epsReg + \".x\\n\" +    // offset by epsilon\n\n\t\t\t\"slt \" + targetReg + \".w, \" + targetReg + \".w, \" + depthSampleCol + \".z\\n\"; // 0 if in shadow\n\n\t\tregCache.removeFragmentTempUsage(depthSampleCol);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthTexture:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\treturn \"tex \" + temp + \", \" + depthProjection + \", \" + depthTexture + \" <2d, nearest, clamp>\\n\" +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + targetRegister + \".w, \" + depthProjection + \".z, \" + temp + \".z\\n\"; // 0 if in shadow\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t}\n}\n\nexport = ShadowHardMethod;","import AssetType\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetType\");\nimport IAsset\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\n\nimport LightBase\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport ShadowMapperBase\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\n\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * ShadowMapMethodBase provides an abstract base method for shadow map methods.\n */\nclass ShadowMapMethodBase extends ShadingMethodBase implements IAsset\n{\n\tpublic _pCastingLight:LightBase;\n\tpublic _pShadowMapper:ShadowMapperBase;\n\n\tpublic _pEpsilon:number = .02;\n\tpublic _pAlpha:number = 1;\n\n\t/**\n\t * Creates a new ShadowMapMethodBase object.\n\t * @param castingLight The light used to cast shadows.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tsuper();\n\t\tthis._pCastingLight = castingLight;\n\t\tcastingLight.castsShadows = true;\n\t\tthis._pShadowMapper = castingLight.shadowMapper;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn AssetType.SHADOW_MAP_METHOD;\n\t}\n\n\t/**\n\t * The \"transparency\" of the shadows. This allows making shadows less strong.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._pAlpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._pAlpha = value;\n\t}\n\n\t/**\n\t * The light casting the shadows.\n\t */\n\tpublic get castingLight():LightBase\n\t{\n\t\treturn this._pCastingLight;\n\t}\n\n\t/**\n\t * A small value to counter floating point precision errors when comparing values in the shadow map with the\n\t * calculated depth value. Increase this if shadow banding occurs, decrease it if the shadow seems to be too detached.\n\t */\n\tpublic get epsilon():number\n\t{\n\t\treturn this._pEpsilon;\n\t}\n\n\tpublic set epsilon(value:number)\n\t{\n\t\tthis._pEpsilon = value;\n\t}\n}\n\nexport = ShadowMapMethodBase;","import Vector3D\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\nimport CubeTextureBase\t\t\t\t= require(\"awayjs-core/lib/textures/CubeTextureBase\");\nimport Texture2DBase\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport LightBase\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport DirectionalShadowMapper\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMapMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\n\n/**\n * ShadowMethodBase provides an abstract method for simple (non-wrapping) shadow map methods.\n */\nclass ShadowMethodBase extends ShadowMapMethodBase\n{\n\tpublic _pDepthMapCoordReg:ShaderRegisterElement;\n\tpublic _pUsePoint:boolean;\n\n\t/**\n\t * Creates a new ShadowMethodBase object.\n\t * @param castingLight The light used to cast shadows.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tthis._pUsePoint = (castingLight instanceof PointLight);\n\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsView = true;\n\t\tmethodVO.needsGlobalVertexPos = true;\n\t\tmethodVO.needsGlobalFragmentPos = this._pUsePoint;\n\t\tmethodVO.needsNormals = shaderObject.numLights > 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar vertexData:Array<number> = shaderObject.vertexConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index] = 1.0;\n\t\tfragmentData[index + 1] = 1/255.0;\n\t\tfragmentData[index + 2] = 1/65025.0;\n\t\tfragmentData[index + 3] = 1/16581375.0;\n\n\t\tfragmentData[index + 6] = 0;\n\t\tfragmentData[index + 7] = 1;\n\n\t\tif (this._pUsePoint) {\n\t\t\tfragmentData[index + 8] = 0;\n\t\t\tfragmentData[index + 9] = 0;\n\t\t\tfragmentData[index + 10] = 0;\n\t\t\tfragmentData[index + 11] = 1;\n\t\t}\n\n\t\tindex = methodVO.vertexConstantsIndex;\n\t\tif (index != -1) {\n\t\t\tvertexData[index] = .5;\n\t\t\tvertexData[index + 1] = .5;\n\t\t\tvertexData[index + 2] = 0.0;\n\t\t\tvertexData[index + 3] = 1.0;\n\t\t}\n\t}\n\n\t/**\n\t * Wrappers that override the vertex shader need to set this explicitly\n\t */\n\tpublic get _iDepthMapCoordReg():ShaderRegisterElement\n\t{\n\t\treturn this._pDepthMapCoordReg;\n\t}\n\n\tpublic set _iDepthMapCoordReg(value:ShaderRegisterElement)\n\t{\n\t\tthis._pDepthMapCoordReg = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._pDepthMapCoordReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._pUsePoint? this._pGetPointVertexCode(methodVO, regCache, sharedRegisters):this.pGetPlanarVertexCode(methodVO, regCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Gets the vertex code for shadow mapping with a point light.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic _pGetPointVertexCode(methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tmethodVO.vertexConstantsIndex = -1;\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Gets the vertex code for shadow mapping with a planar shadow map (fe: directional lights).\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic pGetPlanarVertexCode(methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeVertexVectorTemp();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeVertexConstant();\n\t\tvar depthMapProj:ShaderRegisterElement = regCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tthis._pDepthMapCoordReg = regCache.getFreeVarying();\n\t\tmethodVO.vertexConstantsIndex = dataReg.index*4;\n\n\t\t// todo: can epsilon be applied here instead of fragment shader?\n\n\t\tcode += \"m44 \" + temp + \", \" + sharedRegisters.globalPositionVertex + \", \" + depthMapProj + \"\\n\" + \"div \" + temp + \", \" + temp + \", \" + temp + \".w\\n\" + \"mul \" + temp + \".xy, \" + temp + \".xy, \" + dataReg + \".xy\\n\" + \"add \" + this._pDepthMapCoordReg + \", \" + temp + \", \" + dataReg + \".xxwz\\n\";\n\t\t//\"sub \" + this._pDepthMapCoordReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + this._pDepthMapCoordReg + \".w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._pUsePoint? this._pGetPointFragmentCode(methodVO, targetReg, registerCache, sharedRegisters):this._pGetPlanarFragmentCode(methodVO, targetReg, registerCache, sharedRegisters);\n\t\tcode += \"add \" + targetReg + \".w, \" + targetReg + \".w, fc\" + (methodVO.fragmentConstantsIndex/4 + 1) + \".y\\n\" + \"sat \" + targetReg + \".w, \" + targetReg + \".w\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * Gets the fragment code for shadow mapping with a planar shadow map.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _pGetPlanarFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Gets the fragment code for shadow mapping with a point light.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _pGetPointFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (!this._pUsePoint)\n\t\t\t(<DirectionalShadowMapper> this._pShadowMapper).iDepthProjection.copyRawDataTo(shaderObject.vertexConstantData, methodVO.vertexConstantsIndex + 4, true);\n\t}\n\n\t/**\n\t * Gets the fragment code for combining this method with a cascaded shadow map method.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param decodeRegister The register containing the data to decode the shadow map depth value.\n\t * @param depthTexture The texture containing the shadow map.\n\t * @param depthProjection The projection of the fragment relative to the light.\n\t * @param targetRegister The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthTexture:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new Error(\"This shadow method is incompatible with cascade shadows\");\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\n\t\tif (this._pUsePoint)\n\t\t\tfragmentData[index + 4] = -Math.pow(1/((<PointLight> this._pCastingLight).fallOff*this._pEpsilon), 2);\n\t\telse\n\t\t\tshaderObject.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1/((<DirectionalShadowMapper> this._pShadowMapper).depth*this._pEpsilon);\n\n\t\tfragmentData[index + 5] = 1 - this._pAlpha;\n\n\t\tif (this._pUsePoint) {\n\t\t\tvar pos:Vector3D = this._pCastingLight.scenePosition;\n\t\t\tfragmentData[index + 8] = pos.x;\n\t\t\tfragmentData[index + 9] = pos.y;\n\t\t\tfragmentData[index + 10] = pos.z;\n\t\t\t// used to decompress distance\n\t\t\tvar f:number = (<PointLight> this._pCastingLight).fallOff;\n\t\t\tfragmentData[index + 11] = 1/(2*f*f);\n\t\t}\n\n\t\tif (!this._pUsePoint)\n\t\t\tstage.activateRenderTexture(methodVO.texturesIndex, <Texture2DBase> this._pCastingLight.shadowMapper.depthMap);\n\t\t//else\n\t\t//\tstage.activateCubeRenderTexture(methodVO.texturesIndex, <CubeTextureBase> this._pCastingLight.shadowMapper.depthMap);\n\t}\n\n\t/**\n\t * Sets the method state for cascade shadow mapping.\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthrow new Error(\"This shadow method is incompatible with cascade shadows\");\n\t}\n}\n\nexport = ShadowMethodBase;","import NearDirectionalShadowMapper\t\t= require(\"awayjs-display/lib/materials/shadowmappers/NearDirectionalShadowMapper\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n// TODO: shadow mappers references in materials should be an interface so that this class should NOT extend ShadowMapMethodBase just for some delegation work\n/**\n * ShadowNearMethod provides a shadow map method that restricts the shadowed area near the camera to optimize\n * shadow map usage. This method needs to be used in conjunction with a NearDirectionalShadowMapper.\n *\n * @see away.lights.NearDirectionalShadowMapper\n */\nclass ShadowNearMethod extends ShadowMethodBase\n{\n\tprivate _baseMethod:ShadowMethodBase;\n\n\tprivate _fadeRatio:number;\n\tprivate _nearShadowMapper:NearDirectionalShadowMapper;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new ShadowNearMethod object.\n\t * @param baseMethod The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)\n\t * @param fadeRatio The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.\n\t */\n\tconstructor(baseMethod:ShadowMethodBase, fadeRatio:number = .1)\n\t{\n\t\tsuper(baseMethod.castingLight);\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis._baseMethod = baseMethod;\n\t\tthis._fadeRatio = fadeRatio;\n\t\tthis._nearShadowMapper = <NearDirectionalShadowMapper> this._pCastingLight.shadowMapper;\n\t\tif (!this._nearShadowMapper)\n\t\t\tthrow new Error(\"ShadowNearMethod requires a light that has a NearDirectionalShadowMapper instance assigned to shadowMapper.\");\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * The base shadow map method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():ShadowMethodBase\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:ShadowMethodBase)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\t\tthis._baseMethod.iInitConstants(shaderObject, methodVO);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index + 2] = 0;\n\t\tfragmentData[index + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitVO(shaderObject, methodVO);\n\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._baseMethod.alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._baseMethod.alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get epsilon():number\n\t{\n\t\treturn this._baseMethod.epsilon;\n\t}\n\n\tpublic set epsilon(value:number)\n\t{\n\t\tthis._baseMethod.epsilon = value;\n\t}\n\n\t/**\n\t * The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.\n\t */\n\tpublic get fadeRatio():number\n\t{\n\t\treturn this._fadeRatio;\n\t}\n\n\tpublic set fadeRatio(value:number)\n\t{\n\t\tthis._fadeRatio = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._baseMethod.iGetFragmentCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentSingleTemp();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode += \"abs \" + temp + \", \" + sharedRegisters.projectionFragment + \".w\\n\" +\n\t\t\t\"sub \" + temp + \", \" + temp + \", \" + dataReg + \".x\\n\" +\n\t\t\t\"mul \" + temp + \", \" + temp + \", \" + dataReg + \".y\\n\" +\n\t\t\t\"sat \" + temp + \", \" + temp + \"\\n\" +\n\t\t\t\"sub \" + temp + \", \" + dataReg + \".w,\" + temp + \"\\n\" +\n\t\t\t\"sub \" + targetReg + \".w, \" + dataReg + \".w,\" + targetReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + temp + \"\\n\" +\n\t\t\t\"sub \" + targetReg + \".w, \" + dataReg + \".w,\" + targetReg + \".w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iDeactivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderObjectBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\t// todo: move this to activate (needs camera)\n\t\tvar near:number = camera.projection.near;\n\t\tvar d:number = camera.projection.far - near;\n\t\tvar maxDistance:number = this._nearShadowMapper.coverageRatio;\n\t\tvar minDistance:number = maxDistance*(1 - this._fadeRatio);\n\n\t\tmaxDistance = near + maxDistance*d;\n\t\tminDistance = near + minDistance*d;\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index] = minDistance;\n\t\tfragmentData[index + 1] = 1/(maxDistance - minDistance);\n\n\t\tthis._baseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis._baseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._baseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = ShadowNearMethod;","import PoissonLookup\t\t\t\t\t= require(\"awayjs-core/lib/geom/PoissonLookup\");\n\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowSoftMethod provides a soft shadowing technique by randomly distributing sample points.\n */\nclass ShadowSoftMethod extends ShadowMethodBase\n{\n\tprivate _range:number = 1;\n\tprivate _numSamples:number /*int*/;\n\tprivate _offsets:Array<number>;\n\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t *\n\t * @param castingLight The light casting the shadows\n\t * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 32.\n\t */\n\tconstructor(castingLight:DirectionalLight, numSamples:number /*int*/ = 5, range:number = 1)\n\t{\n\t\tsuper(castingLight);\n\n\t\tthis.numSamples = numSamples;\n\t\tthis.range = range;\n\t}\n\n\t/**\n\t * The amount of samples to take for dithering. Minimum 1, maximum 32. The actual maximum may depend on the\n\t * complexity of the shader.\n\t */\n\tpublic get numSamples():number /*int*/\n\t{\n\t\treturn this._numSamples;\n\t}\n\n\tpublic set numSamples(value:number /*int*/)\n\t{\n\t\tthis._numSamples = value;\n\t\t\n\t\tif (this._numSamples < 1)\n\t\t\tthis._numSamples = 1;\n\t\telse if (this._numSamples > 32)\n\t\t\tthis._numSamples = 32;\n\n\t\tthis._offsets = PoissonLookup.getDistribution(this._numSamples);\n\t\t\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The range in the shadow map in which to distribute the samples.\n\t */\n\tpublic get range():number\n\t{\n\t\treturn this._range;\n\t}\n\n\tpublic set range(value:number)\n\t{\n\t\tthis._range = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shaderObject, methodVO);\n\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 8] = 1/this._numSamples;\n\t\tshaderObject.fragmentConstantData[methodVO.fragmentConstantsIndex + 9] = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar texRange:number = .5*this._range/this._pCastingLight.shadowMapper.depthMapSize;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.fragmentConstantsIndex + 10;\n\t\tvar len:number /*uint*/ = this._numSamples << 1;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i)\n\t\t\tdata[index + i] = this._offsets[i]*texRange;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// todo: move some things to super\n\t\tvar depthMapRegister:ShaderRegisterElement = regCache.getFreeTextureReg();\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\t\tmethodVO.texturesIndex = depthMapRegister.index;\n\n\t\treturn this.getSampleCode(regCache, depthMapRegister, decReg, targetReg, customDataReg);\n\t}\n\n\t/**\n\t * Adds the code for another tap to the shader code.\n\t * @param uv The uv register for the tap.\n\t * @param texture The texture register containing the depth map.\n\t * @param decode The register containing the depth map decoding data.\n\t * @param target The target register to add the tap comparison result.\n\t * @param regCache The register cache managing the registers.\n\t * @return\n\t */\n\tprivate addSample(uv:ShaderRegisterElement, texture:ShaderRegisterElement, decode:ShaderRegisterElement, target:ShaderRegisterElement, regCache:ShaderRegisterCache):string\n\t{\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\treturn \"tex \" + temp + \", \" + uv + \", \" + texture + \" <2d,nearest,clamp>\\n\" +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decode + \"\\n\" +\n\t\t\t\"slt \" + uv + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\" + // 0 if in shadow\n\t\t\t\"add \" + target + \".w, \" + target + \".w, \" + uv + \".w\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar texRange:number = this._range/this._pCastingLight.shadowMapper.depthMapSize;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar len:number /*uint*/ = this._numSamples << 1;\n\t\tdata[index] = 1/this._numSamples;\n\t\tdata[index + 1] = 0;\n\t\tindex += 2;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i)\n\t\t\tdata[index + i] = this._offsets[i]*texRange;\n\n\t\tif (len%4 == 0) {\n\t\t\tdata[index + len] = 0;\n\t\t\tdata[index + len + 1] = 0;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthTexture:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pDepthMapCoordReg = depthProjection;\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn this.getSampleCode(registerCache, depthTexture, decodeRegister, targetRegister, dataReg);\n\t}\n\n\t/**\n\t * Get the actual shader code for shadow mapping\n\t * @param regCache The register cache managing the registers.\n\t * @param depthTexture The texture register containing the depth map.\n\t * @param decodeRegister The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the shadow coverage.\n\t * @param dataReg The register containing additional data.\n\t */\n\tprivate getSampleCode(regCache:ShaderRegisterCache, depthTexture:ShaderRegisterElement, decodeRegister:ShaderRegisterElement, targetRegister:ShaderRegisterElement, dataReg:ShaderRegisterElement):string\n\t{\n\t\tvar uvReg:ShaderRegisterElement;\n\t\tvar code:string;\n\t\tvar offsets:Array<string> = new Array<string>(dataReg + \".zw\");\n\t\tuvReg = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\tvar numRegs:number /*int*/ = this._numSamples >> 1;\n\t\tfor (var i:number /*int*/ = 0; i < numRegs; ++i) {\n\t\t\tvar reg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\t\toffsets.push(reg + \".xy\");\n\t\t\toffsets.push(reg + \".zw\");\n\t\t}\n\n\t\tfor (i = 0; i < this._numSamples; ++i) {\n\t\t\tif (i == 0) {\n\t\t\t\tcode = \"add \" + uvReg + \", \" + this._pDepthMapCoordReg + \", \" + dataReg + \".zwyy\\n\" +\n\t\t\t\t\t\"tex \" + temp + \", \" + uvReg + \", \" + depthTexture + \" <2d,nearest,clamp>\\n\" +\n\t\t\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\t\t\"slt \" + targetRegister + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\"; // 0 if in shadow;\n\t\t\t} else {\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + offsets[i] + \"\\n\" +\n\t\t\t\t\tthis.addSample(uvReg, depthTexture, decodeRegister, targetRegister, regCache);\n\t\t\t}\n\t\t}\n\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\n\t\tcode += \"mul \" + targetRegister + \".w, \" + targetRegister + \".w, \" + dataReg + \".x\\n\"; // average\n\n\t\treturn code;\n\t}\n}\n\nexport = ShadowSoftMethod;","import ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularAnisotropicMethod provides a specular method resulting in anisotropic highlights. These are typical for\n * surfaces with microfacet details such as tiny grooves. In particular, this uses the Heidrich-Seidel distrubution.\n * The tangent vectors are used as the surface groove directions.\n */\nclass SpecularAnisotropicMethod extends SpecularBasicMethod\n{\n\t/**\n\t * Creates a new SpecularAnisotropicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsTangents = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight)\n\t\t\tt = this._pTotalLightColorReg;\n\t\telse {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\t// (sin(l,t) * sin(v,t) - cos(l,t)*cos(v,t)) ^ k\n\n\t\tcode += \"nrm \" + t + \".xyz, \" + sharedRegisters.tangentVarying + \".xyz\\n\" +\n\t\t\t\"dp3 \" + t + \".w, \" + t + \".xyz, \" + lightDirReg + \".xyz\\n\" +\n\t\t\t\"dp3 \" + t + \".z, \" + t + \".xyz, \" + sharedRegisters.viewDirFragment + \".xyz\\n\";\n\n\t\t// (sin(t.w) * sin(t.z) - cos(t.w)*cos(t.z)) ^ k\n\t\tcode += \"sin \" + t + \".x, \" + t + \".w\\n\" +\n\t\t\t\"sin \" + t + \".y, \" + t + \".z\\n\" +\n\t\t\t// (t.x * t.y - cos(t.w)*cos(t.z)) ^ k\n\t\t\t\"mul \" + t + \".x, \" + t + \".x, \" + t + \".y\\n\" +\n\t\t\t// (t.x - cos(t.w)*cos(t.z)) ^ k\n\t\t\t\"cos \" + t + \".z, \" + t + \".z\\n\" +\n\t\t\t\"cos \" + t + \".w, \" + t + \".w\\n\" +\n\t\t\t// (t.x - t.w*t.z) ^ k\n\t\t\t\"mul \" + t + \".w, \" + t + \".w, \" + t + \".z\\n\" +\n\t\t\t// (t.x - t.w) ^ k\n\t\t\t\"sub \" + t + \".w, \" + t + \".x, \" + t + \".w\\n\";\n\n\t\tif (this._pUseTexture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\n\t\t// attenuate\n\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \".xyz, \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n}\n\nexport = SpecularAnisotropicMethod;","import Texture2DBase\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLMipFilter\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLMipFilter\");\nimport ContextGLTextureFilter\t\t= require(\"awayjs-stagegl/lib/base/ContextGLTextureFilter\");\nimport ContextGLWrapMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLWrapMode\");\nimport IContextGL\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/IContextGL\");\n\nimport ShaderLightingObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport ShaderCompilerHelper\t\t\t= require(\"awayjs-renderergl/lib/utils/ShaderCompilerHelper\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport LightingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * SpecularBasicMethod provides the default shading method for Blinn-Phong specular highlights (an optimized but approximated\n * version of Phong specularity).\n */\nclass SpecularBasicMethod extends LightingMethodBase\n{\n\tpublic _pUseTexture:boolean;\n\tpublic _pTotalLightColorReg:ShaderRegisterElement;\n\tpublic _pSpecularTextureRegister:ShaderRegisterElement;\n\tpublic _pSpecularTexData:ShaderRegisterElement;\n\tpublic _pSpecularDataRegister:ShaderRegisterElement;\n\n\tprivate _texture:Texture2DBase;\n\n\tprivate _gloss:number = 50;\n\tprivate _specular:number = 1;\n\tprivate _specularColor:number = 0xffffff;\n\tpublic _iSpecularR:number = 1;\n\tpublic _iSpecularG:number = 1;\n\tpublic _iSpecularB:number = 1;\n\tpublic _pIsFirstLight:boolean;\n\n\t/**\n\t * Creates a new SpecularBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shaderObject:ShaderLightingObject):boolean\n\t{\n\t\tif (!shaderObject.numLights)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsUV = this._pUseTexture;\n\t\tmethodVO.needsNormals = shaderObject.numLights > 0;\n\t\tmethodVO.needsView = shaderObject.numLights > 0;\n\t}\n\n\t/**\n\t * The sharpness of the specular highlight.\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._gloss = value;\n\t}\n\n\t/**\n\t * The overall strength of the specular highlights.\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tif (value == this._specular)\n\t\t\treturn;\n\n\t\tthis._specular = value;\n\t\tthis.updateSpecular();\n\t}\n\n\t/**\n\t * The colour of the specular reflection of the surface.\n\t */\n\tpublic get specularColor():number\n\t{\n\t\treturn this._specularColor;\n\t}\n\n\tpublic set specularColor(value:number)\n\t{\n\t\tif (this._specularColor == value)\n\t\t\treturn;\n\n\t\t// specular is now either enabled or disabled\n\t\tif (this._specularColor == 0 || value == 0)\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._specularColor = value;\n\t\tthis.updateSpecular();\n\t}\n\n\t/**\n\t * The bitmapData that encodes the specular highlight strength per texel in the red channel, and the sharpness\n\t * in the green channel. You can use SpecularBitmapTexture if you want to easily set specular and gloss maps\n\t * from grayscale images, but prepared images are preferred.\n\t */\n\tpublic get texture():Texture2DBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:Texture2DBase)\n\t{\n\t\tvar b:boolean = ( value != null );\n\n\t\tif (b != this._pUseTexture || (value && this._texture && (value.hasMipmaps != this._texture.hasMipmaps || value.format != this._texture.format)))\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._pUseTexture = b;\n\t\tthis._texture = value;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\n\t\tvar m:any = method;\n\t\tvar bsm:SpecularBasicMethod = <SpecularBasicMethod> method;\n\n\t\tvar spec:SpecularBasicMethod = bsm;//SpecularBasicMethod(method);\n\t\tthis.texture = spec.texture;\n\t\tthis.specular = spec.specular;\n\t\tthis.specularColor = spec.specularColor;\n\t\tthis.gloss = spec.gloss;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._pTotalLightColorReg = null;\n\t\tthis._pSpecularTextureRegister = null;\n\t\tthis._pSpecularTexData = null;\n\t\tthis._pSpecularDataRegister = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tthis._pIsFirstLight = true;\n\n\t\tthis._pSpecularDataRegister = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = this._pSpecularDataRegister.index*4;\n\n\t\tif (this._pUseTexture) {\n\n\t\t\tthis._pSpecularTexData = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(this._pSpecularTexData, 1);\n\t\t\tthis._pSpecularTextureRegister = registerCache.getFreeTextureReg();\n\t\t\tmethodVO.texturesIndex = this._pSpecularTextureRegister.index;\n\t\t\tcode = ShaderCompilerHelper.getTex2DSampleCode(this._pSpecularTexData, sharedRegisters, this._pSpecularTextureRegister, this._texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);\n\n\t\t} else {\n\n\t\t\tthis._pSpecularTextureRegister = null;\n\t\t}\n\n\t\tthis._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(this._pTotalLightColorReg, 1);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\t// blinn-phong half vector model\n\t\tcode += \"add \" + t + \", \" + lightDirReg + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"nrm \" + t + \".xyz, \" + t + \"\\n\" +\n\t\t\t\t\"dp3 \" + t + \".w, \" + normalReg + \", \" + t + \"\\n\" +\n\t\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\";\n\n\t\tif (this._pUseTexture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else {\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\t\t}\n\n\t\t// attenuate\n\t\tif (shaderObject.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \", \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\n\t\tcode += \"dp3 \" + t + \".w, \" + normalReg + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + t + \".w\\n\" +\n\t\t\t\t\"mul \" + t + \", \" + t + \".w, \" + normalReg + \"\\n\" +\n\t\t\t\t\"sub \" + t + \", \" + t + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"tex \" + t + \", \" + t + \", \" + cubeMapReg + \" <cube,\" + (shaderObject.useSmoothTextures? \"linear\":\"nearest\") + \",miplinear>\\n\" +\n\t\t\t\t\"mul \" + t + \".xyz, \" + t + \", \" + weightRegister + \"\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (sharedRegisters.shadowTarget)\n\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + sharedRegisters.shadowTarget + \".w\\n\";\n\n\t\tif (this._pUseTexture) {\n\t\t\t// apply strength modulation from texture\n\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + this._pSpecularTexData + \".x\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(this._pSpecularTexData);\n\t\t}\n\n\t\t// apply material's specular reflection\n\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + this._pSpecularDataRegister + \"\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\";\n\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._pUseTexture) {\n\t\t\tstage.context.setSamplerStateAt(methodVO.texturesIndex, shaderObject.repeatTextures? ContextGLWrapMode.REPEAT:ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures? ContextGLTextureFilter.LINEAR:ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping? ContextGLMipFilter.MIPLINEAR:ContextGLMipFilter.MIPNONE);\n\t\t\tstage.activateTexture(methodVO.texturesIndex, this._texture);\n\t\t}\n\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._iSpecularR;\n\t\tdata[index + 1] = this._iSpecularG;\n\t\tdata[index + 2] = this._iSpecularB;\n\t\tdata[index + 3] = this._gloss;\n\t}\n\n\t/**\n\t * Updates the specular color data used by the render state.\n\t */\n\tprivate updateSpecular()\n\t{\n\t\tthis._iSpecularR = (( this._specularColor >> 16) & 0xff)/0xff*this._specular;\n\t\tthis._iSpecularG = (( this._specularColor >> 8) & 0xff)/0xff*this._specular;\n\t\tthis._iSpecularB = ( this._specularColor & 0xff)/0xff*this._specular;\n\t}\n}\n\nexport = SpecularBasicMethod;","import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport SpecularCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCompositeMethod\");\n\n/**\n * SpecularCelMethod provides a shading method to add specular cel (cartoon) shading.\n */\nclass SpecularCelMethod extends SpecularCompositeMethod\n{\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _smoothness:number = .1;\n\tprivate _specularCutOff:number = .1;\n\n\t/**\n\t * Creates a new SpecularCelMethod object.\n\t * @param specularCutOff The threshold at which the specular highlight should be shown.\n\t * @param baseMethod An optional specular method on which the cartoon shading is based. If ommitted, SpecularBasicMethod is used.\n\t */\n\tconstructor(specularCutOff:number = .5, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.clampSpecular(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._specularCutOff = specularCutOff;\n\t}\n\n\t/**\n\t * The smoothness of the highlight edge.\n\t */\n\tpublic get smoothness():number\n\t{\n\t\treturn this._smoothness;\n\t}\n\n\tpublic set smoothness(value:number)\n\t{\n\t\tthis._smoothness = value;\n\t}\n\n\t/**\n\t * The threshold at which the specular highlight should be shown.\n\t */\n\tpublic get specularCutOff():number\n\t{\n\t\treturn this._specularCutOff;\n\t}\n\n\tpublic set specularCutOff(value:number)\n\t{\n\t\tthis._specularCutOff = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Array<number> = shaderObject.fragmentConstantData;\n\t\tdata[index] = this._smoothness;\n\t\tdata[index + 1] = this._specularCutOff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * Snaps the specular shading strength of the wrapped method to zero or one, depending on whether or not it exceeds the specularCutOff\n\t * @param vo The MethodVO used to compile the current shader.\n\t * @param t The register containing the specular strength in the \"w\" component, and either the half-vector or the reflection vector in \"xyz\".\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared register data for this shader.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate clampSpecular(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + this._dataReg + \".y\\n\" + // x - cutoff\n\t\t\t\"div \" + targetReg + \".y, \" + targetReg + \".y, \" + this._dataReg + \".x\\n\" + // (x - cutoff)/epsilon\n\t\t\t\"sat \" + targetReg + \".y, \" + targetReg + \".y\\n\" +\n\t\t\t\"sge \" + targetReg + \".w, \" + targetReg + \".w, \" + this._dataReg + \".y\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n}\n\nexport = SpecularCelMethod;","import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularCompositeMethod provides a base class for specular methods that wrap a specular method to alter the\n * calculated specular reflection strength.\n */\nclass SpecularCompositeMethod extends SpecularBasicMethod\n{\n\tprivate _baseMethod:SpecularBasicMethod;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new <code>SpecularCompositeMethod</code> object.\n\t *\n\t * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature modSpecular(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the specular strength and t.xyz will contain the half-vector or the reflection vector.\n\t * @param baseMethod The base specular method on which this method's shading is based.\n\t */\n\tconstructor(modulateMethod:(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\tsuper();\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis._baseMethod = baseMethod || new SpecularBasicMethod();\n\t\tthis._baseMethod._iModulateMethod = modulateMethod;\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shaderObject:ShaderLightingObject, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitVO(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitConstants(shaderObject, methodVO);\n\t}\n\n\t/**\n\t * The base specular method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():SpecularBasicMethod\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._baseMethod.gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._baseMethod.gloss = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._baseMethod.specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tthis._baseMethod.specular = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis._baseMethod.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get texture():Texture2DBase\n\t{\n\t\treturn this._baseMethod.texture;\n\t}\n\n\tpublic set texture(value:Texture2DBase)\n\t{\n\t\tthis._baseMethod.texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iActivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shaderObject:ShaderLightingObject, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tthis._baseMethod.iSetRenderState(shaderObject, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shaderObject:ShaderObjectBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iDeactivate(shaderObject, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shaderObject:ShaderObjectBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetVertexCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentCodePerLight(shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @return\n\t */\n\tpublic iGetFragmentCodePerProbe(shaderObject:ShaderLightingObject, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentCodePerProbe(shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentPostLightingCode(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis._baseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._baseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = SpecularCompositeMethod;","import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport SpecularCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCompositeMethod\");\n\n/**\n * SpecularFresnelMethod provides a specular shading method that causes stronger highlights on grazing view angles.\n */\nclass SpecularFresnelMethod extends SpecularCompositeMethod\n{\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _incidentLight:boolean;\n\tprivate _fresnelPower:number = 5;\n\tprivate _normalReflectance:number = .028; // default value for skin\n\n\t/**\n\t * Creates a new SpecularFresnelMethod object.\n\t * @param basedOnSurface Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.\n\t * @param baseMethod The specular method to which the fresnel equation. Defaults to SpecularBasicMethod.\n\t */\n\tconstructor(basedOnSurface:boolean = true, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\t// may want to offer diff speculars\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.modulateSpecular(shaderObject, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._incidentLight = !basedOnSurface;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\n\t\tvar index:number = methodVO.secondaryFragmentConstantsIndex;\n\t\tshaderObject.fragmentConstantData[index + 2] = 1;\n\t\tshaderObject.fragmentConstantData[index + 3] = 0;\n\t}\n\n\t/**\n\t * Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.\n\t */\n\tpublic get basedOnSurface():boolean\n\t{\n\t\treturn !this._incidentLight;\n\t}\n\n\tpublic set basedOnSurface(value:boolean)\n\t{\n\t\tif (this._incidentLight != value)\n\t\t\treturn;\n\n\t\tthis._incidentLight = !value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.\n\t */\n\tpublic get fresnelPower():number\n\t{\n\t\treturn this._fresnelPower;\n\t}\n\n\tpublic set fresnelPower(value:number)\n\t{\n\t\tthis._fresnelPower = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.\n\t */\n\tpublic get normalReflectance():number\n\t{\n\t\treturn this._normalReflectance;\n\t}\n\n\tpublic set normalReflectance(value:number)\n\t{\n\t\tthis._normalReflectance = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shaderObject:ShaderLightingObject, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shaderObject, methodVO, stage);\n\n\t\tvar fragmentData:Array<number> = shaderObject.fragmentConstantData;\n\n\t\tvar index:number = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index] = this._normalReflectance;\n\t\tfragmentData[index + 1] = this._fresnelPower;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shaderObject:ShaderLightingObject, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\n\t\tconsole.log('SpecularFresnelMethod', 'iGetFragmentPreLightingCode', this._dataReg);\n\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shaderObject, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Applies the fresnel effect to the specular strength.\n\t *\n\t * @param vo The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param target The register containing the specular strength in the \"w\" component, and the half-vector/reflection vector in \"xyz\".\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared registers created by the compiler.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate modulateSpecular(shaderObject:ShaderObjectBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\n\t\tcode = \"dp3 \" + targetReg + \".y, \" + sharedRegisters.viewDirFragment + \".xyz, \" + (this._incidentLight? targetReg : sharedRegisters.normalFragment) + \".xyz\\n\" +   // dot(V, H)\n\t\t\t\"sub \" + targetReg + \".y, \" + this._dataReg + \".z, \" + targetReg + \".y\\n\" +             // base = 1-dot(V, H)\n\t\t\t\"pow \" + targetReg + \".x, \" + targetReg + \".y, \" + this._dataReg + \".y\\n\" +             // exp = pow(base, 5)\n\t\t\t\"sub \" + targetReg + \".y, \" + this._dataReg + \".z, \" + targetReg + \".y\\n\" +             // 1 - exp\n\t\t\t\"mul \" + targetReg + \".y, \" + this._dataReg + \".x, \" + targetReg + \".y\\n\" +             // f0*(1 - exp)\n\t\t\t\"add \" + targetReg + \".y, \" + targetReg + \".x, \" + targetReg + \".y\\n\" +          // exp + f0*(1 - exp)\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\n\n\t\tconsole.log('SpecularFresnelMethod', 'modulateSpecular', code);\n\n\t\treturn code;\n\t}\n\n}\n\nexport = SpecularFresnelMethod;","import ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularPhongMethod provides a specular method that provides Phong highlights.\n */\nclass SpecularPhongMethod extends SpecularBasicMethod\n{\n\t/**\n\t * Creates a new SpecularPhongMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shaderObject:ShaderLightingObject, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar viewDirReg:ShaderRegisterElement =sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement =sharedRegisters.normalFragment;\n\n\t\t// phong model\n\t\tcode += \"dp3 \" + t + \".w, \" + lightDirReg + \", \" + normalReg + \"\\n\" + // sca1 = light.normal\n\n\t\t\t//find the reflected light vector R\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + t + \".w\\n\" + // sca1 = sca1*2\n\t\t\t\"mul \" + t + \".xyz, \" + normalReg + \", \" + t + \".w\\n\" + // vec1 = normal*sca1\n\t\t\t\"sub \" + t + \".xyz, \" + t + \", \" + lightDirReg + \"\\n\" + // vec1 = vec1 - light (light vector is negative)\n\n\t\t\t//smooth the edge as incidence angle approaches 90\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" +sharedRegisters.commons + \".w\\n\" + // sca1 = sca1 + smoothtep;\n\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\" + // sca1 range 0 - 1\n\t\t\t\"mul \" + t + \".xyz, \" + t + \", \" + t + \".w\\n\" + // vec1 = vec1*sca1\n\n\t\t\t//find the dot product between R and V\n\t\t\t\"dp3 \" + t + \".w, \" + t + \", \" + viewDirReg + \"\\n\" + // sca1 = vec1.view\n\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\";\n\n\t\tif (this._pUseTexture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" + \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\n\t\t// attenuate\n\t\tif (shaderObject.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \".xyz, \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n}\n\nexport = SpecularPhongMethod;","class PassMode\n{\n\t/**\n\t *\n\t */\n\tpublic static EFFECTS:number = 0x01;\n\n\t/**\n\t *\n\t */\n\tpublic static LIGHTING:number = 0x02;\n\n\t/**\n\t *\n\t */\n\tpublic static SUPER_SHADER:number = 0x03;\n}\n\nexport = PassMode;","import ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Matrix3DUtils\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\nimport Event\t\t\t\t\t\t\t= require(\"awayjs-core/lib/events/Event\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport Texture2DBase\t\t\t\t\t= require(\"awayjs-core/lib/textures/Texture2DBase\");\n\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IRenderObjectOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport LightSources\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/LightSources\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/base/RendererBase\");\nimport ShaderLightingObject\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderLightingObject\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterElement\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport RenderPassBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/passes/RenderPassBase\");\nimport IRenderLightingPass\t\t\t\t= require(\"awayjs-renderergl/lib/passes/IRenderLightingPass\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport RenderMethodMaterialObject\t\t= require(\"awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodPassMode\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/passes/MethodPassMode\");\n\n/**\n * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,\n * using material methods to define their appearance.\n */\nclass MethodPass extends RenderPassBase implements IRenderLightingPass\n{\n\tprivate _maxLights:number = 3;\n\n\tprivate _mode:number = 0x03;\n\tprivate _material:MaterialBase;\n\tprivate _lightPicker:LightPickerBase;\n\n\tprivate _includeCasters:boolean = true;\n\n\tpublic _iColorTransformMethodVO:MethodVO;\n\tpublic _iNormalMethodVO:MethodVO;\n\tpublic _iAmbientMethodVO:MethodVO;\n\tpublic _iShadowMethodVO:MethodVO;\n\tpublic _iDiffuseMethodVO:MethodVO;\n\tpublic _iSpecularMethodVO:MethodVO;\n\tpublic _iMethodVOs:Array<MethodVO> = new Array<MethodVO>();\n\n\tpublic _numEffectDependencies:number = 0;\n\n\tprivate _onLightsChangeDelegate:(event:Event) => void;\n\tprivate _onMethodInvalidatedDelegate:(event:ShadingMethodEvent) => void;\n\n\tpublic numDirectionalLights:number = 0;\n\n\tpublic numPointLights:number = 0;\n\n\tpublic numLightProbes:number = 0;\n\n\tpublic pointLightsOffset:number = 0;\n\t\n\tpublic directionalLightsOffset:number= 0;\n\t\n\tpublic lightProbesOffset:number = 0;\n\t\n\t/**\n\t *\n\t */\n\tpublic get mode():number\n\t{\n\t\treturn this._mode;\n\t}\n\n\tpublic set mode(value:number)\n\t{\n\t\tif (this._mode == value)\n\t\t\treturn;\n\t\t\n\t\tthis._mode = value;\n\n\t\tthis._updateLights();\n\t}\n\n\t/**\n\t * Indicates whether or not shadow casting lights need to be included.\n\t */\n\tpublic get includeCasters():boolean\n\t{\n\t\treturn this._includeCasters;\n\t}\n\n\tpublic set includeCasters(value:boolean)\n\t{\n\t\tif (this._includeCasters == value)\n\t\t\treturn;\n\n\t\tthis._includeCasters = value;\n\n\t\tthis._updateLights();\n\t}\n\n\t/**\n\t * \n\t * @returns {LightPickerBase}\n\t */\n\tpublic get lightPicker():LightPickerBase\n\t{\n\t\treturn this._lightPicker;\n\t}\n\n\tpublic set lightPicker(value:LightPickerBase)\n\t{\n\t\tif (this._lightPicker == value)\n\t\t\treturn;\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.removeEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\tthis._lightPicker = value;\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.addEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\tthis._updateLights();\n\t}\n\t\n\t/**\n\t * Whether or not to use fallOff and radius properties for lights. This can be used to improve performance and\n\t * compatibility for constrained mode.\n\t */\n\tpublic get enableLightFallOff():boolean\n\t{\n\t\treturn this._material.enableLightFallOff;\n\t}\n\n\t/**\n\t * Define which light source types to use for diffuse reflections. This allows choosing between regular lights\n\t * and/or light probes for diffuse reflections.\n\t *\n\t * @see away3d.materials.LightSources\n\t */\n\tpublic get diffuseLightSources():number\n\t{\n\t\treturn this._material.diffuseLightSources;\n\t}\n\n\t/**\n\t * Define which light source types to use for specular reflections. This allows choosing between regular lights\n\t * and/or light probes for specular reflections.\n\t *\n\t * @see away3d.materials.LightSources\n\t */\n\tpublic get specularLightSources():number\n\t{\n\t\treturn this._material.specularLightSources;\n\t}\n\n\t/**\n\t * Creates a new CompiledPass object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(mode:number, renderObject:RenderMethodMaterialObject, renderObjectOwner:MaterialBase, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(renderObject, renderObjectOwner, renderableClass, stage);\n\n\t\tthis._mode = mode;\n\n\t\tthis._material = renderObjectOwner;\n\n\t\tthis._onLightsChangeDelegate = (event:Event) => this.onLightsChange(event);\n\t\t\n\t\tthis._onMethodInvalidatedDelegate = (event:ShadingMethodEvent) => this.onMethodInvalidated(event);\n\n\t\tthis.lightPicker = renderObjectOwner.lightPicker;\n\n\t\tif (this._shader == null)\n\t\t\tthis._updateShader();\n\t}\n\n\tprivate _updateShader()\n\t{\n\t\tif ((this.numDirectionalLights || this.numPointLights || this.numLightProbes) && !(this._shader instanceof ShaderLightingObject)) {\n\t\t\tif (this._shader != null)\n\t\t\t\tthis._shader.dispose();\n\n\t\t\tthis._shader = new ShaderLightingObject(this._renderableClass, this, this._stage);\n\t\t} else if (!(this._shader instanceof ShaderObjectBase)) {\n\t\t\tif (this._shader != null)\n\t\t\t\tthis._shader.dispose();\n\n\t\t\tthis._shader = new ShaderObjectBase(this._renderableClass, this, this._stage);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the unchanging constant data for this material.\n\t */\n\tpublic _iInitConstantData(shaderObject:ShaderObjectBase)\n\t{\n\t\tsuper._iInitConstantData(shaderObject);\n\n\t\t//Updates method constants if they have changed.\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tthis._iMethodVOs[i].method.iInitConstants(shaderObject, this._iMethodVOs[i]);\n\t}\n\n\t/**\n\t * The ColorTransform object to transform the colour of the material with. Defaults to null.\n\t */\n\tpublic get colorTransform():ColorTransform\n\t{\n\t\treturn this.colorTransformMethod? this.colorTransformMethod.colorTransform : null;\n\t}\n\n\tpublic set colorTransform(value:ColorTransform)\n\t{\n\t\tif (value) {\n\t\t\tif (this.colorTransformMethod == null)\n\t\t\t\tthis.colorTransformMethod = new EffectColorTransformMethod();\n\n\t\t\tthis.colorTransformMethod.colorTransform = value;\n\n\t\t} else if (!value) {\n\t\t\tif (this.colorTransformMethod)\n\t\t\t\tthis.colorTransformMethod = null;\n\t\t}\n\t}\n\n\t/**\n\t * The EffectColorTransformMethod object to transform the colour of the material with. Defaults to null.\n\t */\n\tpublic get colorTransformMethod():EffectColorTransformMethod\n\t{\n\t\treturn this._iColorTransformMethodVO? <EffectColorTransformMethod> this._iColorTransformMethodVO.method : null;\n\t}\n\n\tpublic set colorTransformMethod(value:EffectColorTransformMethod)\n\t{\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iColorTransformMethodVO) {\n\t\t\tthis._removeDependency(this._iColorTransformMethodVO);\n\t\t\tthis._iColorTransformMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iColorTransformMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iColorTransformMethodVO);\n\t\t}\n\t}\n\n\tprivate _removeDependency(methodVO:MethodVO, effectsDependency:boolean = false)\n\t{\n\t\tvar index:number = this._iMethodVOs.indexOf(methodVO);\n\n\t\tif (!effectsDependency)\n\t\t\tthis._numEffectDependencies--;\n\n\t\tmethodVO.method.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onMethodInvalidatedDelegate);\n\t\tthis._iMethodVOs.splice(index, 1);\n\n\t\tthis.invalidatePass();\n\t}\n\n\tprivate _addDependency(methodVO:MethodVO, effectsDependency:boolean = false, index:number = -1)\n\t{\n\t\tmethodVO.method.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onMethodInvalidatedDelegate);\n\n\t\tif (effectsDependency) {\n\t\t\tif (index != -1)\n\t\t\t\tthis._iMethodVOs.splice(index + this._iMethodVOs.length - this._numEffectDependencies, 0, methodVO);\n\t\t\telse\n\t\t\t\tthis._iMethodVOs.push(methodVO);\n\t\t\tthis._numEffectDependencies++;\n\t\t} else {\n\t\t\tthis._iMethodVOs.splice(this._iMethodVOs.length - this._numEffectDependencies, 0, methodVO);\n\t\t}\n\n\t\tthis.invalidatePass();\n\t}\n\n\t/**\n\t * Appends an \"effect\" shading method to the shader. Effect methods are those that do not influence the lighting\n\t * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the\n\t * methods added prior.\n\t */\n\tpublic addEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._addDependency(new MethodVO(method), true);\n\t}\n\n\t/**\n\t * The number of \"effect\" methods added to the material.\n\t */\n\tpublic get numEffectMethods():number\n\t{\n\t\treturn this._numEffectDependencies;\n\t}\n\n\t/**\n\t * Queries whether a given effects method was added to the material.\n\t *\n\t * @param method The method to be queried.\n\t * @return true if the method was added to the material, false otherwise.\n\t */\n\tpublic hasEffectMethod(method:EffectMethodBase):boolean\n\t{\n\t\treturn this.getDependencyForMethod(method) != null;\n\t}\n\n\t/**\n\t * Returns the method added at the given index.\n\t * @param index The index of the method to retrieve.\n\t * @return The method at the given index.\n\t */\n\tpublic getEffectMethodAt(index:number):EffectMethodBase\n\t{\n\t\tif (index < 0 || index > this._numEffectDependencies - 1)\n\t\t\treturn null;\n\n\t\treturn <EffectMethodBase> this._iMethodVOs[index + this._iMethodVOs.length - this._numEffectDependencies].method;\n\t}\n\n\t/**\n\t * Adds an effect method at the specified index amongst the methods already added to the material. Effect\n\t * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,\n\t * etc. The method will be applied to the result of the methods with a lower index.\n\t */\n\tpublic addEffectMethodAt(method:EffectMethodBase, index:number)\n\t{\n\t\tthis._addDependency(new MethodVO(method), true, index);\n\t}\n\n\t/**\n\t * Removes an effect method from the material.\n\t * @param method The method to be removed.\n\t */\n\tpublic removeEffectMethod(method:EffectMethodBase)\n\t{\n\t\tvar methodVO:MethodVO = this.getDependencyForMethod(method);\n\n\t\tif (methodVO != null)\n\t\t\tthis._removeDependency(methodVO, true);\n\t}\n\n\n\t/**\n\t * remove an effect method at the specified index from the material.\n\t */\n\tpublic removeEffectMethodAt(index:number)\n\t{\n\t\tif (index < 0 || index > this._numEffectDependencies - 1)\n\t\t\treturn;\n\n\t\tvar methodVO:MethodVO = this._iMethodVOs[index + this._iMethodVOs.length - this._numEffectDependencies];\n\n\t\tif (methodVO != null)\n\t\t\tthis._removeDependency(methodVO, true);\n\t}\n\n\n\tprivate getDependencyForMethod(method:EffectMethodBase):MethodVO\n\t{\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tif (this._iMethodVOs[i].method == method)\n\t\t\t\treturn this._iMethodVOs[i];\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.\n\t */\n\tpublic get normalMethod():NormalBasicMethod\n\t{\n\t\treturn this._iNormalMethodVO? <NormalBasicMethod> this._iNormalMethodVO.method : null;\n\t}\n\n\tpublic set normalMethod(value:NormalBasicMethod)\n\t{\n\t\tif (this._iNormalMethodVO && this._iNormalMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iNormalMethodVO) {\n\t\t\tthis._removeDependency(this._iNormalMethodVO);\n\t\t\tthis._iNormalMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iNormalMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iNormalMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.\n\t */\n\tpublic get ambientMethod():AmbientBasicMethod\n\t{\n\t\treturn this._iAmbientMethodVO? <AmbientBasicMethod> this._iAmbientMethodVO.method : null;\n\t}\n\n\tpublic set ambientMethod(value:AmbientBasicMethod)\n\t{\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iAmbientMethodVO) {\n\t\t\tthis._removeDependency(this._iAmbientMethodVO);\n\t\t\tthis._iAmbientMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iAmbientMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iAmbientMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.\n\t */\n\tpublic get shadowMethod():ShadowMapMethodBase\n\t{\n\t\treturn this._iShadowMethodVO? <ShadowMapMethodBase> this._iShadowMethodVO.method : null;\n\t}\n\n\tpublic set shadowMethod(value:ShadowMapMethodBase)\n\t{\n\t\tif (this._iShadowMethodVO && this._iShadowMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iShadowMethodVO) {\n\t\t\tthis._removeDependency(this._iShadowMethodVO);\n\t\t\tthis._iShadowMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iShadowMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iShadowMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.\n\t */\n\tpublic get diffuseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this._iDiffuseMethodVO? <DiffuseBasicMethod> this._iDiffuseMethodVO.method : null;\n\t}\n\n\tpublic set diffuseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iDiffuseMethodVO) {\n\t\t\tthis._removeDependency(this._iDiffuseMethodVO);\n\t\t\tthis._iDiffuseMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iDiffuseMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iDiffuseMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.\n\t */\n\tpublic get specularMethod():SpecularBasicMethod\n\t{\n\t\treturn this._iSpecularMethodVO? <SpecularBasicMethod> this._iSpecularMethodVO.method : null;\n\t}\n\n\tpublic set specularMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iSpecularMethodVO) {\n\t\t\tthis._removeDependency(this._iSpecularMethodVO);\n\t\t\tthis._iSpecularMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iSpecularMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iSpecularMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.removeEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\t\t\n\t\twhile (this._iMethodVOs.length)\n\t\t\tthis._removeDependency(this._iMethodVOs[0]);\n\n\t\tthis._iMethodVOs = null;\n\t}\n\n\t/**\n\t * Called when any method's shader code is invalidated.\n\t */\n\tprivate onMethodInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.invalidatePass();\n\t}\n\n\t// RENDER LOOP\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera)\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iActivate(this._shader, methodVO, this._stage);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t *\n\t * @param renderable\n\t * @param stage\n\t * @param camera\n\t */\n\tpublic _iRender(renderable:RenderableBase, camera:Camera, viewProjection:Matrix3D)\n\t{\n\t\tsuper._iRender(renderable, camera, viewProjection);\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iSetRenderState(this._shader, methodVO, renderable, this._stage, camera);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iDeactivate()\n\t{\n\t\tsuper._iDeactivate();\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iDeactivate(this._shader, methodVO, this._stage);\n\t\t}\n\t}\n\n\tpublic _iIncludeDependencies(shaderObject:ShaderLightingObject)\n\t{\n\t\tsuper._iIncludeDependencies(shaderObject);\n\n\t\t//TODO: fragment animtion should be compatible with lighting pass\n\t\tshaderObject.usesFragmentAnimation = Boolean(this._mode == MethodPassMode.SUPER_SHADER);\n\n\t\tif (!shaderObject.usesTangentSpace && this.numPointLights > 0 && shaderObject.usesLights) {\n\t\t\tshaderObject.globalPosDependencies++;\n\n\t\t\tif (Boolean(this._mode & MethodPassMode.EFFECTS))\n\t\t\t\tshaderObject.usesGlobalPosFragment = true;\n\t\t}\n\n\t\tvar i:number;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis.setupAndCountDependencies(shaderObject, this._iMethodVOs[i]);\n\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis._iMethodVOs[i].useMethod = this._iMethodVOs[i].method.iIsUsed(shaderObject);\n\t}\n\n\n\t/**\n\t * Counts the dependencies for a given method.\n\t * @param method The method to count the dependencies for.\n\t * @param methodVO The method's data for this material.\n\t */\n\tprivate setupAndCountDependencies(shaderObject:ShaderObjectBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.reset();\n\n\t\tmethodVO.method.iInitVO(shaderObject, methodVO);\n\n\t\tif (methodVO.needsProjection)\n\t\t\tshaderObject.projectionDependencies++;\n\n\t\tif (methodVO.needsGlobalVertexPos) {\n\n\t\t\tshaderObject.globalPosDependencies++;\n\n\t\t\tif (methodVO.needsGlobalFragmentPos)\n\t\t\t\tshaderObject.usesGlobalPosFragment = true;\n\n\t\t} else if (methodVO.needsGlobalFragmentPos) {\n\t\t\tshaderObject.globalPosDependencies++;\n\t\t\tshaderObject.usesGlobalPosFragment = true;\n\t\t}\n\n\t\tif (methodVO.needsNormals)\n\t\t\tshaderObject.normalDependencies++;\n\n\t\tif (methodVO.needsTangents)\n\t\t\tshaderObject.tangentDependencies++;\n\n\t\tif (methodVO.needsView)\n\t\t\tshaderObject.viewDirDependencies++;\n\n\t\tif (methodVO.needsUV)\n\t\t\tshaderObject.uvDependencies++;\n\n\t\tif (methodVO.needsSecondaryUV)\n\t\t\tshaderObject.secondaryUVDependencies++;\n\t}\n\n\tpublic _iGetPreLightingVertexCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.useMethod)\n\t\t\tcode += this._iAmbientMethodVO.method.iGetVertexCode(shaderObject, this._iAmbientMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod)\n\t\t\tcode += this._iDiffuseMethodVO.method.iGetVertexCode(shaderObject, this._iDiffuseMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod)\n\t\t\tcode += this._iSpecularMethodVO.method.iGetVertexCode(shaderObject, this._iSpecularMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPreLightingFragmentCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.useMethod) {\n\t\t\tcode += this._iAmbientMethodVO.method.iGetFragmentCode(shaderObject, this._iAmbientMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\n\t\t\tif (this._iAmbientMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\n\t\t\tif (this._iAmbientMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod)\n\t\t\tcode += (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentPreLightingCode(<ShaderLightingObject> shaderObject, this._iDiffuseMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod)\n\t\t\tcode += (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentPreLightingCode(<ShaderLightingObject> shaderObject, this._iSpecularMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPerLightDiffuseFragmentCode(shaderObject:ShaderLightingObject, lightDirReg:ShaderRegisterElement, diffuseColorReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentCodePerLight(shaderObject, this._iDiffuseMethodVO, lightDirReg, diffuseColorReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerLightSpecularFragmentCode(shaderObject:ShaderLightingObject, lightDirReg:ShaderRegisterElement, specularColorReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentCodePerLight(shaderObject, this._iSpecularMethodVO, lightDirReg, specularColorReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerProbeDiffuseFragmentCode(shaderObject:ShaderLightingObject, texReg:ShaderRegisterElement, weightReg:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentCodePerProbe(shaderObject, this._iDiffuseMethodVO, texReg, weightReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerProbeSpecularFragmentCode(shaderObject:ShaderLightingObject, texReg:ShaderRegisterElement, weightReg:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentCodePerProbe(shaderObject, this._iSpecularMethodVO, texReg, weightReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPostLightingVertexCode(shaderObject:ShaderLightingObject, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tcode += this._iShadowMethodVO.method.iGetVertexCode(shaderObject, this._iShadowMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPostLightingFragmentCode(shaderObject:ShaderLightingObject, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (shaderObject.useAlphaPremultiplied && this._pEnableBlending) {\n\t\t\tcode += \"add \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.commons + \".z\\n\" +\n\t\t\t\"div \" + sharedRegisters.shadedTarget + \".xyz, \" + sharedRegisters.shadedTarget + \", \" + sharedRegisters.shadedTarget + \".w\\n\" +\n\t\t\t\"sub \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.commons + \".z\\n\" +\n\t\t\t\"sat \" + sharedRegisters.shadedTarget + \".xyz, \" + sharedRegisters.shadedTarget + \"\\n\";\n\t\t}\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tcode += this._iShadowMethodVO.method.iGetFragmentCode(shaderObject, this._iShadowMethodVO, sharedRegisters.shadowTarget, registerCache, sharedRegisters);\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod) {\n\t\t\tcode += (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentPostLightingCode(shaderObject, this._iDiffuseMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\n\t\t\t// resolve other dependencies as well?\n\t\t\tif (this._iDiffuseMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\n\t\t\tif (this._iDiffuseMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod) {\n\t\t\tcode += (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentPostLightingCode(shaderObject, this._iSpecularMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\t\t\tif (this._iSpecularMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\t\t\tif (this._iSpecularMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.shadowTarget);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Indicates whether or not normals are allowed in tangent space. This is only the case if no object-space\n\t * dependencies exist.\n\t */\n\tpublic _pUsesTangentSpace(shaderObject:ShaderLightingObject):boolean\n\t{\n\t\tif (shaderObject.usesProbes)\n\t\t\treturn false;\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod && !methodVO.method.iUsesTangentSpace())\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Indicates whether or not normals are output in tangent space.\n\t */\n\tpublic _pOutputsTangentNormals(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn (<NormalBasicMethod> this._iNormalMethodVO.method).iOutputsTangentNormals();\n\t}\n\n\t/**\n\t * Indicates whether or not normals are output by the pass.\n\t */\n\tpublic _pOutputsNormals(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn this._iNormalMethodVO && this._iNormalMethodVO.useMethod;\n\t}\n\n\n\tpublic _iGetNormalVertexCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._iNormalMethodVO.method.iGetVertexCode(shaderObject, this._iNormalMethodVO, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetNormalFragmentCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._iNormalMethodVO.method.iGetFragmentCode(shaderObject, this._iNormalMethodVO, sharedRegisters.normalFragment, registerCache, sharedRegisters);\n\n\t\tif (this._iNormalMethodVO.needsView)\n\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\n\t\tif (this._iNormalMethodVO.needsGlobalFragmentPos || this._iNormalMethodVO.needsGlobalVertexPos)\n\t\t\tregisterCache.removeVertexTempUsage(sharedRegisters.globalPositionVertex);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetVertexCode(shaderObject:ShaderObjectBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = len - this._numEffectDependencies; i < len; i++) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod) {\n\t\t\t\tcode += methodVO.method.iGetVertexCode(shaderObject, methodVO, regCache, sharedReg);\n\n\t\t\t\tif (methodVO.needsGlobalVertexPos || methodVO.needsGlobalFragmentPos)\n\t\t\t\t\tregCache.removeVertexTempUsage(sharedReg.globalPositionVertex);\n\t\t\t}\n\t\t}\n\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.useMethod)\n\t\t\tcode += this._iColorTransformMethodVO.method.iGetVertexCode(shaderObject, this._iColorTransformMethodVO, regCache, sharedReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shaderObject:ShaderObjectBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar alphaReg:ShaderRegisterElement;\n\n\t\tif (this.preserveAlpha && this._numEffectDependencies > 0) {\n\t\t\talphaReg = regCache.getFreeFragmentSingleTemp();\n\t\t\tregCache.addFragmentTempUsages(alphaReg, 1);\n\t\t\tcode += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\n\t\t}\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = len - this._numEffectDependencies; i < len; i++) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod) {\n\t\t\t\tcode += methodVO.method.iGetFragmentCode(shaderObject, methodVO, sharedReg.shadedTarget, regCache, sharedReg);\n\n\t\t\t\tif (methodVO.needsNormals)\n\t\t\t\t\tregCache.removeFragmentTempUsage(sharedReg.normalFragment);\n\n\t\t\t\tif (methodVO.needsView)\n\t\t\t\t\tregCache.removeFragmentTempUsage(sharedReg.viewDirFragment);\n\n\t\t\t}\n\t\t}\n\n\t\tif (this.preserveAlpha && this._numEffectDependencies > 0) {\n\t\t\tcode += \"mov \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\n\t\t\tregCache.removeFragmentTempUsage(alphaReg);\n\t\t}\n\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.useMethod)\n\t\t\tcode += this._iColorTransformMethodVO.method.iGetFragmentCode(shaderObject, this._iColorTransformMethodVO, sharedReg.shadedTarget, regCache, sharedReg);\n\n\t\treturn code;\n\t}\n\t/**\n\t * Indicates whether the shader uses any shadows.\n\t */\n\tpublic _iUsesShadows(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn Boolean(this._iShadowMethodVO && (this._lightPicker.castingDirectionalLights.length > 0 || this._lightPicker.castingPointLights.length > 0));\n\t}\n\n\t/**\n\t * Indicates whether the shader uses any specular component.\n\t */\n\tpublic _iUsesSpecular(shaderObject:ShaderObjectBase):boolean\n\t{\n\t\treturn Boolean(this._iSpecularMethodVO);\n\t}\n\n\n\tprivate onLightsChange(event:Event)\n\t{\n\t\tthis._updateLights();\n\t}\n\n\tprivate _updateLights()\n\t{\n\t\tvar numDirectionalLightsOld:number = this.numDirectionalLights;\n\t\tvar numPointLightsOld:number = this.numPointLights;\n\t\tvar numLightProbesOld:number = this.numLightProbes;\n\n\t\tif (this._lightPicker && (this._mode & MethodPassMode.LIGHTING)) {\n\t\t\tthis.numDirectionalLights = this.calculateNumDirectionalLights(this._lightPicker.numDirectionalLights);\n\t\t\tthis.numPointLights = this.calculateNumPointLights(this._lightPicker.numPointLights);\n\t\t\tthis.numLightProbes = this.calculateNumProbes(this._lightPicker.numLightProbes);\n\n\t\t\tif (this._includeCasters) {\n\t\t\t\tthis.numDirectionalLights += this._lightPicker.numCastingDirectionalLights;\n\t\t\t\tthis.numPointLights += this._lightPicker.numCastingPointLights;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.numDirectionalLights = 0;\n\t\t\tthis.numPointLights = 0;\n\t\t\tthis.numLightProbes = 0;\n\t\t}\n\n\t\tif (numDirectionalLightsOld != this.numDirectionalLights || numPointLightsOld != this.numPointLights || numLightProbesOld != this.numLightProbes) {\n\t\t\tthis._updateShader();\n\n\t\t\tthis.invalidatePass();\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the amount of directional lights this material will support.\n\t * @param numDirectionalLights The maximum amount of directional lights to support.\n\t * @return The amount of directional lights this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumDirectionalLights(numDirectionalLights:number):number\n\t{\n\t\treturn Math.min(numDirectionalLights - this.directionalLightsOffset, this._maxLights);\n\t}\n\n\t/**\n\t * Calculates the amount of point lights this material will support.\n\t * @param numDirectionalLights The maximum amount of point lights to support.\n\t * @return The amount of point lights this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumPointLights(numPointLights:number):number\n\t{\n\t\tvar numFree:number = this._maxLights - this.numDirectionalLights;\n\t\treturn Math.min(numPointLights - this.pointLightsOffset, numFree);\n\t}\n\n\t/**\n\t * Calculates the amount of light probes this material will support.\n\t * @param numDirectionalLights The maximum amount of light probes to support.\n\t * @return The amount of light probes this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumProbes(numLightProbes:number):number\n\t{\n\t\tvar numChannels:number = 0;\n\n\t\tif ((this.specularLightSources & LightSources.PROBES) != 0)\n\t\t\t++numChannels;\n\n\t\tif ((this.diffuseLightSources & LightSources.PROBES) != 0)\n\t\t\t++numChannels;\n\n\t\t// 4 channels available\n\t\treturn Math.min(numLightProbes - this.lightProbesOffset, (4/numChannels) | 0);\n\t}\n}\n\nexport = MethodPass;","import Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport RenderTexture\t\t\t\t\t= require(\"awayjs-core/lib/textures/RenderTexture\");\n\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderObjectOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\n\nimport ContextGLProgramType\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nimport IContextGL\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/IContextGL\");\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/base/RendererBase\");\nimport RenderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport ShaderObjectBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderObjectBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/ShaderRegisterData\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\nimport RenderPassBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/passes/RenderPassBase\");\n\n/**\n * The SingleObjectDepthPass provides a material pass that renders a single object to a depth map from the point\n * of view from a light.\n */\nclass SingleObjectDepthPass extends RenderPassBase\n{\n\tprivate _textures:Object;\n\tprivate _projections:Object;\n\tprivate _textureSize:number /*uint*/ = 512;\n\tprivate _polyOffset:Array<number> = Array<number>(15, 0, 0, 0);\n\tprivate _enc:Array<number>;\n\tprivate _projectionTexturesInvalid:Boolean = true;\n\n\t/**\n\t * The size of the depth map texture to render to.\n\t */\n\tpublic get textureSize():number\n\t{\n\t\treturn this._textureSize;\n\t}\n\n\tpublic set textureSize(value:number)\n\t{\n\t\tthis._textureSize = value;\n\t}\n\n\t/**\n\t * The amount by which the rendered object will be inflated, to prevent depth map rounding errors.\n\t */\n\tpublic get polyOffset():number\n\t{\n\t\treturn this._polyOffset[0];\n\t}\n\n\tpublic set polyOffset(value:number)\n\t{\n\t\tthis._polyOffset[0] = value;\n\t}\n\n\t/**\n\t * Creates a new SingleObjectDepthPass object.\n\t */\n\tconstructor(renderObject:RenderObjectBase, renderObjectOwner:IRenderObjectOwner, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(renderObject, renderObjectOwner, renderableClass, stage);\n\n\t\t//this._pNumUsedStreams = 2;\n\t\t//this._pNumUsedVertexConstants = 7;\n\t\t//this._enc = Array<number>(1.0, 255.0, 65025.0, 16581375.0, 1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);\n\t\t//\n\t\t//this._pAnimatableAttributes = Array<string>(\"va0\", \"va1\");\n\t\t//this._pAnimationTargetRegisters = Array<string>(\"vt0\", \"vt1\");\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._textures) {\n\t\t\tfor (var key in this._textures) {\n\t\t\t\tvar texture:RenderTexture = this._textures[key];\n\t\t\t\ttexture.dispose();\n\t\t\t}\n\t\t\tthis._textures = null;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the projection textures used to contain the depth renders.\n\t */\n\tprivate updateProjectionTextures()\n\t{\n\t\tif (this._textures) {\n\t\t\tfor (var key in this._textures) {\n\t\t\t\tvar texture:RenderTexture = this._textures[key];\n\t\t\t\ttexture.dispose();\n\t\t\t}\n\t\t}\n\n\t\tthis._textures = new Object();\n\t\tthis._projections = new Object();\n\t\tthis._projectionTexturesInvalid = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetVertexCode():string\n\t{\n\t\tvar code:string;\n\t\t// offset\n\t\tcode = \"mul vt7, vt1, vc4.x\t\\n\" +\n\t\t\t\t\"add vt7, vt7, vt0\\n\" +\n\t\t\t\t\"mov vt7.w, vt0.w\\n\";\n\t\t// project\n\t\tcode += \"m44 vt2, vt7, vc0\\n\" +\n\t\t\t\t\"mov op, vt2\\n\";\n\n\t\t// perspective divide\n\t\tcode += \"div v0, vt2, vt2.w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shaderObject:ShaderObjectBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\t// encode float -> rgba\n\t\tcode += \"mul ft0, fc0, v0.z\\n\" +\n\t\t\t\t\"frc ft0, ft0\\n\" +\n\t\t\t\t\"mul ft1, ft0.yzww, fc1\\n\" +\n\t\t\t\t\"sub ft0, ft0, ft1\\n\" +\n\t\t\t\t\"mov oc, ft0\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Gets the depth maps rendered for this object from all lights.\n\t * @param renderable The renderable for which to retrieve the depth maps.\n\t * @param stage3DProxy The Stage3DProxy object currently used for rendering.\n\t * @return A list of depth map textures for all supported lights.\n\t */\n\tpublic _iGetDepthMap(renderable:RenderableBase):RenderTexture\n\t{\n\t\treturn this._textures[renderable.renderableOwner.id];\n\t}\n\n\t/**\n\t * Retrieves the depth map projection maps for all lights.\n\t * @param renderable The renderable for which to retrieve the projection maps.\n\t * @return A list of projection maps for all supported lights.\n\t */\n\tpublic _iGetProjection(renderable:RenderableBase):Matrix3D\n\t{\n\t\treturn this._projections[renderable.renderableOwner.id];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iRender(renderable:RenderableBase, camera:Camera, viewProjection:Matrix3D)\n\t{\n\t\tvar matrix:Matrix3D;\n\t\tvar context:IContextGL = this._stage.context;\n\t\tvar len:number /*uint*/;\n\t\tvar light:LightBase;\n\t\tvar lights:Array<LightBase> = this._renderObjectOwner.lightPicker.allPickedLights;\n\t\tvar rId:number = renderable.renderableOwner.id;\n\n\t\tif (!this._textures[rId])\n\t\t\tthis._textures[rId] = new RenderTexture(this._textureSize, this._textureSize);\n\n\t\tif (!this._projections[rId])\n\t\t\tthis._projections[rId] = new Matrix3D();\n\n\t\tlen = lights.length;\n\n\t\t// local position = enough\n\t\tlight = lights[0];\n\n\t\tmatrix = light.iGetObjectProjectionMatrix(renderable.sourceEntity, camera, this._projections[rId]);\n\n\t\tthis._stage.setRenderTarget(this._textures[rId], true);\n\t\tcontext.clear(1.0, 1.0, 1.0);\n\t\tcontext.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, matrix, true);\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, 0, this._enc, 2);\n\n\t\tthis._stage.activateBuffer(0, renderable.getVertexData(TriangleSubGeometry.POSITION_DATA), renderable.getVertexOffset(TriangleSubGeometry.POSITION_DATA), TriangleSubGeometry.POSITION_FORMAT);\n\t\tthis._stage.activateBuffer(1, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);\n\t\tcontext.drawTriangles(this._stage.getIndexBuffer(renderable.getIndexData()), 0, renderable.numTriangles);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera)\n\t{\n\t\tif (this._projectionTexturesInvalid)\n\t\t\tthis.updateProjectionTextures();\n\n\t\t// never scale\n\t\tsuper._iActivate(camera);\n\n\t\tthis._stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 4, this._polyOffset, 1);\n\t}\n}\n\nexport = SingleObjectDepthPass;","import IRenderObjectOwner\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport IRenderableOwner\t\t\t\t= require(\"awayjs-display/lib/base/IRenderableOwner\");\nimport MaterialBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderablePool\t\t\t\t= require(\"awayjs-display/lib/pool/IRenderablePool\");\nimport IRenderObject\t\t\t\t= require(\"awayjs-display/lib/pool/IRenderObject\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/base/RendererBase\");\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport RenderablePoolBase\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderablePoolBase\");\nimport IRenderableClass\t\t\t\t= require(\"awayjs-renderergl/lib/pool/IRenderableClass\");\nimport RenderObjectPool\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectPool\");\nimport SkyboxRenderObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/SkyboxRenderObject\");\nimport DepthRenderObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/DepthRenderObject\");\nimport DistanceRenderObject\t\t\t= require(\"awayjs-renderergl/lib/compilation/DistanceRenderObject\");\nimport RenderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderMethodMaterialObject\t= require(\"awayjs-methodmaterials/lib/compilation/RenderMethodMaterialObject\");\n\n/**\n * @class away.pool.MethodRenderablePool\n */\nclass MethodRenderablePool extends RenderablePoolBase\n{\n\tprivate _methodMaterialRenderObjectPool:RenderObjectPool;\n\n\t/**\n\t * //TODO\n\t *\n\t * @param renderableClass\n\t */\n\tconstructor(renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(renderableClass, stage);\n\n\t\tthis._methodMaterialRenderObjectPool = new RenderObjectPool(RenderMethodMaterialObject, this._renderableClass, this._stage);\n\t}\n\n\t/**\n\t *\n\t * @param material\n\t * @param renderable\n\t */\n\tpublic getMethodRenderObject(renderObjectOwner:IRenderObjectOwner):RenderObjectBase\n\t{\n\t\treturn this._methodMaterialRenderObjectPool.getItem(renderObjectOwner);\n\t}\n\n\t/**\n\t * //TODO\n\t *\n\t * @param renderableClass\n\t * @returns MethodRenderablePool\n\t */\n\tpublic static getPool(renderableClass:IRenderableClass, stage:Stage):MethodRenderablePool\n\t{\n\t\tvar pools:Object = (RenderablePoolBase._pools[stage.stageIndex] || (RenderablePoolBase._pools[stage.stageIndex] = new Object()));\n\n\t\treturn (pools[renderableClass.id] || (pools[renderableClass.id] = new MethodRenderablePool(renderableClass, stage)));\n\t}\n}\n\nexport = MethodRenderablePool;","import BitmapData\t\t\t\t\t= require(\"awayjs-core/lib/base/BitmapData\");\nimport Matrix3D\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Plane3D\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Plane3D\");\nimport Point\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Point\");\nimport Rectangle\t\t\t\t\t= require(\"awayjs-core/lib/geom/Rectangle\");\nimport Vector3D\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\nimport EventDispatcher\t\t\t\t= require(\"awayjs-core/lib/events/EventDispatcher\");\nimport TextureProxyBase\t\t\t\t= require(\"awayjs-core/lib/textures/TextureProxyBase\");\nimport ByteArray\t\t\t\t\t= require(\"awayjs-core/lib/utils/ByteArray\");\n\nimport LineSubMesh\t\t\t\t\t= require(\"awayjs-display/lib/base/LineSubMesh\");\nimport IRenderObjectOwner\t\t\t= require(\"awayjs-display/lib/base/IRenderObjectOwner\");\nimport TriangleSubMesh\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubMesh\");\nimport EntityListItem\t\t\t\t= require(\"awayjs-display/lib/pool/EntityListItem\");\nimport IEntitySorter\t\t\t\t= require(\"awayjs-display/lib/sort/IEntitySorter\");\nimport RenderableMergeSort\t\t\t= require(\"awayjs-display/lib/sort/RenderableMergeSort\");\nimport IRenderer\t\t\t\t\t= require(\"awayjs-display/lib/render/IRenderer\");\nimport Billboard\t\t\t\t\t= require(\"awayjs-display/lib/entities/Billboard\");\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IEntity\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/IEntity\");\nimport Skybox\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Skybox\");\nimport RendererEvent\t\t\t\t= require(\"awayjs-display/lib/events/RendererEvent\");\nimport StageEvent\t\t\t\t\t= require(\"awayjs-display/lib/events/StageEvent\");\nimport MaterialBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport EntityCollector\t\t\t\t= require(\"awayjs-display/lib/traverse/EntityCollector\");\nimport ICollector\t\t\t\t\t= require(\"awayjs-display/lib/traverse/ICollector\");\nimport ShadowCasterCollector\t\t= require(\"awayjs-display/lib/traverse/ShadowCasterCollector\");\nimport DefaultMaterialManager\t\t= require(\"awayjs-display/lib/managers/DefaultMaterialManager\");\n\nimport AGALMiniAssembler\t\t\t= require(\"awayjs-stagegl/lib/aglsl/assembler/AGALMiniAssembler\");\nimport ContextGLBlendFactor\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLBlendFactor\");\nimport ContextGLCompareMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\nimport IContextGL\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/IContextGL\");\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport StageManager\t\t\t\t\t= require(\"awayjs-stagegl/lib/managers/StageManager\");\nimport ProgramData\t\t\t\t\t= require(\"awayjs-stagegl/lib/pool/ProgramData\");\n\nimport AnimationSetBase\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimationSetBase\");\nimport AnimatorBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/animators/AnimatorBase\");\nimport BillboardRenderable\t\t\t= require(\"awayjs-renderergl/lib/pool/BillboardRenderable\");\nimport LineSubMeshRenderable\t\t= require(\"awayjs-renderergl/lib/pool/LineSubMeshRenderable\");\nimport RenderObjectBase\t\t\t\t= require(\"awayjs-renderergl/lib/compilation/RenderObjectBase\");\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RenderableBase\");\nimport TriangleSubMeshRenderable\t= require(\"awayjs-renderergl/lib/pool/TriangleSubMeshRenderable\");\nimport RTTBufferManager\t\t\t\t= require(\"awayjs-renderergl/lib/managers/RTTBufferManager\");\nimport RenderPassBase\t\t\t\t= require(\"awayjs-renderergl/lib/passes/RenderPassBase\");\nimport RendererPoolBase\t\t\t\t= require(\"awayjs-renderergl/lib/pool/RendererPoolBase\");\nimport RendererBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/base/RendererBase\");\n\nimport MethodRenderablePool\t\t\t= require(\"awayjs-methodmaterials/lib/pool/MethodRenderablePool\");\n\n/**\n * MethodRendererPool forms an abstract base class for classes that are used in the rendering pipeline to render the\n * contents of a partition\n *\n * @class away.render.MethodRendererPool\n */\nclass MethodRendererPool extends RendererPoolBase\n{\n\t/**\n\t * Creates a new MethodRendererPool object.\n\t */\n\tconstructor(renderer:RendererBase)\n\t{\n\t\tsuper(renderer);\n\t}\n\n\tpublic _pUpdatePool()\n\t{\n\t\tthis._billboardRenderablePool = MethodRenderablePool.getPool(BillboardRenderable, this._pStage);\n\t\tthis._triangleSubMeshRenderablePool = MethodRenderablePool.getPool(TriangleSubMeshRenderable, this._pStage);\n\t\tthis._lineSubMeshRenderablePool = MethodRenderablePool.getPool(LineSubMeshRenderable, this._pStage);\n\t}\n}\n\nexport = MethodRendererPool;"],"sourceRoot":"./"}
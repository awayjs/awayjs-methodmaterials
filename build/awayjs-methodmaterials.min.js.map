{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "awayjs-methodmaterials/lib/MethodMaterialMode.ts",
    "awayjs-methodmaterials.js",
    "awayjs-methodmaterials/lib/MethodMaterial.ts",
    "awayjs-methodmaterials/lib/data/MethodVO.ts",
    "awayjs-methodmaterials/lib/methods/AmbientBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/CurveBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseSubSurfaceMethod.ts",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/EffectRefractionEnvMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod.ts",
    "awayjs-methodmaterials/lib/methods/LightingMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/NormalBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/NormalHeightMapMethod.ts",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadingMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/ShadowCascadeMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/ShadowMethodBase.ts",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod.ts",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularCompositeMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod.ts",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod.ts",
    "awayjs-methodmaterials/lib/render/MethodMaterialRender.ts",
    "awayjs-methodmaterials/lib/render/passes/MethodPassMode.ts",
    "awayjs-methodmaterials/lib/render/passes/MethodPass.ts",
    "awayjs-methodmaterials/lib/render/passes/SingleObjectDepthPass.ts"
  ],
  "names": [
    "require",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "i",
    "f",
    "Error",
    "code",
    "l",
    "exports",
    "call",
    "length",
    "awayjs-methodmaterials/lib/MethodMaterialMode",
    "module",
    "MethodMaterialMode",
    "SINGLE_PASS",
    "MULTI_PASS",
    "awayjs-methodmaterials/lib/MethodMaterial",
    "__extends",
    "this",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__",
    "constructor",
    "prototype",
    "Image2D",
    "MaterialBase",
    "Single2DTexture",
    "TextureBase",
    "ContextGLCompareMode",
    "RenderPool",
    "AmbientBasicMethod",
    "DiffuseBasicMethod",
    "NormalBasicMethod",
    "SpecularBasicMethod",
    "MethodMaterialRender",
    "MethodMaterial",
    "_super",
    "textureColor",
    "smoothAlpha",
    "repeat",
    "mipmap",
    "_effectMethods",
    "Array",
    "_ambientMethod",
    "_diffuseMethod",
    "_normalMethod",
    "_specularMethod",
    "_depthCompareMode",
    "LESS_EQUAL",
    "_mode",
    "texture",
    "smooth",
    "color",
    "Number",
    "alpha",
    "addRenderable",
    "registerClass",
    "Object",
    "defineProperty",
    "get",
    "assetType",
    "enumerable",
    "configurable",
    "set",
    "value",
    "_pInvalidateRender",
    "copyFrom",
    "_shadowMethod",
    "addEffectMethod",
    "method",
    "push",
    "getEffectMethodAt",
    "index",
    "addEffectMethodAt",
    "splice",
    "removeEffectMethod",
    "indexOf",
    "normalMap",
    "gloss",
    "ambient",
    "specular",
    "ambientColor",
    "diffuseColor",
    "specularColor",
    "register",
    "awayjs-core/lib/data/Image2D",
    "undefined",
    "awayjs-display/lib/materials/MaterialBase",
    "awayjs-display/lib/textures/Single2DTexture",
    "awayjs-display/lib/textures/TextureBase",
    "awayjs-methodmaterials/lib/methods/AmbientBasicMethod",
    "awayjs-methodmaterials/lib/methods/DiffuseBasicMethod",
    "awayjs-methodmaterials/lib/methods/NormalBasicMethod",
    "awayjs-methodmaterials/lib/methods/SpecularBasicMethod",
    "awayjs-methodmaterials/lib/render/MethodMaterialRender",
    "awayjs-renderergl/lib/render/RenderPool",
    "awayjs-stagegl/lib/base/ContextGLCompareMode",
    "awayjs-methodmaterials/lib/data/MethodVO",
    "MethodVO",
    "useMethod",
    "reset",
    "iReset",
    "vertexConstantsIndex",
    "secondaryVertexConstantsIndex",
    "fragmentConstantsIndex",
    "secondaryFragmentConstantsIndex",
    "needsProjection",
    "needsView",
    "needsNormals",
    "needsTangents",
    "needsGlobalVertexPos",
    "needsGlobalFragmentPos",
    "ShadingMethodBase",
    "_color",
    "_alpha",
    "_colorR",
    "_colorG",
    "_colorB",
    "_ambient",
    "iInitVO",
    "shader",
    "methodVO",
    "uvDependencies",
    "iInitConstants",
    "updateColor",
    "m",
    "iGetFragmentCode",
    "targetReg",
    "registerCache",
    "sharedRegisters",
    "_iGetFragmentCode",
    "uvVarying",
    "alphaThreshold",
    "cutOffReg",
    "getFreeFragmentConstant",
    "ambientInputRegister",
    "iActivate",
    "stage",
    "activate",
    "fragmentConstantData",
    "data",
    "iSetRenderState",
    "renderable",
    "camera",
    "_setRenderState",
    "awayjs-methodmaterials/lib/methods/ShadingMethodBase",
    "awayjs-methodmaterials/lib/methods/AmbientEnvMapMethod",
    "AmbientEnvMapMethod",
    "regCache",
    "normalFragment",
    "awayjs-methodmaterials/lib/methods/CurveBasicMethod",
    "CurveBasicMethod",
    "textureVO",
    "LightingMethodBase",
    "_multiply",
    "_diffuseColor",
    "_ambientColor",
    "_diffuseR",
    "_diffuseG",
    "_diffuseB",
    "_ambientR",
    "_ambientG",
    "_ambientB",
    "iIsUsed",
    "numLights",
    "iInvalidateShaderProgram",
    "_texture",
    "getTextureVO",
    "dispose",
    "usesCommonData",
    "updateDiffuse",
    "updateAmbient",
    "diff",
    "multiply",
    "iCleanCompilationData",
    "_pTotalLightColorReg",
    "iGetFragmentPreLightingCode",
    "_pIsFirstLight",
    "addFragmentTempUsages",
    "getFreeFragmentVectorTemp",
    "iGetFragmentCodePerLight",
    "lightDirReg",
    "lightColReg",
    "commons",
    "usesLightFallOff",
    "_iModulateMethod",
    "removeFragmentTempUsage",
    "iGetFragmentCodePerProbe",
    "cubeMapReg",
    "weightRegister",
    "iGetFragmentPostLightingCode",
    "albedo",
    "shadowTarget",
    "pApplyShadow",
    "ambientColorRegister",
    "diffuseInputRegister",
    "ambientR",
    "ambientG",
    "ambientB",
    "awayjs-methodmaterials/lib/methods/LightingMethodBase",
    "awayjs-methodmaterials/lib/methods/DiffuseCelMethod",
    "DiffuseCompositeMethod",
    "DiffuseCelMethod",
    "levels",
    "baseMethod",
    "_this",
    "_smoothness",
    "clampDiffuse",
    "_levels",
    "_dataReg",
    "awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod",
    "ShadingMethodEvent",
    "modulateMethod",
    "_onShaderInvalidatedDelegate",
    "event",
    "onShaderInvalidated",
    "pBaseMethod",
    "addEventListener",
    "SHADER_INVALIDATED",
    "removeEventListener",
    "iDeactivate",
    "iGetVertexCode",
    "awayjs-renderergl/lib/events/ShadingMethodEvent",
    "awayjs-methodmaterials/lib/methods/DiffuseDepthMethod",
    "DiffuseDepthMethod",
    "temp",
    "decReg",
    "awayjs-methodmaterials/lib/methods/DiffuseGradientMethod",
    "DiffuseGradientMethod",
    "gradient",
    "_gradient",
    "secondaryTextureVO",
    "awayjs-methodmaterials/lib/methods/DiffuseLightMapMethod",
    "DiffuseLightMapMethod",
    "lightMap",
    "blendMode",
    "useSecondaryUV",
    "_useSecondaryUV",
    "_lightMap",
    "secondaryUVDependencies",
    "_blendMode",
    "ADD",
    "MULTIPLY",
    "secondaryUVVarying",
    "awayjs-methodmaterials/lib/methods/DiffuseSubSurfaceMethod",
    "DiffuseSubSurfaceMethod",
    "depthMapSize",
    "depthMapOffset",
    "_translucency",
    "_scatterColor",
    "_scatterR",
    "_scatterG",
    "_scatterB",
    "scatterLight",
    "_scattering",
    "vertexConstantData",
    "_lightProjVarying",
    "_propReg",
    "_lightColorReg",
    "_colorReg",
    "_decReg",
    "_targetReg",
    "scatterColor",
    "lightProjection",
    "toTexRegister",
    "getFreeVertexVectorTemp",
    "getFreeVertexConstant",
    "getFreeVarying",
    "viewDirFragment",
    "_depthPass",
    "_iGetDepthMap",
    "_iGetProjection",
    "copyRawDataTo",
    "awayjs-methodmaterials/lib/methods/DiffuseWrapMethod",
    "DiffuseWrapMethod",
    "wrapFactor",
    "_wrapDataRegister",
    "_wrapFactor",
    "awayjs-methodmaterials/lib/methods/EffectAlphaMaskMethod",
    "EffectMethodBase",
    "EffectAlphaMaskMethod",
    "awayjs-methodmaterials/lib/methods/EffectMethodBase",
    "awayjs-methodmaterials/lib/methods/EffectColorMatrixMethod",
    "EffectColorMatrixMethod",
    "matrix",
    "_matrix",
    "colorMultReg",
    "colorOffsetReg",
    "awayjs-methodmaterials/lib/methods/EffectColorTransformMethod",
    "EffectColorTransformMethod",
    "_colorTransform",
    "colorOffsReg",
    "inv",
    "redMultiplier",
    "greenMultiplier",
    "blueMultiplier",
    "alphaMultiplier",
    "redOffset",
    "greenOffset",
    "blueOffset",
    "alphaOffset",
    "awayjs-methodmaterials/lib/methods/EffectEnvMapMethod",
    "EffectEnvMapMethod",
    "envMap",
    "_envMap",
    "_mask",
    "dataRegister",
    "temp2",
    "awayjs-methodmaterials/lib/methods/EffectFogMethod",
    "EffectFogMethod",
    "minDistance",
    "maxDistance",
    "fogColor",
    "_minDistance",
    "_maxDistance",
    "_fogColor",
    "_fogR",
    "_fogG",
    "_fogB",
    "fogData",
    "projectionFragment",
    "awayjs-methodmaterials/lib/methods/EffectFresnelEnvMapMethod",
    "EffectFresnelEnvMapMethod",
    "_fresnelPower",
    "_normalReflectance",
    "viewDirReg",
    "normalReg",
    "awayjs-methodmaterials/lib/methods/EffectLightMapMethod",
    "EffectLightMapMethod",
    "AbstractMethodError",
    "awayjs-core/lib/errors/AbstractMethodError",
    "awayjs-methodmaterials/lib/methods/EffectRefractionEnvMapMethod",
    "EffectRefractionEnvMapMethod",
    "refractionIndex",
    "dispersionR",
    "dispersionG",
    "dispersionB",
    "_dispersionR",
    "_dispersionG",
    "_dispersionB",
    "_useDispersion",
    "_refractionIndex",
    "useDispersion",
    "data2",
    "refractionDir",
    "refractionColor",
    "awayjs-methodmaterials/lib/methods/EffectRimLightMethod",
    "EffectRimLightMethod",
    "strength",
    "power",
    "blend",
    "_strength",
    "_power",
    "dataRegister2",
    "MIX",
    "_normalMap",
    "normalDependencies",
    "iOutputsTangentNormals",
    "bnm",
    "awayjs-methodmaterials/lib/methods/NormalHeightMapMethod",
    "NormalHeightMapMethod",
    "heightMap",
    "worldWidth",
    "worldHeight",
    "worldDepth",
    "_worldXYRatio",
    "_worldXZRatio",
    "image2D",
    "width",
    "height",
    "dataReg",
    "dataReg2",
    "awayjs-methodmaterials/lib/methods/NormalSimpleWaterMethod",
    "NormalSimpleWaterMethod",
    "secondaryNormalMap",
    "_water1OffsetX",
    "_water1OffsetY",
    "_water2OffsetX",
    "_water2OffsetY",
    "_secondaryNormalMap",
    "AssetBase",
    "iUsesTangentSpace",
    "dispatchEvent",
    "awayjs-core/lib/library/AssetBase",
    "awayjs-methodmaterials/lib/methods/ShadowCascadeMethod",
    "Event",
    "DirectionalLight",
    "ShadowMapMethodBase",
    "ShadowCascadeMethod",
    "shadowMethodBase",
    "castingLight",
    "_baseMethod",
    "_pCastingLight",
    "_cascadeShadowMapper",
    "shadowMapper",
    "CHANGE",
    "onCascadeChange",
    "tempVO",
    "depthMap",
    "fragmentData",
    "vertexData",
    "_cascadeProjections",
    "_depthMapCoordVaryings",
    "initProjectionsRegs",
    "numCascades",
    "globalPositionVertex",
    "planeDistanceReg",
    "planeDistances",
    "inQuad",
    "uvCoord",
    "uvProjection",
    "_iGetCascadeFragmentCode",
    "vertexIndex",
    "depth",
    "_pEpsilon",
    "k",
    "getDepthProjections",
    "fragmentIndex",
    "_pAlpha",
    "nearPlaneDistances",
    "_iNearPlaneDistances",
    "iActivateForCascade",
    "awayjs-core/lib/events/Event",
    "awayjs-display/lib/entities/DirectionalLight",
    "awayjs-methodmaterials/lib/methods/ShadowMapMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowDitheredMethod",
    "BitmapImage2D",
    "ShadowMethodBase",
    "ShadowDitheredMethod",
    "numSamples",
    "range",
    "_depthMapSize",
    "_grainUsages",
    "_grainTexture",
    "initGrainTexture",
    "_numSamples",
    "_range",
    "_grainBitmapImage2D",
    "vec",
    "len",
    "step",
    "g",
    "Math",
    "random",
    "floor",
    "setArray",
    "rect",
    "_pGetPlanarFragmentCode",
    "customDataReg",
    "getSampleCode",
    "uvReg",
    "projectionReg",
    "_pDepthMapCoordReg",
    "addSample",
    "decodeRegister",
    "depthProjection",
    "targetRegister",
    "awayjs-core/lib/data/BitmapImage2D",
    "awayjs-methodmaterials/lib/methods/ShadowMethodBase",
    "awayjs-methodmaterials/lib/methods/ShadowFilteredMethod",
    "ShadowFilteredMethod",
    "size",
    "depthCol",
    "predicate",
    "awayjs-methodmaterials/lib/methods/ShadowHardMethod",
    "ShadowHardMethod",
    "_pGetPointFragmentCode",
    "epsReg",
    "posReg",
    "depthSampleCol",
    "lightDir",
    "globalPositionVarying",
    "castsShadows",
    "_pShadowMapper",
    "PointLight",
    "_pUsePoint",
    "_pGetPointVertexCode",
    "pGetPlanarVertexCode",
    "depthMapProj",
    "iDepthProjection",
    "pow",
    "fallOff",
    "pos",
    "scenePosition",
    "x",
    "y",
    "z",
    "awayjs-display/lib/entities/PointLight",
    "awayjs-methodmaterials/lib/methods/ShadowNearMethod",
    "ShadowNearMethod",
    "fadeRatio",
    "_fadeRatio",
    "_nearShadowMapper",
    "epsilon",
    "getFreeFragmentSingleTemp",
    "near",
    "projection",
    "far",
    "coverageRatio",
    "awayjs-methodmaterials/lib/methods/ShadowSoftMethod",
    "PoissonLookup",
    "ShadowSoftMethod",
    "_offsets",
    "getDistribution",
    "texRange",
    "offsets",
    "numRegs",
    "reg",
    "awayjs-core/lib/geom/PoissonLookup",
    "awayjs-methodmaterials/lib/methods/SpecularAnisotropicMethod",
    "SpecularAnisotropicMethod",
    "tangentVarying",
    "_pSpecularTexData",
    "_pSpecularDataRegister",
    "_gloss",
    "_specular",
    "_specularColor",
    "_iSpecularR",
    "_iSpecularG",
    "_iSpecularB",
    "updateSpecular",
    "bsm",
    "spec",
    "useSmoothTextures",
    "awayjs-methodmaterials/lib/methods/SpecularCelMethod",
    "SpecularCompositeMethod",
    "SpecularCelMethod",
    "specularCutOff",
    "_specularCutOff",
    "clampSpecular",
    "awayjs-methodmaterials/lib/methods/SpecularCompositeMethod",
    "awayjs-methodmaterials/lib/methods/SpecularFresnelMethod",
    "SpecularFresnelMethod",
    "basedOnSurface",
    "modulateSpecular",
    "_incidentLight",
    "awayjs-methodmaterials/lib/methods/SpecularPhongMethod",
    "SpecularPhongMethod",
    "BlendMode",
    "StaticLightPicker",
    "RenderBase",
    "MethodPassMode",
    "MethodPass",
    "pool",
    "material",
    "renderableClass",
    "_material",
    "lightPicker",
    "numLightProbes",
    "numDirectionalLights",
    "numPointLights",
    "numCastingDirectionalLights",
    "numCastingPointLights",
    "_pUpdateRender",
    "initPasses",
    "setBlendAndCompareModes",
    "_pClearPasses",
    "mode",
    "_casterLightPass",
    "_pAddPass",
    "_nonCasterLightPasses",
    "_pass",
    "numEffectMethods",
    "initEffectPass",
    "removeEffectPass",
    "shadowMethod",
    "initCasterLightPass",
    "removeCasterLightPass",
    "numNonCasters",
    "initNonCasterLightPasses",
    "removeNonCasterLightPasses",
    "forceSeparateMVP",
    "Boolean",
    "setBlendMode",
    "NORMAL",
    "depthCompareMode",
    "firstAdditiveIndex",
    "_pRequiresBlending",
    "EFFECTS",
    "LAYER",
    "alphaBlending",
    "colorTransform",
    "SUPER_SHADER",
    "preserveAlpha",
    "LIGHTING",
    "_renderableClass",
    "_stage",
    "diffuseMethod",
    "ambientMethod",
    "normalMethod",
    "specularMethod",
    "_pRemovePass",
    "pass",
    "numDirLights",
    "dirLightOffset",
    "pointLightOffset",
    "probeOffset",
    "includeCasters",
    "directionalLightsOffset",
    "pointLightsOffset",
    "lightProbesOffset",
    "effectMethod",
    "max",
    "removeEffectMethodAt",
    "awayjs-core/lib/data/BlendMode",
    "awayjs-display/lib/materials/lightpickers/StaticLightPicker",
    "awayjs-methodmaterials/lib/render/passes/MethodPass",
    "awayjs-methodmaterials/lib/render/passes/MethodPassMode",
    "awayjs-renderergl/lib/render/RenderBase",
    "PassMode",
    "LightSources",
    "LightingShader",
    "ShaderBase",
    "PassBase",
    "render",
    "renderOwner",
    "_maxLights",
    "_includeCasters",
    "_iMethodVOs",
    "_numEffectDependencies",
    "_onLightsChangeDelegate",
    "onLightsChange",
    "_onMethodInvalidatedDelegate",
    "onMethodInvalidated",
    "_shader",
    "_updateShader",
    "_updateLights",
    "_lightPicker",
    "enableLightFallOff",
    "diffuseLightSources",
    "specularLightSources",
    "_iInitConstantData",
    "colorTransformMethod",
    "_iColorTransformMethodVO",
    "_removeDependency",
    "_addDependency",
    "effectsDependency",
    "invalidatePass",
    "hasEffectMethod",
    "getDependencyForMethod",
    "_iNormalMethodVO",
    "_iAmbientMethodVO",
    "_iShadowMethodVO",
    "_iDiffuseMethodVO",
    "_iSpecularMethodVO",
    "_iActivate",
    "_iRender",
    "viewProjection",
    "_iDeactivate",
    "_iIncludeDependencies",
    "usesFragmentAnimation",
    "useAlphaPremultiplied",
    "usesBlending",
    "setupAndCountDependencies",
    "usesTangentSpace",
    "outputsNormals",
    "outputsTangentNormals",
    "usesProbes",
    "viewDirDependencies",
    "globalPosDependencies",
    "usesLights",
    "usesGlobalPosFragment",
    "projectionDependencies",
    "tangentDependencies",
    "_iGetPreLightingVertexCode",
    "_iGetPreLightingFragmentCode",
    "shadedTarget",
    "_iGetPerLightDiffuseFragmentCode",
    "diffuseColorReg",
    "_iGetPerLightSpecularFragmentCode",
    "specularColorReg",
    "_iGetPerProbeDiffuseFragmentCode",
    "texReg",
    "weightReg",
    "_iGetPerProbeSpecularFragmentCode",
    "_iGetPostLightingVertexCode",
    "_iGetPostLightingFragmentCode",
    "_iGetNormalVertexCode",
    "_iGetNormalFragmentCode",
    "removeVertexTempUsage",
    "_iGetVertexCode",
    "sharedReg",
    "alphaReg",
    "_iUsesShadows",
    "castingDirectionalLights",
    "castingPointLights",
    "_iUsesSpecular",
    "_iUsesDiffuse",
    "numDirectionalLightsOld",
    "numPointLightsOld",
    "numLightProbesOld",
    "calculateNumDirectionalLights",
    "calculateNumPointLights",
    "calculateNumProbes",
    "min",
    "numFree",
    "numChannels",
    "PROBES",
    "awayjs-display/lib/materials/LightSources",
    "awayjs-renderergl/lib/render/passes/PassBase",
    "awayjs-renderergl/lib/shaders/LightingShader",
    "awayjs-renderergl/lib/shaders/ShaderBase",
    "awayjs-methodmaterials/lib/render/passes/SingleObjectDepthPass",
    "Matrix3D",
    "ContextGLDrawMode",
    "ContextGLProgramType",
    "SubGeometryVOPool",
    "SingleObjectDepthPass",
    "_textureSize",
    "_polyOffset",
    "Float32Array",
    "_projectionTexturesInvalid",
    "_subGeometryVOPool",
    "getPool",
    "_textures",
    "key",
    "updateProjectionTextures",
    "_projections",
    "renderableOwner",
    "id",
    "context",
    "light",
    "lights",
    "_renderOwner",
    "allPickedLights",
    "rId",
    "iGetObjectProjectionMatrix",
    "sourceEntity",
    "setRenderTarget",
    "clear",
    "setProgramConstantsFromMatrix",
    "VERTEX",
    "setProgramConstantsFromArray",
    "FRAGMENT",
    "_enc",
    "subGeometryVO",
    "subGeom",
    "subGeometry",
    "activateVertexBufferVO",
    "positions",
    "normals",
    "getIndexBufferVO",
    "draw",
    "TRIANGLES",
    "numElements",
    "awayjs-core/lib/geom/Matrix3D",
    "awayjs-renderergl/lib/vos/SubGeometryVOPool",
    "awayjs-stagegl/lib/base/ContextGLDrawMode",
    "awayjs-stagegl/lib/base/ContextGLProgramType"
  ],
  "mappings": "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",
  "file": "awayjs-methodmaterials.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "class MethodMaterialMode\n{\n\t/**\n\t *\n\t */\n\tpublic static SINGLE_PASS:string = \"singlePass\";\n\n\t/**\n\t *\n\t */\n\tpublic static MULTI_PASS:string = \"multiPass\";\n}\n\nexport = MethodMaterialMode;",
    null,
    "﻿import BlendMode\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\nimport Image2D\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Image2D\");\n\nimport IRenderOwner\t\t\t\t\t= require(\"awayjs-display/lib/base/IRenderOwner\");\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport StaticLightPicker\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\nimport MaterialBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRender\t\t\t\t\t\t= require(\"awayjs-display/lib/pool/IRender\");\nimport Single2DTexture\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\nimport TextureBase\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport ContextGLCompareMode\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\n\nimport RenderPool\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/RenderPool\");\n\nimport MethodMaterialMode\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport AmbientBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport NormalBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodMaterialRender\t\t\t= require(\"awayjs-methodmaterials/lib/render/MethodMaterialRender\");\n\n/**\n * MethodMaterial forms an abstract base class for the default shaded materials provided by Stage,\n * using material methods to define their appearance.\n */\nclass MethodMaterial extends MaterialBase\n{\n\tpublic static assetType:string = \"[materials MethodMaterial]\";\n\n\tprivate _effectMethods:Array<EffectMethodBase> = new Array<EffectMethodBase>();\n\tprivate _mode:string;\n\n\tprivate _ambientMethod:AmbientBasicMethod = new AmbientBasicMethod();\n\tprivate _shadowMethod:ShadowMapMethodBase;\n\tprivate _diffuseMethod:DiffuseBasicMethod = new DiffuseBasicMethod();\n\tprivate _normalMethod:NormalBasicMethod = new NormalBasicMethod();\n\tprivate _specularMethod:SpecularBasicMethod = new SpecularBasicMethod();\n\n\n\tprivate _depthCompareMode:string = ContextGLCompareMode.LESS_EQUAL;\n\n\tprivate static register = MethodMaterial.addRenderable();\n\n\tprivate static addRenderable()\n\t{\n\t\tRenderPool.registerClass(MethodMaterialRender, MethodMaterial);\n\t}\n\n\t/**\n\t *\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn MethodMaterial.assetType;\n\t}\n\n\t/**\n\t * Creates a new MethodMaterial object.\n\t *\n\t * @param texture The texture used for the material's albedo color.\n\t * @param smooth Indicates whether the texture should be filtered when sampled. Defaults to true.\n\t * @param repeat Indicates whether the texture should be tiled when sampled. Defaults to false.\n\t * @param mipmap Indicates whether or not any used textures should use mipmapping. Defaults to false.\n\t */\n\tconstructor(texture?:Image2D, smooth?:boolean, repeat?:boolean, mipmap?:boolean);\n\tconstructor(texture?:TextureBase, smooth?:boolean, repeat?:boolean, mipmap?:boolean);\n\tconstructor(color?:number, alpha?:number);\n\tconstructor(textureColor:any = null, smoothAlpha:any = null, repeat:boolean = false, mipmap:boolean = true)\n\t{\n\t\tsuper();\n\n\t\tthis._mode = MethodMaterialMode.SINGLE_PASS;\n\n\t\tif (textureColor instanceof Image2D)\n\t\t\ttextureColor = new Single2DTexture(textureColor);\n\n\t\tif (textureColor instanceof TextureBase) {\n\t\t\tthis.texture = <TextureBase> textureColor;\n\n\t\t\tthis.smooth = (smoothAlpha == null)? true : false;\n\t\t\tthis.repeat = repeat;\n\t\t\tthis.mipmap = mipmap;\n\t\t} else {\n\t\t\tthis.color = (textureColor == null)? 0xFFFFFF : Number(textureColor);\n\t\t\tthis.alpha = (smoothAlpha == null)? 1 : Number(smoothAlpha);\n\t\t}\n\t}\n\n\n\tpublic get mode():string\n\t{\n\t\treturn this._mode;\n\t}\n\n\tpublic set mode(value:string)\n\t{\n\t\tif (this._mode == value)\n\t\t\treturn;\n\n\t\tthis._mode = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The depth compare mode used to render the renderables using this material.\n\t *\n\t * @see away.stagegl.ContextGLCompareMode\n\t */\n\n\tpublic get depthCompareMode():string\n\t{\n\t\treturn this._depthCompareMode;\n\t}\n\n\tpublic set depthCompareMode(value:string)\n\t{\n\t\tif (this._depthCompareMode == value)\n\t\t\treturn;\n\n\t\tthis._depthCompareMode = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The texture object to use for the ambient colour.\n\t */\n\tpublic get diffuseTexture():TextureBase\n\t{\n\t\treturn this._diffuseMethod.texture;\n\t}\n\n\tpublic set diffuseTexture(value:TextureBase)\n\t{\n\t\tthis._diffuseMethod.texture = value;\n\t}\n\n\t/**\n\t * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.\n\t */\n\tpublic get ambientMethod():AmbientBasicMethod\n\t{\n\t\treturn this._ambientMethod;\n\t}\n\n\tpublic set ambientMethod(value:AmbientBasicMethod)\n\t{\n\t\tif (this._ambientMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._ambientMethod)\n\t\t\tvalue.copyFrom(this._ambientMethod);\n\n\t\tthis._ambientMethod = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.\n\t */\n\tpublic get shadowMethod():ShadowMapMethodBase\n\t{\n\t\treturn this._shadowMethod;\n\t}\n\n\tpublic set shadowMethod(value:ShadowMapMethodBase)\n\t{\n\t\tif (this._shadowMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._shadowMethod)\n\t\t\tvalue.copyFrom(this._shadowMethod);\n\n\t\tthis._shadowMethod = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.\n\t */\n\tpublic get diffuseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this._diffuseMethod;\n\t}\n\n\tpublic set diffuseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this._diffuseMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._diffuseMethod)\n\t\t\tvalue.copyFrom(this._diffuseMethod);\n\n\t\tthis._diffuseMethod = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.\n\t */\n\tpublic get specularMethod():SpecularBasicMethod\n\t{\n\t\treturn this._specularMethod;\n\t}\n\n\tpublic set specularMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._specularMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._specularMethod)\n\t\t\tvalue.copyFrom(this._specularMethod);\n\n\t\tthis._specularMethod = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.\n\t */\n\tpublic get normalMethod():NormalBasicMethod\n\t{\n\t\treturn this._normalMethod;\n\t}\n\n\tpublic set normalMethod(value:NormalBasicMethod)\n\t{\n\t\tif (this._normalMethod == value)\n\t\t\treturn;\n\n\t\tif (value && this._normalMethod)\n\t\t\tvalue.copyFrom(this._normalMethod);\n\n\t\tthis._normalMethod = value;\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\tpublic get numEffectMethods():number\n\t{\n\t\treturn this._effectMethods.length;\n\t}\n\n\t/**\n\t * Appends an \"effect\" shading method to the shader. Effect methods are those that do not influence the lighting\n\t * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the\n\t * methods added prior.\n\t */\n\tpublic addEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._effectMethods.push(method);\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * Returns the method added at the given index.\n\t * @param index The index of the method to retrieve.\n\t * @return The method at the given index.\n\t */\n\tpublic getEffectMethodAt(index:number):EffectMethodBase\n\t{\n\t\treturn this._effectMethods[index];\n\t}\n\n\t/**\n\t * Adds an effect method at the specified index amongst the methods already added to the material. Effect\n\t * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,\n\t * etc. The method will be applied to the result of the methods with a lower index.\n\t */\n\tpublic addEffectMethodAt(method:EffectMethodBase, index:number)\n\t{\n\t\tthis._effectMethods.splice(index, 0, method);\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * Removes an effect method from the material.\n\t * @param method The method to be removed.\n\t */\n\tpublic removeEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._effectMethods.splice(this._effectMethods.indexOf(method), 1);\n\n\t\tthis._pInvalidateRender();\n\t}\n\n\t/**\n\t * The normal map to modulate the direction of the surface for each texel. The default normal method expects\n\t * tangent-space normal maps, but others could expect object-space maps.\n\t */\n\tpublic get normalMap():TextureBase\n\t{\n\t\treturn this._normalMethod.normalMap;\n\t}\n\n\tpublic set normalMap(value:TextureBase)\n\t{\n\t\tthis._normalMethod.normalMap = value;\n\t}\n\n\t/**\n\t * A specular map that defines the strength of specular reflections for each texel in the red channel,\n\t * and the gloss factor in the green channel. You can use Specular2DTexture if you want to easily set\n\t * specular and gloss maps from grayscale images, but correctly authored images are preferred.\n\t */\n\tpublic get specularMap():TextureBase\n\t{\n\t\treturn this._specularMethod.texture;\n\t}\n\n\tpublic set specularMap(value:TextureBase)\n\t{\n\t\tthis._specularMethod.texture = value;\n\t}\n\n\t/**\n\t * The glossiness of the material (sharpness of the specular highlight).\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._specularMethod.gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._specularMethod.gloss = value;\n\t}\n\n\t/**\n\t * The strength of the ambient reflection.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambientMethod.ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tthis._ambientMethod.ambient = value;\n\t}\n\n\t/**\n\t * The overall strength of the specular reflection.\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._specularMethod.specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tthis._specularMethod.specular = value;\n\t}\n\n\t/**\n\t * The colour of the ambient reflection.\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this._diffuseMethod.ambientColor;\n\t}\n\n\tpublic set ambientColor(value:number)\n\t{\n\t\tthis._diffuseMethod.ambientColor = value;\n\t}\n\n\t/**\n\t * The colour of the diffuse reflection.\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this._diffuseMethod.diffuseColor;\n\t}\n\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tthis._diffuseMethod.diffuseColor = value;\n\t}\n\n\t/**\n\t * The colour of the specular reflection.\n\t */\n\tpublic get specularColor():number\n\t{\n\t\treturn this._specularMethod.specularColor;\n\t}\n\n\tpublic set specularColor(value:number)\n\t{\n\t\tthis._specularMethod.specularColor = value;\n\t}\n}\n\nexport = MethodMaterial;",
    "import TextureVOBase\t\t\t\t= require(\"awayjs-renderergl/lib/vos/TextureVOBase\");\n\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * MethodVO contains data for a given shader object for the use within a single material.\n * This allows shader methods to be shared across materials while their non-public state differs.\n */\nclass MethodVO\n{\n\tpublic useMethod:boolean = true;\n\n\tpublic method:ShadingMethodBase;\n\n\t// public register indices\n\tpublic textureVO:TextureVOBase;\n\tpublic secondaryTextureVO:TextureVOBase; // sometimes needed for composites\n\tpublic vertexConstantsIndex:number;\n\tpublic secondaryVertexConstantsIndex:number; // sometimes needed for composites\n\tpublic fragmentConstantsIndex:number;\n\tpublic secondaryFragmentConstantsIndex:number; // sometimes needed for composites\n\n\t// internal stuff for the material to know before assembling code\n\tpublic needsProjection:boolean;\n\tpublic needsView:boolean;\n\tpublic needsNormals:boolean;\n\tpublic needsTangents:boolean;\n\tpublic needsGlobalVertexPos:boolean;\n\tpublic needsGlobalFragmentPos:boolean;\n\t/**\n\t * Creates a new MethodVO object.\n\t */\n\tconstructor(method:ShadingMethodBase)\n\t{\n\t\tthis.method = method;\n\t}\n\n\t/**\n\t * Resets the values of the value object to their \"unused\" state.\n\t */\n\tpublic reset()\n\t{\n\t\tthis.method.iReset();\n\n\t\tthis.vertexConstantsIndex = -1;\n\t\tthis.secondaryVertexConstantsIndex = -1;\n\t\tthis.fragmentConstantsIndex = -1;\n\t\tthis.secondaryFragmentConstantsIndex = -1;\n\n\t\tthis.needsProjection = false;\n\t\tthis.needsView = false;\n\t\tthis.needsNormals = false;\n\t\tthis.needsTangents = false;\n\t\tthis.needsGlobalVertexPos = false;\n\t\tthis.needsGlobalFragmentPos = false;\n\t}\n}\n\nexport = MethodVO;\n",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * AmbientBasicMethod provides the default shading method for uniform ambient lighting.\n */\nclass AmbientBasicMethod extends ShadingMethodBase\n{\n\tprivate _color:number = 0xffffff;\n\tprivate _alpha:number = 1;\n\n\tprivate _colorR:number = 1;\n\tprivate _colorG:number = 1;\n\tprivate _colorB:number = 1;\n\n\tprivate _ambient:number = 1;\n\n\t/**\n\t * Creates a new AmbientBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tif (shader.texture)\n\t\t\tshader.uvDependencies++;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tif (!shader.texture) {\n\t\t\tthis._color = shader.color;\n\t\t\tthis.updateColor();\n\t\t}\n\t}\n\n\t/**\n\t * The strength of the ambient reflection of the surface.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tif (this._ambient == value)\n\t\t\treturn;\n\n\t\tthis._ambient = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * The alpha component of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tif (this._alpha == value)\n\t\t\treturn;\n\n\t\tthis._alpha = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar m:any = method;\n\t\tvar b:AmbientBasicMethod = <AmbientBasicMethod> m;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (shader.texture) {\n\t\t\tcode += shader.texture._iGetFragmentCode(shader, targetReg, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\n\t\t\tif (shader.alphaThreshold > 0) {\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\t\tmethodVO.fragmentConstantsIndex = cutOffReg.index*4;\n\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\t\"kil \" + targetReg + \".w\\n\" +\n\t\t\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n\t\t\t}\n\n\t\t} else {\n\t\t\tvar ambientInputRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\tmethodVO.fragmentConstantsIndex = ambientInputRegister.index*4;\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + ambientInputRegister + \"\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (shader.texture) {\n\t\t\tshader.texture.activate(shader);\n\n\t\t\tif (shader.alphaThreshold > 0)\n\t\t\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex] = shader.alphaThreshold;\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\t\tdata[index] = this._colorR;\n\t\t\tdata[index + 1] = this._colorG;\n\t\t\tdata[index + 2] = this._colorB;\n\t\t\tdata[index + 3] = this._alpha;\n\t\t}\n\t}\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (shader.texture)\n\t\t\tshader.texture._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateColor()\n\t{\n\t\tthis._colorR = ((this._color >> 16) & 0xff)/0xff*this._ambient;\n\t\tthis._colorG = ((this._color >> 8) & 0xff)/0xff*this._ambient;\n\t\tthis._colorB = (this._color & 0xff)/0xff*this._ambient;\n\t}\n}\n\nexport = AmbientBasicMethod;",
    "import ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\n\n/**\n * AmbientEnvMapMethod provides a diffuse shading method that uses a diffuse irradiance environment map to\n * approximate global lighting rather than lights.\n */\nclass AmbientEnvMapMethod extends AmbientBasicMethod\n{\n\t/**\n\t * Creates a new <code>AmbientEnvMapMethod</code> object.\n\t *\n\t * @param envMap The cube environment map to use for the ambient lighting.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn shader.texture._iGetFragmentCode(shader, targetReg, regCache, sharedRegisters, sharedRegisters.normalFragment);\n\t}\n}\n\nexport = AmbientEnvMapMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * AmbientBasicMethod provides the default shading method for uniform ambient lighting.\n */\nclass CurveBasicMethod extends ShadingMethodBase\n{\n\tprivate _color:number = 0xffffff;\n\tprivate _alpha:number = 1;\n\n\tprivate _colorR:number = 1;\n\tprivate _colorG:number = 1;\n\tprivate _colorB:number = 1;\n\n\tprivate _ambient:number = 1;\n\n\t/**\n\t * Creates a new AmbientBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tif (shader.texture)\n\t\t\tshader.uvDependencies++;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tif (!shader.texture) {\n\t\t\tthis._color = shader.color;\n\t\t\tthis.updateColor();\n\t\t}\n\t}\n\n\t/**\n\t * The strength of the ambient reflection of the surface.\n\t */\n\tpublic get ambient():number\n\t{\n\t\treturn this._ambient;\n\t}\n\n\tpublic set ambient(value:number)\n\t{\n\t\tif (this._ambient == value)\n\t\t\treturn;\n\n\t\tthis._ambient = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * The alpha component of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tif (this._alpha == value)\n\t\t\treturn;\n\n\t\tthis._alpha = value;\n\n\t\tthis.updateColor();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar m:any = method;\n\t\tvar b:CurveBasicMethod = <CurveBasicMethod> m;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n    /*\n    public iGeVertexCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string {\n        var code:string = \"\";\n        code = \"mov \" + sharedRegisters.uvVarying + \" \" + registerCache.uv +  \" \\n\";\n    }*/\n    public iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar ambientInputRegister:ShaderRegisterElement;\n\n\t\tif (shader.texture) {\n\t\t\tcode += shader.texture._iGetFragmentCode(shader, targetReg, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\n\t\t\tif (shader.alphaThreshold > 0) {\n\t\t\t\tvar cutOffReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\t\tmethodVO.fragmentConstantsIndex = cutOffReg.index*4;\n\n\t\t\t\tcode += \"sub \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\" +\n\t\t\t\t\t\"kil \" + targetReg + \".w\\n\" +\n\t\t\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + cutOffReg + \".x\\n\";\n\t\t\t}\n\n\t\t} else {\n\t\t\tambientInputRegister = registerCache.getFreeFragmentConstant();\n\t\t\tmethodVO.fragmentConstantsIndex = ambientInputRegister.index*4;\n\n\t\t\tcode += \"mov \" + targetReg + \", \" + ambientInputRegister + \"\\n\";\n\t\t}\n        code = \"mov \" + targetReg + \", \" + sharedRegisters.uvVarying + \"\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (shader.texture) {\n\t\t\tshader.texture.activate(shader);\n\n\t\t\tif (shader.alphaThreshold > 0)\n\t\t\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex] = shader.alphaThreshold;\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\t\tdata[index] = this._colorR;\n\t\t\tdata[index + 1] = this._colorG;\n\t\t\tdata[index + 2] = this._colorB;\n\t\t\tdata[index + 3] = this._alpha;\n\t\t}\n\t}\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (shader.texture)\n\t\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateColor()\n\t{\n\t\tthis._colorR = ((this._color >> 16) & 0xff)/0xff*this._ambient;\n\t\tthis._colorG = ((this._color >> 8) & 0xff)/0xff*this._ambient;\n\t\tthis._colorB = (this._color & 0xff)/0xff*this._ambient;\n\t}\n}\nexport = CurveBasicMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\n\n/**\n * DiffuseBasicMethod provides the default shading method for Lambert (dot3) diffuse lighting.\n */\nclass DiffuseBasicMethod extends LightingMethodBase\n{\n\tprivate _multiply:boolean = true;\n\n\tpublic _pTotalLightColorReg:ShaderRegisterElement;\n\n\tpublic _texture:TextureBase;\n\tprivate _diffuseColor:number = 0xffffff;\n\tprivate _ambientColor:number = 0xffffff;\n\tprivate _diffuseR:number = 1;\n\tprivate _diffuseG:number = 1;\n\tprivate _diffuseB:number = 1;\n\tprivate _ambientR:number = 1;\n\tprivate _ambientG:number = 1;\n\tprivate _ambientB:number = 1;\n\n\tpublic _pIsFirstLight:boolean;\n\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shader:LightingShader):boolean\n\t{\n\t\tif (!shader.numLights)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Set internally if diffuse color component multiplies or replaces the ambient color\n\t */\n\tpublic get multiply():boolean\n\t{\n\t\treturn this._multiply;\n\t}\n\n\tpublic set multiply(value:boolean)\n\t{\n\t\tif (this._multiply == value)\n\t\t\treturn;\n\n\t\tthis._multiply = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureVO = shader.getTextureVO(this._texture);\n\t\t\tshader.uvDependencies++;\n\t\t} else if (methodVO.textureVO) {\n\t\t\tmethodVO.textureVO.dispose();\n\t\t\tmethodVO.textureVO = null;\n\t\t}\n\n\t\tif (shader.numLights > 0) {\n\t\t\tshader.usesCommonData = true;\n\t\t\tmethodVO.needsNormals = true;\n\t\t}\n\t}\n\n\t/**\n\t * The color of the diffuse reflection when not using a texture.\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this._diffuseColor;\n\t}\n\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tif (this._diffuseColor == value)\n\t\t\treturn;\n\n\t\tthis._diffuseColor = value;\n\n\t\tthis.updateDiffuse();\n\t}\n\n\t/**\n\t * The color of the ambient reflection\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this._ambientColor;\n\t}\n\n\tpublic set ambientColor(value:number)\n\t{\n\t\tif (this._ambientColor == value)\n\t\t\treturn;\n\n\t\tthis._ambientColor = value;\n\n\t\tthis.updateAmbient();\n\t}\n\n\n\t/**\n\t * The bitmapData to use to define the diffuse reflection color per texel.\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tif (this._texture == value)\n\t\t\treturn;\n\n\t\tthis._texture = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._texture = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar diff:DiffuseBasicMethod = <DiffuseBasicMethod> method;\n\n\t\tthis.texture = diff.texture;\n\t\tthis.multiply = diff.multiply;\n\t\tthis.diffuseColor = diff.diffuseColor;\n\t\tthis.ambientColor = diff.ambientColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._pTotalLightColorReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tthis._pIsFirstLight = true;\n\n\t\tregisterCache.addFragmentTempUsages(this._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp(), 1);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".x, \" + lightDirReg + \", \" + sharedRegisters.normalFragment + \"\\n\" +\n\t\t\t\t\"max \" + t + \".w, \" + t + \".x, \" + sharedRegisters.commons + \".y\\n\";\n\n\t\tif (shader.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \", \" + t + \".w, \" + lightColReg + \"\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shader:LightingShader, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"tex \" + t + \", \" + sharedRegisters.normalFragment + \", \" + cubeMapReg + \" <cube,linear,miplinear>\\n\" +\n\t\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + weightRegister + \"\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tvar albedo:ShaderRegisterElement;\n\t\tvar cutOffReg:ShaderRegisterElement;\n\n\t\t// incorporate input from ambient\n\t\tif (sharedRegisters.shadowTarget)\n\t\t\tcode += this.pApplyShadow(shader, methodVO, registerCache, sharedRegisters);\n\n\t\tregisterCache.addFragmentTempUsages(albedo = registerCache.getFreeFragmentVectorTemp(), 1);\n\n\t\tvar ambientColorRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = ambientColorRegister.index*4;\n\n\t\tif (this._texture) {\n\t\t\tcode += methodVO.textureVO._iGetFragmentCode(shader, albedo, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\t\t} else {\n\t\t\tvar diffuseInputRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\t\tcode += \"mov \" + albedo + \", \" + diffuseInputRegister + \"\\n\";\n\t\t}\n\n\t\tcode += \"sat \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\"mul \" + albedo + \".xyz, \" + albedo + \", \" + this._pTotalLightColorReg + \"\\n\";\n\n\t\tif (this._multiply) {\n\t\t\tcode += \"add \" + albedo + \".xyz, \" + albedo + \", \" + ambientColorRegister + \"\\n\" +\n\t\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \", \" + albedo + \"\\n\";\n\t\t} else {\n\t\t\tcode += \"mul \" + targetReg + \".xyz, \" + targetReg + \", \" + ambientColorRegister + \"\\n\" +\n\t\t\t\t\"mul \" + this._pTotalLightColorReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \", \" + albedo + \"\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\t\tregisterCache.removeFragmentTempUsage(albedo);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Generate the code that applies the calculated shadow to the diffuse light\n\t * @param methodVO The MethodVO object for which the compilation is currently happening.\n\t * @param regCache The register cache the compiler is currently using for the register management.\n\t */\n\tpublic pApplyShadow(shader:LightingShader, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + sharedRegisters.shadowTarget + \".w\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureVO.activate(shader);\n\t\t} else {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\t\tdata[index + 4] = this._diffuseR;\n\t\t\tdata[index + 5] = this._diffuseG;\n\t\t\tdata[index + 6] = this._diffuseB;\n\t\t\tdata[index + 7] = 1;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the diffuse color data used by the render state.\n\t */\n\tprivate updateDiffuse()\n\t{\n\t\tthis._diffuseR = ((this._diffuseColor >> 16) & 0xff)/0xff;\n\t\tthis._diffuseG = ((this._diffuseColor >> 8) & 0xff)/0xff;\n\t\tthis._diffuseB = (this._diffuseColor & 0xff)/0xff;\n\t}\n\n\t/**\n\t * Updates the ambient color data used by the render state.\n\t */\n\tprivate updateAmbient()\n\t{\n\t\tthis._ambientR = ((this._ambientColor >> 16) & 0xff)/0xff;\n\t\tthis._ambientG = ((this._ambientColor >> 8) & 0xff)/0xff;\n\t\tthis._ambientB = (this._ambientColor & 0xff)/0xff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:LightingShader, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (this._texture)\n\t\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\n\t\t//TODO move this to Activate (ambientR/G/B currently calc'd in render state)\n\t\tif (shader.numLights > 0) {\n\t\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\t\tdata[index] = shader.ambientR*this._ambientR;\n\t\t\tdata[index + 1] = shader.ambientG*this._ambientG;\n\t\t\tdata[index + 2] = shader.ambientB*this._ambientB;\n\t\t\tdata[index + 3] = 1;\n\t\t}\n\t}\n}\n\nexport = DiffuseBasicMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\n\n/**\n * DiffuseCelMethod provides a shading method to add diffuse cel (cartoon) shading.\n */\nclass DiffuseCelMethod extends DiffuseCompositeMethod\n{\n\tprivate _levels:number /*uint*/;\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _smoothness:number = .1;\n\n\t/**\n\t * Creates a new DiffuseCelMethod object.\n\t * @param levels The amount of shadow gradations.\n\t * @param baseMethod An optional diffuse method on which the cartoon shading is based. If omitted, DiffuseBasicMethod is used.\n\t */\n\tconstructor(levels:number /*uint*/ = 3, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.clampDiffuse(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._levels = levels;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tsuper.iInitConstants(shader, methodVO);\n\t\tdata[index + 1] = 1;\n\t\tdata[index + 2] = 0;\n\t}\n\n\t/**\n\t * The amount of shadow gradations.\n\t */\n\tpublic get levels():number /*uint*/\n\t{\n\t\treturn this._levels;\n\t}\n\n\tpublic set levels(value:number /*uint*/)\n\t{\n\t\tthis._levels = value;\n\t}\n\n\t/**\n\t * The smoothness of the edge between 2 shading levels.\n\t */\n\tpublic get smoothness():number\n\t{\n\t\treturn this._smoothness;\n\t}\n\n\tpublic set smoothness(value:number)\n\t{\n\t\tthis._smoothness = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index] = this._levels;\n\t\tdata[index + 3] = this._smoothness;\n\t}\n\n\t/**\n\t * Snaps the diffuse shading of the wrapped method to one of the levels.\n\t * @param vo The MethodVO used to compile the current shader.\n\t * @param t The register containing the diffuse strength in the \"w\" component.\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared register data for this shader.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate clampDiffuse(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + this._dataReg + \".x\\n\" +\n\t\t\t\"frc \" + targetReg + \".z, \" + targetReg + \".w\\n\" +\n\t\t\t\"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + targetReg + \".z\\n\" +\n\t\t\t\"mov \" + targetReg + \".x, \" + this._dataReg + \".x\\n\" +\n\t\t\t\"sub \" + targetReg + \".x, \" + targetReg + \".x, \" + this._dataReg + \".y\\n\" +\n\t\t\t\"rcp \" + targetReg + \".x,\" + targetReg + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".y, \" + targetReg + \".x\\n\" +\n\n\t\t\t// previous clamped strength\n\t\t\t\"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + targetReg + \".x\\n\" +\n\n\t\t\t// fract/epsilon (so 0 - epsilon will become 0 - 1)\n\t\t\t\"div \" + targetReg + \".z, \" + targetReg + \".z, \" + this._dataReg + \".w\\n\" +\n\t\t\t\"sat \" + targetReg + \".z, \" + targetReg + \".z\\n\" +\n\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".z\\n\" +\n\t\t\t// 1-z\n\t\t\t\"sub \" + targetReg + \".z, \" + this._dataReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"mul \" + targetReg + \".y, \" + targetReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\" +\n\t\t\t\"sat \" + targetReg + \".w, \" + targetReg + \".w\\n\";\n\t}\n}\n\nexport = DiffuseCelMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseCompositeMethod provides a base class for diffuse methods that wrap a diffuse method to alter the\n * calculated diffuse reflection strength.\n */\nclass DiffuseCompositeMethod extends DiffuseBasicMethod\n{\n\tpublic pBaseMethod:DiffuseBasicMethod;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new <code>DiffuseCompositeMethod</code> object.\n\t *\n\t * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature clampDiffuse(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the diffuse strength.\n\t * @param baseMethod The base diffuse method on which this method's shading is based.\n\t */\n\tconstructor(modulateMethod:(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper();\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis.pBaseMethod = baseMethod || new DiffuseBasicMethod();\n\t\tthis.pBaseMethod._iModulateMethod = modulateMethod;\n\t\tthis.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * The base diffuse method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this.pBaseMethod;\n\t}\n\n\tpublic set baseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this.pBaseMethod == value)\n\t\t\treturn;\n\n\t\tthis.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.pBaseMethod = value;\n\t\tthis.pBaseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tthis.pBaseMethod.iInitVO(shader, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tthis.pBaseMethod.iInitConstants(shader, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis.pBaseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis.pBaseMethod.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this.pBaseMethod.texture;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tthis.pBaseMethod.texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get diffuseColor():number\n\t{\n\t\treturn this.pBaseMethod.diffuseColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set diffuseColor(value:number)\n\t{\n\t\tthis.pBaseMethod.diffuseColor = value;\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get ambientColor():number\n\t{\n\t\treturn this.pBaseMethod.ambientColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic set ambientColor(value:number)\n\t{\n\t\tthis.pBaseMethod.ambientColor = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this.pBaseMethod.iGetFragmentCodePerLight(shader, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t\tthis._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shader:LightingShader, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this.pBaseMethod.iGetFragmentCodePerProbe(shader, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);\n\t\tthis._pTotalLightColorReg = this.pBaseMethod._pTotalLightColorReg;\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis.pBaseMethod.iActivate(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:LightingShader, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tthis.pBaseMethod.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis.pBaseMethod.iDeactivate(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetVertexCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this.pBaseMethod.iGetFragmentPostLightingCode(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis.pBaseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis.pBaseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = DiffuseCompositeMethod;",
    "import RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseDepthMethod provides a debug method to visualise depth maps\n */\nclass DiffuseDepthMethod extends DiffuseBasicMethod\n{\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = 1.0;\n\t\tdata[index + 1] = 1/255.0;\n\t\tdata[index + 2] = 1/65025.0;\n\t\tdata[index + 3] = 1/16581375.0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement;\n\t\tvar decReg:ShaderRegisterElement;\n\n\t\tif (!this._texture)\n\t\t\tthrow new Error(\"DiffuseDepthMethod requires texture!\");\n\n\t\t// incorporate input from ambient\n\t\tif (shader.numLights > 0) {\n\t\t\tif (sharedRegisters.shadowTarget)\n\t\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + sharedRegisters.shadowTarget + \".w\\n\";\n\t\t\tcode += \"add \" + targetReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\t\"sat \" + targetReg + \".xyz, \" + targetReg + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\t\t\tregisterCache.addFragmentTempUsages(temp = registerCache.getFreeFragmentVectorTemp(), 1);\n\t\t} else {\n\t\t\ttemp = targetReg;\n\t\t}\n\n\t\tdecReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tcode += methodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, sharedRegisters.uvVarying) +\n\t\t\t\"dp4 \" + temp + \".x, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\"mov \" + temp + \".yz, \" + temp + \".xx\t\t\t\\n\" +\n\t\t\t\"mov \" + temp + \".w, \" + decReg + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".xyz, \" + decReg + \".xxx, \" + temp + \".xyz\\n\";\n\n\t\tif (shader.numLights == 0)\n\t\t\treturn code;\n\n\t\tcode += \"mul \" + targetReg + \".xyz, \" + temp + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\"mov \" + targetReg + \".w, \" + temp + \".w\\n\";\n\n\t\tif (shader.numLights > 0)\n\t\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseDepthMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseGradientMethod is an alternative to DiffuseBasicMethod in which the shading can be modulated with a gradient\n * to introduce color-tinted shading as opposed to the single-channel diffuse strength. This can be used as a crude\n * approximation to subsurface scattering (for instance, the mid-range shading for skin can be tinted red to similate\n * scattered light within the skin attributing to the final colour)\n */\nclass DiffuseGradientMethod extends DiffuseBasicMethod\n{\n\tprivate _gradient:TextureBase;\n\n\t/**\n\t * Creates a new DiffuseGradientMethod object.\n\t * @param gradient A texture that contains the light colour based on the angle. This can be used to change\n\t * the light colour due to subsurface scattering when the surface faces away from the light.\n\t */\n\tconstructor(gradient:TextureBase)\n\t{\n\t\tsuper();\n\n\t\tthis._gradient = gradient;\n\t}\n\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shader, methodVO);\n\n\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(this._gradient);\n\t}\n\n\t/**\n\t * A texture that contains the light colour based on the angle. This can be used to change the light colour\n\t * due to subsurface scattering when the surface faces away from the light.\n\t */\n\tpublic get gradient():TextureBase\n\t{\n\t\treturn this._gradient;\n\t}\n\n\tpublic set gradient(value:TextureBase)\n\t{\n\t\tif (this._gradient == value)\n\t\t\treturn;\n\n\t\tthis._gradient = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t\tthis._pIsFirstLight = true;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight)\n\t\t\tt = this._pTotalLightColorReg;\n\t\telse {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".w, \" + lightDirReg + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"mul \" + t + \".w, \" + t + \".w, \" + sharedRegisters.commons + \".x\\n\" +\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + sharedRegisters.commons + \".x\\n\" +\n\t\t\t\"mul \" + t + \".xyz, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += methodVO.secondaryTextureVO._iGetFragmentCode(shader, t, registerCache, sharedRegisters, t) +\n\t\t\t//\t\t\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + t + \".w\\n\" +\n\t\t\t\"mul \" + t + \".xyz, \" + t + \".xyz, \" + lightColReg + \".xyz\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic pApplyShadow(shader:LightingShader, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar t:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\treturn \"mov \" + t + \", \" + sharedRegisters.shadowTarget + \".wwww\\n\" +\n\t\t\tmethodVO.secondaryTextureVO._iGetFragmentCode(shader, t, regCache, sharedRegisters, sharedRegisters.uvVarying) +\n\t\t\t\"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:LightingShader, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tsuper.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\n\t\tif (shader.numLights > 0)\n\t\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\t}\n}\n\nexport = DiffuseGradientMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\n\n/**\n * DiffuseLightMapMethod provides a diffuse shading method that uses a light map to modulate the calculated diffuse\n * lighting. It is different from EffectLightMapMethod in that the latter modulates the entire calculated pixel color, rather\n * than only the diffuse lighting value.\n */\nclass DiffuseLightMapMethod extends DiffuseCompositeMethod\n{\n\t/**\n\t * Indicates the light map should be multiplied with the calculated shading result.\n\t * This can be used to add pre-calculated shadows or occlusion.\n\t */\n\tpublic static MULTIPLY:string = \"multiply\";\n\n\t/**\n\t * Indicates the light map should be added into the calculated shading result.\n\t * This can be used to add pre-calculated lighting or global illumination.\n\t */\n\tpublic static ADD:string = \"add\";\n\n\tprivate _lightMap:TextureBase;\n\tprivate _blendMode:string;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new DiffuseLightMapMethod method.\n\t *\n\t * @param lightMap The texture containing the light map.\n\t * @param blendMode The blend mode with which the light map should be applied to the lighting result.\n\t * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.\n\t * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.\n\t */\n\tconstructor(lightMap:TextureBase, blendMode:string = \"multiply\", useSecondaryUV:boolean = false, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t\tthis._lightMap = lightMap;\n\t\tthis.blendMode = blendMode;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(this._lightMap);\n\n\t\tif (this._useSecondaryUV)\n\t\t\tshader.secondaryUVDependencies++;\n\t\telse\n\t\t\tshader.uvDependencies++;\n\t}\n\n\t/**\n\t * The blend mode with which the light map should be applied to the lighting result.\n\t *\n\t * @see DiffuseLightMapMethod.ADD\n\t * @see DiffuseLightMapMethod.MULTIPLY\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (value != DiffuseLightMapMethod.ADD && value != DiffuseLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture containing the light map data.\n\t */\n\tpublic get lightMap():TextureBase\n\t{\n\t\treturn this._lightMap;\n\t}\n\n\tpublic set lightMap(value:TextureBase)\n\t{\n\t\tif (this._lightMap == value)\n\t\t\treturn;\n\n\t\tthis._lightMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\n\t\tthis._useSecondaryUV = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode = methodVO.secondaryTextureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying);\n\n\t\tswitch (this._blendMode) {\n\t\t\tcase DiffuseLightMapMethod.MULTIPLY:\n\t\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase DiffuseLightMapMethod.ADD:\n\t\t\t\tcode += \"add \" + this._pTotalLightColorReg + \", \" + this._pTotalLightColorReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tcode += super.iGetFragmentPostLightingCode(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:LightingShader, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tsuper.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\n\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\t}\n}\n\nexport = DiffuseLightMapMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport DiffuseCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseCompositeMethod\");\nimport SingleObjectDepthPass\t\t\t= require(\"awayjs-methodmaterials/lib/render/passes/SingleObjectDepthPass\");\n\n/**\n * DiffuseSubSurfaceMethod provides a depth map-based diffuse shading method that mimics the scattering of\n * light inside translucent surfaces. It allows light to shine through an object and to soften the diffuse shading.\n * It can be used for candle wax, ice, skin, ...\n */\nclass DiffuseSubSurfaceMethod extends DiffuseCompositeMethod\n{\n\tprivate _depthPass:SingleObjectDepthPass;\n\tprivate _lightProjVarying:ShaderRegisterElement;\n\tprivate _propReg:ShaderRegisterElement;\n\tprivate _scattering:number;\n\tprivate _translucency:number = 1;\n\tprivate _lightColorReg:ShaderRegisterElement;\n\tprivate _scatterColor:number /*uint*/ = 0xffffff;\n\tprivate _colorReg:ShaderRegisterElement;\n\tprivate _decReg:ShaderRegisterElement;\n\tprivate _scatterR:number = 1.0;\n\tprivate _scatterG:number = 1.0;\n\tprivate _scatterB:number = 1.0;\n\tprivate _targetReg:ShaderRegisterElement;\n\t\n\t/**\n\t * Creates a new <code>DiffuseSubSurfaceMethod</code> object.\n\t *\n\t * @param depthMapSize The size of the depth map used.\n\t * @param depthMapOffset The amount by which the rendered object will be inflated, to prevent depth map rounding errors.\n\t * @param baseMethod The diffuse method used to calculate the regular diffuse-based lighting.\n\t */\n\tconstructor(depthMapSize:number /*int*/ = 512, depthMapOffset:number = 15, baseMethod:DiffuseBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.pBaseMethod._iModulateMethod = (shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.scatterLight(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\t//this._passes = new Array<MaterialPassGLBase>();\n\t\t//this._depthPass = new SingleObjectDepthPass();\n\t\t//this._depthPass.textureSize = depthMapSize;\n\t\t//this._depthPass.polyOffset = depthMapOffset;\n\t\t//this._passes.push(this._depthPass);\n\t\tthis._scattering = 0.2;\n\t\tthis._translucency = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shader, methodVO);\n\n\t\tvar data:Float32Array = shader.vertexConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryVertexConstantsIndex;\n\t\tdata[index] = .5;\n\t\tdata[index + 1] = -.5;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t\t\n\t\tdata = shader.fragmentConstantData;\n\t\tindex = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index + 3] = 1.0;\n\t\tdata[index + 4] = 1.0;\n\t\tdata[index + 5] = 1/255;\n\t\tdata[index + 6] = 1/65025;\n\t\tdata[index + 7] = 1/16581375;\n\t\tdata[index + 10] = .5;\n\t\tdata[index + 11] = -.1;\n\t}\n\t\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._lightProjVarying = null;\n\t\tthis._propReg = null;\n\t\tthis._lightColorReg = null;\n\t\tthis._colorReg = null;\n\t\tthis._decReg = null;\n\t\tthis._targetReg = null;\n\t}\n\t\n\t/**\n\t * The amount by which the light scatters. It can be used to set the translucent surface's thickness. Use low\n\t * values for skin.\n\t */\n\tpublic get scattering():number\n\t{\n\t\treturn this._scattering;\n\t}\n\t\n\tpublic set scattering(value:number)\n\t{\n\t\tthis._scattering = value;\n\t}\n\t\n\t/**\n\t * The translucency of the object.\n\t */\n\tpublic get translucency():number\n\t{\n\t\treturn this._translucency;\n\t}\n\t\n\tpublic set translucency(value:number)\n\t{\n\t\tthis._translucency = value;\n\t}\n\t\n\t/**\n\t * The colour of the \"insides\" of the object, ie: the colour the light becomes after leaving the object.\n\t */\n\tpublic get scatterColor():number /*uint*/\n\t{\n\t\treturn this._scatterColor;\n\t}\n\t\n\tpublic set scatterColor(scatterColor:number /*uint*/)\n\t{\n\t\tthis._scatterColor = scatterColor;\n\t\tthis._scatterR = ((scatterColor >> 16) & 0xff)/0xff;\n\t\tthis._scatterG = ((scatterColor >> 8) & 0xff)/0xff;\n\t\tthis._scatterB = (scatterColor & 0xff)/0xff;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetVertexCode(shader, methodVO, registerCache, sharedRegisters);\n\t\tvar lightProjection:ShaderRegisterElement;\n\t\tvar toTexRegister:ShaderRegisterElement;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\t\t\n\t\ttoTexRegister = registerCache.getFreeVertexConstant();\n\t\tmethodVO.secondaryVertexConstantsIndex = toTexRegister.index*4;\n\n\t\tthis._lightProjVarying = registerCache.getFreeVarying();\n\t\tlightProjection = registerCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\tregisterCache.getFreeVertexConstant();\n\t\t\n\t\tcode += \"m44 \" + temp + \", vt0, \" + lightProjection + \"\\n\" +\n\t\t\t\"div \" + temp + \".xyz, \" + temp + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xy, \" + temp + \".xy, \" + toTexRegister + \".xy\\n\" +\n\t\t\t\"add \" + temp + \".xy, \" + temp + \".xy, \" + toTexRegister + \".xx\\n\" +\n\t\t\t\"mov \" + this._lightProjVarying + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\"mov \" + this._lightProjVarying + \".w, va0.w\\n\";\n\t\t\n\t\treturn code;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._colorReg = registerCache.getFreeFragmentConstant();\n\t\tthis._decReg = registerCache.getFreeFragmentConstant();\n\t\tthis._propReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._colorReg.index*4;\n\t\t\n\t\treturn super.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pIsFirstLight = true;\n\t\tthis._lightColorReg = lightColReg;\n\t\treturn super.iGetFragmentCodePerLight(shader, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPostLightingCode(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\t\n\t\tcode += \"mul \" + temp + \".xyz, \" + this._lightColorReg + \".xyz, \" + this._targetReg + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".xyz, \" + this._colorReg + \".xyz\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t\n\t\tif (this._targetReg != sharedRegisters.viewDirFragment)\n\t\t\tregisterCache.removeFragmentTempUsage(targetReg);\n\t\t\n\t\treturn code;\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = this._scatterR;\n\t\tdata[index + 1] = this._scatterG;\n\t\tdata[index + 2] = this._scatterB;\n\t\tdata[index + 8] = this._scattering;\n\t\tdata[index + 9] = this._translucency;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(this._depthPass._iGetDepthMap(renderable));\n\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\n\t\tthis._depthPass._iGetProjection(renderable).copyRawDataTo(shader.vertexConstantData, methodVO.secondaryVertexConstantsIndex + 4, true);\n\t}\n\t\n\t/**\n\t * Generates the code for this method\n\t */\n\tprivate scatterLight(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// only scatter first light\n\t\tif (!this._pIsFirstLight)\n\t\t\treturn \"\";\n\n\t\tthis._pIsFirstLight = false;\n\n\t\tvar code:string = \"\";\n\n\t\tif (sharedRegisters.viewDirFragment)\n\t\t\tthis._targetReg = sharedRegisters.viewDirFragment;\n\t\telse\n\t\t\tregisterCache.addFragmentTempUsages(this._targetReg = registerCache.getFreeFragmentVectorTemp(), 1);\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode += methodVO.secondaryTextureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, this._lightProjVarying) +\n\t\t\t// reencode RGBA\n\t\t\t\"dp4 \" + targetReg + \".z, \" + temp + \", \" + this._decReg + \"\\n\";\n\t\t// currentDistanceToLight - closestDistanceToLight\n\t\tcode += \"sub \" + targetReg + \".z, \" + this._lightProjVarying + \".z, \" + targetReg + \".z\\n\" +\n\t\t\t\n\t\t\t\"sub \" + targetReg + \".z, \" + this._propReg + \".x, \" + targetReg + \".z\\n\" +\n\t\t\t\"mul \" + targetReg + \".z, \" + this._propReg + \".y, \" + targetReg + \".z\\n\" +\n\t\t\t\"sat \" + targetReg + \".z, \" + targetReg + \".z\\n\" +\n\t\t\t\n\t\t\t// targetReg.x contains dot(lightDir, normal)\n\t\t\t// modulate according to incident light angle (scatter = scatter*(-.5*dot(light, normal) + .5)\n\t\t\t\"neg \" + targetReg + \".y, \" + targetReg + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".y, \" + targetReg + \".y, \" + this._propReg + \".z\\n\" +\n\t\t\t\"add \" + targetReg + \".y, \" + targetReg + \".y, \" + this._propReg + \".z\\n\" +\n\t\t\t\"mul \" + this._targetReg + \".w, \" + targetReg + \".z, \" + targetReg + \".y\\n\" +\n\t\t\t\n\t\t\t// blend diffuse: d' = (1-s)*d + s*1\n\t\t\t\"sub \" + targetReg + \".y, \" + this._colorReg + \".w, \" + this._targetReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\t\t\n\t\treturn code;\n\t}\n}\n\nexport = DiffuseSubSurfaceMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\n\n/**\n * DiffuseWrapMethod is an alternative to DiffuseBasicMethod in which the light is allowed to be \"wrapped around\" the normally dark area, to some extent.\n * It can be used as a crude approximation to Oren-Nayar or simple subsurface scattering.\n */\nclass DiffuseWrapMethod extends DiffuseBasicMethod\n{\n\tprivate _wrapDataRegister:ShaderRegisterElement;\n\tprivate _wrapFactor:number;\n\n\t/**\n\t * Creates a new DiffuseWrapMethod object.\n\t * @param wrapFactor A factor to indicate the amount by which the light is allowed to wrap\n\t */\n\tconstructor(wrapFactor:number = .5)\n\t{\n\t\tsuper();\n\n\t\tthis.wrapFactor = wrapFactor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._wrapDataRegister = null;\n\t}\n\n\t/**\n\t * A factor to indicate the amount by which the light is allowed to wrap.\n\t */\n\tpublic get wrapFactor():number\n\t{\n\t\treturn this._wrapFactor;\n\t}\n\n\tpublic set wrapFactor(value:number)\n\t{\n\t\tthis._wrapFactor = value;\n\t\tthis._wrapFactor = 1/(value + 1);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = super.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t\tthis._pIsFirstLight = true;\n\t\tthis._wrapDataRegister = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._wrapDataRegister.index*4;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tcode += \"dp3 \" + t + \".x, \" + lightDirReg + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"add \" + t + \".y, \" + t + \".x, \" + this._wrapDataRegister + \".x\\n\" +\n\t\t\t\"mul \" + t + \".y, \" + t + \".y, \" + this._wrapDataRegister + \".y\\n\" +\n\t\t\t\"sat \" + t + \".w, \" + t + \".y\\n\" +\n\t\t\t\"mul \" + t + \".xz, \" + t + \".w, \" + lightDirReg + \".wz\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, lightDirReg, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \", \" + t + \".x, \" + lightColReg + \"\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = this._wrapFactor;\n\t\tdata[index + 1] = 1/(this._wrapFactor + 1);\n\t}\n}\n\nexport = DiffuseWrapMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectAlphaMaskMethod allows the use of an additional texture to specify the alpha value of the material. When used\n * with the secondary uv set, it allows for a tiled main texture with independently varying alpha (useful for water\n * etc).\n */\nclass EffectAlphaMaskMethod extends EffectMethodBase\n{\n\tprivate _texture:TextureBase;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new EffectAlphaMaskMethod object.\n\t *\n\t * @param texture The texture to use as the alpha mask.\n\t * @param useSecondaryUV Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently.\n\t */\n\tconstructor(texture:TextureBase, useSecondaryUV:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tthis._texture = texture;\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.textureVO = shader.getTextureVO(this._texture);\n\n\t\tif (this._useSecondaryUV)\n\t\t\tshader.secondaryUVDependencies++;\n\t\telse\n\t\t\tshader.uvDependencies++;\n\t}\n\n\t/**\n\t * Indicated whether or not the secondary uv set for the mask. This allows mapping alpha independently, for\n\t * instance to tile the main texture and normal map while providing untiled alpha, for example to define the\n\t * transparency over a tiled water surface.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\n\t\tthis._useSecondaryUV = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The texture to use as the alpha mask.\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tif (this._texture == value)\n\t\t\treturn;\n\n\t\tthis._texture = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\treturn methodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying) +\n\t\t\t\"mul \" + targetReg + \", \" + targetReg + \", \" + temp + \".x\\n\";\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tmethodVO.textureVO.activate(shader);\n\t}\n\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n}\n\nexport = EffectAlphaMaskMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectColorMatrixMethod provides a shading method that changes the colour of a material analogous to a ColorMatrixFilter.\n */\nclass EffectColorMatrixMethod extends EffectMethodBase\n{\n\tprivate _matrix:Array<number>;\n\n\t/**\n\t * Creates a new EffectColorTransformMethod.\n\t *\n\t * @param matrix An array of 20 items for 4 x 5 color transform.\n\t */\n\tconstructor(matrix:Array<number>)\n\t{\n\t\tsuper();\n\n\t\tif (matrix.length != 20)\n\t\t\tthrow new Error(\"Matrix length must be 20!\");\n\n\t\tthis._matrix = matrix;\n\t}\n\n\t/**\n\t * The 4 x 5 matrix to transform the color of the material.\n\t */\n\tpublic get colorMatrix():Array<number>\n\t{\n\t\treturn this._matrix;\n\t}\n\n\tpublic set colorMatrix(value:Array<number>)\n\t{\n\t\tthis._matrix = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar colorMultReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\t\tregisterCache.getFreeFragmentConstant();\n\n\t\tvar colorOffsetReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = colorMultReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode += \"m44 \" + temp + \", \" + targetReg + \", \" + colorMultReg + \"\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + temp + \", \" + colorOffsetReg + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar matrix:Array<number> = this._matrix;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\n\t\t// r\n\t\tdata[index] = matrix[0];\n\t\tdata[index + 1] = matrix[1];\n\t\tdata[index + 2] = matrix[2];\n\t\tdata[index + 3] = matrix[3];\n\n\t\t// g\n\t\tdata[index + 4] = matrix[5];\n\t\tdata[index + 5] = matrix[6];\n\t\tdata[index + 6] = matrix[7];\n\t\tdata[index + 7] = matrix[8];\n\n\t\t// b\n\t\tdata[index + 8] = matrix[10];\n\t\tdata[index + 9] = matrix[11];\n\t\tdata[index + 10] = matrix[12];\n\t\tdata[index + 11] = matrix[13];\n\n\t\t// a\n\t\tdata[index + 12] = matrix[15];\n\t\tdata[index + 13] = matrix[16];\n\t\tdata[index + 14] = matrix[17];\n\t\tdata[index + 15] = matrix[18];\n\n\t\t// rgba offset\n\t\tdata[index + 16] = matrix[4];\n\t\tdata[index + 17] = matrix[9];\n\t\tdata[index + 18] = matrix[14];\n\t\tdata[index + 19] = matrix[19];\n\t}\n}\n\nexport = EffectColorMatrixMethod;",
    "import ColorTransform\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectColorTransformMethod provides a shading method that changes the colour of a material analogous to a\n * ColorTransform object.\n */\nclass EffectColorTransformMethod extends EffectMethodBase\n{\n\tprivate _colorTransform:ColorTransform;\n\n\t/**\n\t * Creates a new EffectColorTransformMethod.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * The ColorTransform object to transform the colour of the material with.\n\t */\n\tpublic get colorTransform():ColorTransform\n\t{\n\t\treturn this._colorTransform;\n\t}\n\n\tpublic set colorTransform(value:ColorTransform)\n\t{\n\t\tthis._colorTransform = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar colorMultReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar colorOffsReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = colorMultReg.index*4;\n\n\t\t//TODO: AGAL <> GLSL\n\n\t\tcode += \"mul \" + targetReg + \", \" + targetReg + \", \" + colorMultReg + \"\\n\" + \"add \" + targetReg + \", \" + targetReg + \", \" + colorOffsReg + \"\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar inv:number = 1/0xff;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\n\t\tdata[index] = this._colorTransform.redMultiplier;\n\t\tdata[index + 1] = this._colorTransform.greenMultiplier;\n\t\tdata[index + 2] = this._colorTransform.blueMultiplier;\n\t\tdata[index + 3] = this._colorTransform.alphaMultiplier;\n\t\tdata[index + 4] = this._colorTransform.redOffset*inv;\n\t\tdata[index + 5] = this._colorTransform.greenOffset*inv;\n\t\tdata[index + 6] = this._colorTransform.blueOffset*inv;\n\t\tdata[index + 7] = this._colorTransform.alphaOffset*inv;\n\n\t}\n}\n\nexport = EffectColorTransformMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectEnvMapMethod provides a material method to perform reflection mapping using cube maps.\n */\nclass EffectEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:TextureBase;\n\tprivate _alpha:number;\n\tprivate _mask:TextureBase;\n\n\t/**\n\t * Creates an EffectEnvMapMethod object.\n\t * @param envMap The environment map containing the reflected scene.\n\t * @param alpha The reflectivity of the surface.\n\t */\n\tconstructor(envMap:TextureBase, alpha:number = 1)\n\t{\n\t\tsuper();\n\t\tthis._envMap = envMap;\n\t\tthis._alpha = alpha;\n\n\t}\n\n\t/**\n\t * An optional texture to modulate the reflectivity of the surface.\n\t */\n\tpublic get mask():TextureBase\n\t{\n\t\treturn this._mask;\n\t}\n\n\tpublic set mask(value:TextureBase)\n\t{\n\t\tif (value == this._mask)\n\t\t\treturn;\n\n\t\tthis._mask = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\n\t\tmethodVO.textureVO = shader.getTextureVO(this._envMap);\n\n\t\tif (this._mask != null) {\n\t\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(this._mask);\n\t\t\tshader.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * The cubic environment map containing the reflected scene.\n\t */\n\tpublic get envMap():TextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:TextureBase)\n\t{\n\t\tif (this._envMap == value)\n\t\t\treturn;\n\n\t\tthis._envMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t}\n\n\t/**\n\t * The reflectivity of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex] = this._alpha;\n\n\t\tmethodVO.textureVO.activate(shader);\n\n\t\tif (this._mask)\n\t\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\n\t\tif (this._mask)\n\t\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\n\n\t\t// r = I - 2(I.N)*N\n\t\tcode += \"dp3 \" + temp + \".w, \" + sharedRegisters.viewDirFragment + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"add \" + temp + \".w, \" + temp + \".w, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + sharedRegisters.normalFragment + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\"sub \" + temp + \".xyz, \" + temp + \".xyz, \" + sharedRegisters.viewDirFragment + \".xyz\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, temp) +\n\t\t\t\"sub \" + temp2 + \".w, \" + temp + \".w, fc0.x\\n\" + // -.5\n\t\t\t\"kil \" + temp2 + \".w\\n\" +\t// used for real time reflection mapping - if alpha is not 1 (mock texture) kil output\n\t\t\t\"sub \" + temp + \", \" + temp + \", \" + targetReg + \"\\n\";\n\n\t\tif (this._mask) {\n\t\t\tcode += methodVO.secondaryTextureVO._iGetFragmentCode(shader, temp2, registerCache, sharedRegisters, sharedRegisters.uvVarying) +\n\t\t\t\t\"mul \" + temp + \", \" + temp2 + \", \" + temp + \"\\n\";\n\t\t}\n\n\t\tcode += \"mul \" + temp + \", \" + temp + \", \" + dataRegister + \".x\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(temp2);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectEnvMapMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectFogMethod provides a method to add distance-based fog to a material.\n */\nclass EffectFogMethod extends EffectMethodBase\n{\n\tprivate _minDistance:number = 0;\n\tprivate _maxDistance:number = 1000;\n\tprivate _fogColor:number /*uint*/;\n\tprivate _fogR:number;\n\tprivate _fogG:number;\n\tprivate _fogB:number;\n\n\t/**\n\t * Creates a new EffectFogMethod object.\n\t * @param minDistance The distance from which the fog starts appearing.\n\t * @param maxDistance The distance at which the fog is densest.\n\t * @param fogColor The colour of the fog.\n\t */\n\tconstructor(minDistance:number, maxDistance:number, fogColor:number /*uint*/ = 0x808080)\n\t{\n\t\tsuper();\n\t\tthis.minDistance = minDistance;\n\t\tthis.maxDistance = maxDistance;\n\t\tthis.fogColor = fogColor;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index + 3] = 1;\n\t\tdata[index + 6] = 0;\n\t\tdata[index + 7] = 0;\n\t}\n\n\t/**\n\t * The distance from which the fog starts appearing.\n\t */\n\tpublic get minDistance():number\n\t{\n\t\treturn this._minDistance;\n\t}\n\n\tpublic set minDistance(value:number)\n\t{\n\t\tthis._minDistance = value;\n\t}\n\n\t/**\n\t * The distance at which the fog is densest.\n\t */\n\tpublic get maxDistance():number\n\t{\n\t\treturn this._maxDistance;\n\t}\n\n\tpublic set maxDistance(value:number)\n\t{\n\t\tthis._maxDistance = value;\n\t}\n\n\t/**\n\t * The colour of the fog.\n\t */\n\tpublic get fogColor():number /*uint*/\n\t{\n\t\treturn this._fogColor;\n\t}\n\n\tpublic set fogColor(value:number/*uint*/)\n\t{\n\t\tthis._fogColor = value;\n\t\tthis._fogR = ((value >> 16) & 0xff)/0xff;\n\t\tthis._fogG = ((value >> 8) & 0xff)/0xff;\n\t\tthis._fogB = (value & 0xff)/0xff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = this._fogR;\n\t\tdata[index + 1] = this._fogG;\n\t\tdata[index + 2] = this._fogB;\n\t\tdata[index + 4] = this._minDistance;\n\t\tdata[index + 5] = 1/(this._maxDistance - this._minDistance);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar fogColor:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar fogData:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\t\tmethodVO.fragmentConstantsIndex = fogColor.index*4;\n\n\t\tcode += \"sub \" + temp2 + \".w, \" + sharedRegisters.projectionFragment + \".z, \" + fogData + \".x\\n\" +\n\t\t\t\t\"mul \" + temp2 + \".w, \" + temp2 + \".w, \" + fogData + \".y\\n\" +\n\t\t\t\t\"sat \" + temp2 + \".w, \" + temp2 + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \", \" + fogColor + \", \" + targetReg + \"\\n\" + // (fogColor- col)\n\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + temp2 + \".w\\n\" + // (fogColor- col)*fogRatio\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\"; // fogRatio*(fogColor- col) + col\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectFogMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectFresnelEnvMapMethod provides a method to add fresnel-based reflectivity to an object using cube maps, which gets\n * stronger as the viewing angle becomes more grazing.\n */\nclass EffectFresnelEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:TextureBase;\n\tprivate _fresnelPower:number = 5;\n\tprivate _normalReflectance:number = 0;\n\tprivate _alpha:number;\n\tprivate _mask:TextureBase;\n\n\t/**\n\t * Creates a new <code>EffectFresnelEnvMapMethod</code> object.\n\t *\n\t * @param envMap The environment map containing the reflected scene.\n\t * @param alpha The reflectivity of the material.\n\t */\n\tconstructor(envMap:TextureBase, alpha:number = 1)\n\t{\n\t\tsuper();\n\n\t\tthis._envMap = envMap;\n\t\tthis._alpha = alpha;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\n\t\tmethodVO.textureVO = shader.getTextureVO(this._envMap);\n\n\t\tif (this._mask != null) {\n\t\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(this._mask);\n\t\t\tshader.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex + 3] = 1;\n\t}\n\n\t/**\n\t * An optional texture to modulate the reflectivity of the surface.\n\t */\n\tpublic get mask():TextureBase\n\t{\n\t\treturn this._mask;\n\t}\n\n\tpublic set mask(value:TextureBase)\n\t{\n\t\tif (this._mask == value)\n\t\t\treturn;\n\t\t\n\t\tthis._mask = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.\n\t */\n\tpublic get fresnelPower():number\n\t{\n\t\treturn this._fresnelPower;\n\t}\n\n\tpublic set fresnelPower(value:number)\n\t{\n\t\tthis._fresnelPower = value;\n\t}\n\n\t/**\n\t * The cubic environment map containing the reflected scene.\n\t */\n\tpublic get envMap():TextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:TextureBase)\n\t{\n\t\tthis._envMap = value;\n\t}\n\n\t/**\n\t * The reflectivity of the surface.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.\n\t */\n\tpublic get normalReflectance():number\n\t{\n\t\treturn this._normalReflectance;\n\t}\n\n\tpublic set normalReflectance(value:number)\n\t{\n\t\tthis._normalReflectance = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index] = this._alpha;\n\t\tdata[index + 1] = this._normalReflectance;\n\t\tdata[index + 2] = this._fresnelPower;\n\n\t\tmethodVO.textureVO.activate(shader);\n\n\t\tif (this._mask)\n\t\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\n\t\tif (this._mask)\n\t\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar temp2:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp2, 1);\n\n\t\t// r = V - 2(V.N)*N\n\t\tcode += \"dp3 \" + temp + \".w, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"add \" + temp + \".w, \" + temp + \".w, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + normalReg + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".xyz, \" + temp + \".xyz, \" + viewDirReg + \".xyz\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, temp) +\n\t\t\t\t\"sub \" + temp2 + \".w, \" + temp + \".w, fc0.x\\n\" +               \t// -.5\n\t\t\t\t\"kil \" + temp2 + \".w\\n\" +\t// used for real time reflection mapping - if alpha is not 1 (mock texture) kil output\n\t\t\t\t\"sub \" + temp + \", \" + temp + \", \" + targetReg + \"\\n\";\n\n\t\t// calculate fresnel term\n\t\tcode += \"dp3 \" + viewDirReg + \".w, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +  // dot(V, H)\n\t\t\t\t\"sub \" + viewDirReg + \".w, \" + dataRegister + \".w, \" + viewDirReg + \".w\\n\" +       // base = 1-dot(V, H)\n\t\t\t\t\"pow \" + viewDirReg + \".w, \" + viewDirReg + \".w, \" + dataRegister + \".z\\n\" +       // exp = pow(base, 5)\n\t\t\t\t\"sub \" + normalReg + \".w, \" + dataRegister + \".w, \" + viewDirReg + \".w\\n\" +        // 1 - exp\n\t\t\t\t\"mul \" + normalReg + \".w, \" + dataRegister + \".y, \" + normalReg + \".w\\n\" +         // f0*(1 - exp)\n\t\t\t\t\"add \" + viewDirReg + \".w, \" + viewDirReg + \".w, \" + normalReg + \".w\\n\" +          // exp + f0*(1 - exp)\n\n\t\t\t\t// total alpha\n\t\t\t\t\"mul \" + viewDirReg + \".w, \" + dataRegister + \".x, \" + viewDirReg + \".w\\n\";\n\n\t\tif (this._mask) {\n\t\t\tcode += methodVO.secondaryTextureVO._iGetFragmentCode(shader, temp2, registerCache, sharedRegisters, sharedRegisters.uvVarying) +\n\t\t\t\t\"mul \" + viewDirReg + \".w, \" + temp2 + \".x, \" + viewDirReg + \".w\\n\";\n\t\t}\n\n\t\t// blend\n\t\tcode += \"mul \" + temp + \", \" + temp + \", \" + viewDirReg + \".w\\n\" +\n\t\t\t\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(temp2);\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectFresnelEnvMapMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectLightMapMethod provides a method that allows applying a light map texture to the calculated pixel colour.\n * It is different from DiffuseLightMapMethod in that the latter only modulates the diffuse shading value rather\n * than the whole pixel colour.\n */\nclass EffectLightMapMethod extends EffectMethodBase\n{\n\t/**\n\t * Indicates the light map should be multiplied with the calculated shading result.\n\t */\n\tpublic static MULTIPLY:string = \"multiply\";\n\n\t/**\n\t * Indicates the light map should be added into the calculated shading result.\n\t */\n\tpublic static ADD:string = \"add\";\n\n\tprivate _lightMap:TextureBase;\n\n\tprivate _blendMode:string;\n\tprivate _useSecondaryUV:boolean;\n\n\t/**\n\t * Creates a new EffectLightMapMethod object.\n\t *\n\t * @param lightMap The texture containing the light map.\n\t * @param blendMode The blend mode with which the light map should be applied to the lighting result.\n\t * @param useSecondaryUV Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tconstructor(lightMap:TextureBase, blendMode:string = \"multiply\", useSecondaryUV:boolean = false)\n\t{\n\t\tsuper();\n\n\t\tif (blendMode != EffectLightMapMethod.ADD && blendMode != EffectLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tthis._lightMap = lightMap;\n\t\tthis._blendMode = blendMode;\n\t\tthis._useSecondaryUV = useSecondaryUV;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.textureVO = shader.getTextureVO(this._lightMap);\n\n\t\tif (this._useSecondaryUV)\n\t\t\tshader.secondaryUVDependencies++;\n\t\telse\n\t\t\tshader.uvDependencies++;\n\t}\n\n\t/**\n\t * The blend mode with which the light map should be applied to the lighting result.\n\t *\n\t * @see EffectLightMapMethod.ADD\n\t * @see EffectLightMapMethod.MULTIPLY\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tif (value != EffectLightMapMethod.ADD && value != EffectLightMapMethod.MULTIPLY)\n\t\t\tthrow new Error(\"Unknown blendmode!\");\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The lightMap containing the light map.\n\t */\n\tpublic get lightMap():TextureBase\n\t{\n\t\treturn this._lightMap;\n\t}\n\n\tpublic set lightMap(value:TextureBase)\n\t{\n\t\tif (this._lightMap == value)\n\t\t\treturn;\n\n\t\tthis._lightMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Indicates whether the secondary UV set should be used to map the light map.\n\t */\n\tpublic get useSecondaryUV():boolean\n\t{\n\t\treturn this._useSecondaryUV;\n\t}\n\n\tpublic set useSecondaryUV(value:boolean)\n\t{\n\t\tif (this._useSecondaryUV == value)\n\t\t\treturn;\n\n\t\tthis._useSecondaryUV = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\tcode = methodVO.secondaryTextureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, this._useSecondaryUV? sharedRegisters.secondaryUVVarying : sharedRegisters.uvVarying);\n\n\t\tswitch (this._blendMode) {\n\t\t\tcase EffectLightMapMethod.MULTIPLY:\n\t\t\t\tcode += \"mul \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t\tcase EffectLightMapMethod.ADD:\n\t\t\t\tcode += \"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\\n\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tmethodVO.textureVO.activate(shader);\n\t}\n\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n}\n\nexport = EffectLightMapMethod;",
    "import IAsset\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\nimport AbstractMethodError\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport ShaderBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * EffectMethodBase forms an abstract base class for shader methods that are not dependent on light sources,\n * and are in essence post-process effects on the materials.\n */\nclass EffectMethodBase extends ShadingMethodBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset EffectMethod]\";\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn EffectMethodBase.assetType;\n\t}\n\n\t/**\n\t * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register that will be containing the method's output.\n\t * @private\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n}\n\nexport = EffectMethodBase;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectRefractionEnvMapMethod provides a method to add refracted transparency based on cube maps.\n */\nclass EffectRefractionEnvMapMethod extends EffectMethodBase\n{\n\tprivate _envMap:TextureBase;\n\n\tprivate _dispersionR:number = 0;\n\tprivate _dispersionG:number = 0;\n\tprivate _dispersionB:number = 0;\n\tprivate _useDispersion:boolean;\n\tprivate _refractionIndex:number;\n\tprivate _alpha:number = 1;\n\n\t/**\n\t * Creates a new EffectRefractionEnvMapMethod object. Example values for dispersion are: dispersionR: -0.03, dispersionG: -0.01, dispersionB: = .0015\n\t *\n\t * @param envMap The environment map containing the refracted scene.\n\t * @param refractionIndex The refractive index of the material.\n\t * @param dispersionR The amount of chromatic dispersion of the red channel. Defaults to 0 (none).\n\t * @param dispersionG The amount of chromatic dispersion of the green channel. Defaults to 0 (none).\n\t * @param dispersionB The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).\n\t */\n\tconstructor(envMap:TextureBase, refractionIndex:number = .1, dispersionR:number = 0, dispersionG:number = 0, dispersionB:number = 0)\n\t{\n\t\tsuper();\n\t\tthis._envMap = envMap;\n\t\tthis._dispersionR = dispersionR;\n\t\tthis._dispersionG = dispersionG;\n\t\tthis._dispersionB = dispersionB;\n\t\tthis._useDispersion = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tthis._refractionIndex = refractionIndex;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index + 4] = 1;\n\t\tdata[index + 5] = 0;\n\t\tdata[index + 7] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\n\t\tmethodVO.textureVO = shader.getTextureVO(this._envMap);\n\t}\n\n\t/**\n\t * The cube environment map to use for the refraction.\n\t */\n\tpublic get envMap():TextureBase\n\t{\n\t\treturn this._envMap;\n\t}\n\n\tpublic set envMap(value:TextureBase)\n\t{\n\t\tthis._envMap = value;\n\t}\n\n\t/**\n\t * The refractive index of the material.\n\t */\n\tpublic get refractionIndex():number\n\t{\n\t\treturn this._refractionIndex;\n\t}\n\n\tpublic set refractionIndex(value:number)\n\t{\n\t\tthis._refractionIndex = value;\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the red channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionR():number\n\t{\n\t\treturn this._dispersionR;\n\t}\n\n\tpublic set dispersionR(value:number)\n\t{\n\t\tthis._dispersionR = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the green channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionG():number\n\t{\n\t\treturn this._dispersionG;\n\t}\n\n\tpublic set dispersionG(value:number)\n\t{\n\t\tthis._dispersionG = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of chromatic dispersion of the blue channel. Defaults to 0 (none).\n\t */\n\tpublic get dispersionB():number\n\t{\n\t\treturn this._dispersionB;\n\t}\n\n\tpublic set dispersionB(value:number)\n\t{\n\t\tthis._dispersionB = value;\n\n\t\tvar useDispersion:boolean = !(this._dispersionR == this._dispersionB && this._dispersionR == this._dispersionG);\n\t\tif (this._useDispersion != useDispersion) {\n\t\t\tthis.iInvalidateShaderProgram();\n\t\t\tthis._useDispersion = useDispersion;\n\t\t}\n\t}\n\n\t/**\n\t * The amount of transparency of the object. Warning: the alpha applies to the refracted color, not the actual\n\t * material. A value of 1 will make it appear fully transparent.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\n\t\tdata[index] = this._dispersionR + this._refractionIndex;\n\n\t\tif (this._useDispersion) {\n\t\t\tdata[index + 1] = this._dispersionG + this._refractionIndex;\n\t\t\tdata[index + 2] = this._dispersionB + this._refractionIndex;\n\t\t}\n\t\tdata[index + 3] = this._alpha;\n\n\t\tmethodVO.textureVO.activate(shader);\n\t}\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// todo: data2.x could use common reg, so only 1 reg is used\n\t\tvar data:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar data2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar code:string = \"\";\n\t\tvar refractionDir:ShaderRegisterElement;\n\t\tvar refractionColor:ShaderRegisterElement;\n\t\tvar temp:ShaderRegisterElement;\n\n\t\tmethodVO.fragmentConstantsIndex = data.index*4;\n\n\t\trefractionDir = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(refractionDir, 1);\n\t\trefractionColor = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(refractionColor, 1);\n\t\ttemp = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\tcode += \"neg \" + viewDirReg + \".xyz, \" + viewDirReg + \".xyz\\n\";\n\n\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + data + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".w, \" + data + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\"mul \" + temp + \".x, \" + data + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\"mul \" + refractionDir + \", \" + data + \".x, \" + viewDirReg + \"\\n\" +\n\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\" +\n\t\tmethodVO.textureVO._iGetFragmentCode(shader, refractionColor, registerCache, sharedRegisters, refractionDir) +\n\t\t\t\"sub \" + refractionColor + \".w, \" + refractionColor + \".w, fc0.x\t\\n\" +\n\t\t\t\"kil \" + refractionColor + \".w\\n\";\n\n\t\tif (this._useDispersion) {\n\t\t\t// GREEN\n\t\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".y, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".y, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\t\"mul \" + temp + \".x, \" + data + \".y, \" + temp + \".x\\n\" +\n\t\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\t\"mul \" + refractionDir + \", \" + data + \".y, \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, refractionDir) +\n\t\t\t\t\"mov \" + refractionColor + \".y, \" + temp + \".y\\n\";\n\n\t\t\t// BLUE\n\t\t\tcode += \"dp3 \" + temp + \".x, \" + viewDirReg + \".xyz, \" + normalReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".z, \" + temp + \".w\\n\" +\n\t\t\t\t\"mul \" + temp + \".w, \" + data + \".z, \" + temp + \".w\\n\" +\n\t\t\t\t\"sub \" + temp + \".w, \" + data2 + \".x, \" + temp + \".w\\n\" +\n\t\t\t\t\"sqt \" + temp + \".y, \" + temp + \".w\\n\" +\n\n\t\t\t\t\"mul \" + temp + \".x, \" + data + \".z, \" + temp + \".x\\n\" +\n\t\t\t\t\"add \" + temp + \".x, \" + temp + \".x, \" + temp + \".y\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".x, \" + normalReg + \".xyz\\n\" +\n\n\t\t\t\t\"mul \" + refractionDir + \", \" + data + \".z, \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"sub \" + refractionDir + \".xyz, \" + refractionDir + \".xyz, \" + temp + \".xyz\\n\" +\n\t\t\t\t\"nrm \" + refractionDir + \".xyz, \" + refractionDir + \".xyz\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, refractionDir) +\n\t\t\t\t\"mov \" + refractionColor + \".z, \" + temp + \".z\\n\";\n\t\t}\n\n\t\tcode += \"sub \" + refractionColor + \".xyz, \" + refractionColor + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\"mul \" + refractionColor + \".xyz, \" + refractionColor + \".xyz, \" + data + \".w\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + refractionColor + \".xyz\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(refractionDir);\n\t\tregisterCache.removeFragmentTempUsage(refractionColor);\n\n\t\t// restore\n\t\tcode += \"neg \" + viewDirReg + \".xyz, \" + viewDirReg + \".xyz\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectRefractionEnvMapMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\n\n/**\n * EffectRimLightMethod provides a method to add rim lighting to a material. This adds a glow-like effect to edges of objects.\n */\nclass EffectRimLightMethod extends EffectMethodBase\n{\n\tpublic static ADD:string = \"add\";\n\tpublic static MULTIPLY:string = \"multiply\";\n\tpublic static MIX:string = \"mix\";\n\n\tprivate _color:number /*uint*/;\n\tprivate _blendMode:string;\n\tprivate _colorR:number;\n\tprivate _colorG:number;\n\tprivate _colorB:number;\n\tprivate _strength:number;\n\tprivate _power:number;\n\n\t/**\n\t * Creates a new <code>EffectRimLightMethod</code> object.\n\t *\n\t * @param color The colour of the rim light.\n\t * @param strength The strength of the rim light.\n\t * @param power The power of the rim light. Higher values will result in a higher edge fall-off.\n\t * @param blend The blend mode with which to add the light to the object.\n\t */\n\tconstructor(color:number /*uint*/ = 0xffffff, strength:number = .4, power:number = 2, blend:string = \"mix\")\n\t{\n\t\tsuper();\n\n\t\tthis._blendMode = blend;\n\t\tthis._strength = strength;\n\t\tthis._power = power;\n\n\t\tthis.color = color;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\n\t/**\n\t * The blend mode with which to add the light to the object.\n\t *\n\t * EffectRimLightMethod.MULTIPLY multiplies the rim light with the material's colour.\n\t * EffectRimLightMethod.ADD adds the rim light with the material's colour.\n\t * EffectRimLightMethod.MIX provides normal alpha blending.\n\t */\n\tpublic get blendMode():string\n\t{\n\t\treturn this._blendMode;\n\t}\n\n\tpublic set blendMode(value:string)\n\t{\n\t\tif (this._blendMode == value)\n\t\t\treturn;\n\n\t\tthis._blendMode = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The color of the rim light.\n\t */\n\tpublic get color():number /*uint*/\n\t{\n\t\treturn this._color;\n\t}\n\n\tpublic set color(value:number /*uint*/)\n\t{\n\t\tthis._color = value;\n\t\tthis._colorR = ((value >> 16) & 0xff)/0xff;\n\t\tthis._colorG = ((value >> 8) & 0xff)/0xff;\n\t\tthis._colorB = (value & 0xff)/0xff;\n\t}\n\n\t/**\n\t * The strength of the rim light.\n\t */\n\tpublic get strength():number\n\t{\n\t\treturn this._strength;\n\t}\n\n\tpublic set strength(value:number)\n\t{\n\t\tthis._strength = value;\n\t}\n\n\t/**\n\t * The power of the rim light. Higher values will result in a higher edge fall-off.\n\t */\n\tpublic get power():number\n\t{\n\t\treturn this._power;\n\t}\n\n\tpublic set power(value:number)\n\t{\n\t\tthis._power = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = this._colorR;\n\t\tdata[index + 1] = this._colorG;\n\t\tdata[index + 2] = this._colorB;\n\t\tdata[index + 4] = this._strength;\n\t\tdata[index + 5] = this._power;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar dataRegister:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataRegister2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tvar code:string = \"\";\n\n\t\tmethodVO.fragmentConstantsIndex = dataRegister.index*4;\n\n\t\tcode += \"dp3 \" + temp + \".x, \" + sharedRegisters.viewDirFragment + \".xyz, \" + sharedRegisters.normalFragment + \".xyz\\n\" +\n\t\t\t\"sat \" + temp + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".x, \" + dataRegister + \".w, \" + temp + \".x\\n\" +\n\t\t\t\"pow \" + temp + \".x, \" + temp + \".x, \" + dataRegister2 + \".y\\n\" +\n\t\t\t\"mul \" + temp + \".x, \" + temp + \".x, \" + dataRegister2 + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".x, \" + dataRegister + \".w, \" + temp + \".x\\n\" +\n\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".x\\n\" +\n\t\t\t\"sub \" + temp + \".w, \" + dataRegister + \".w, \" + temp + \".x\\n\";\n\n\t\tif (this._blendMode == EffectRimLightMethod.ADD) {\n\t\t\tcode += \"mul \" + temp + \".xyz, \" + temp + \".w, \" + dataRegister + \".xyz\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t} else if (this._blendMode == EffectRimLightMethod.MULTIPLY) {\n\t\t\tcode += \"mul \" + temp + \".xyz, \" + temp + \".w, \" + dataRegister + \".xyz\\n\" +\n\t\t\t\t\"mul \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t} else {\n\t\t\tcode += \"sub \" + temp + \".xyz, \" + dataRegister + \".xyz, \" + targetReg + \".xyz\\n\" +\n\t\t\t\t\"mul \" + temp + \".xyz, \" + temp + \".xyz, \" + temp + \".w\\n\" +\n\t\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + temp + \".xyz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n}\n\nexport = EffectRimLightMethod;",
    "import ShaderBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport LightingShader\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * LightingMethodBase provides an abstract base method for shading methods that uses lights.\n * Used for diffuse and specular shaders only.\n */\nclass LightingMethodBase extends ShadingMethodBase\n{\n\t/**\n\t * A method that is exposed to wrappers in case the strength needs to be controlled\n\t */\n\tpublic _iModulateMethod:(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string;\n\n\t/**\n\t * Creates a new LightingMethodBase.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * Get the fragment shader code that will be needed before any per-light code is added.\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @private\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that will generate the code relevant to a single light.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param lightDirReg The register containing the light direction vector.\n\t * @param lightColReg The register containing the light colour.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that will generate the code relevant to a single light probe object.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param cubeMapReg The register containing the cube map for the current probe\n\t * @param weightRegister A string representation of the register + component containing the current weight\n\t * @param regCache The register cache providing any necessary registers to the shader\n\t */\n\tpublic iGetFragmentCodePerProbe(shader:LightingShader, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.\n\t *\n\t * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register containing the final shading output.\n\t * @private\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n}\n\nexport = LightingMethodBase;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * NormalBasicMethod is the default method for standard tangent-space normal mapping.\n */\nclass NormalBasicMethod extends ShadingMethodBase\n{\n\tprivate _normalMap:TextureBase;\n\n\t/**\n\t * Creates a new NormalBasicMethod object.\n\t */\n\tconstructor(normalMap:TextureBase = null)\n\t{\n\t\tsuper();\n\n\t\tthis._normalMap = normalMap;\n\t}\n\n\tpublic iIsUsed(shader:ShaderBase):boolean\n\t{\n\t\tif (this._normalMap && shader.normalDependencies)\n\t\t\treturn true;\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tif (this._normalMap) {\n\t\t\tmethodVO.textureVO = shader.getTextureVO(this._normalMap);\n\t\t\tshader.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * Indicates whether or not this method outputs normals in tangent space. Override for object-space normals.\n\t */\n\tpublic iOutputsTangentNormals():boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tvar s:any = method;\n\t\tvar bnm:NormalBasicMethod = <NormalBasicMethod> method;\n\n\t\tif (bnm.normalMap != null)\n\t\t\tthis.normalMap = bnm.normalMap;\n\t}\n\n\t/**\n\t * The texture containing the normals per pixel.\n\t */\n\tpublic get normalMap():TextureBase\n\t{\n\t\treturn this._normalMap;\n\t}\n\n\tpublic set normalMap(value:TextureBase)\n\t{\n\t\tif (this._normalMap == value)\n\t\t\treturn;\n\n\t\tthis._normalMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._normalMap)\n\t\t\tthis._normalMap = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._normalMap)\n\t\t\tmethodVO.textureVO.activate(shader);\n\t}\n\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (this._normalMap)\n\t\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._normalMap)\n\t\t\tcode += methodVO.textureVO._iGetFragmentCode(shader, targetReg, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\n\n\t\tcode += \"sub \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + sharedRegisters.commons + \".xxx\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \"\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = NormalBasicMethod;",
    "import Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * NormalHeightMapMethod provides a normal map method that uses a height map to calculate the normals.\n */\nclass NormalHeightMapMethod extends NormalBasicMethod\n{\n\tprivate _worldXYRatio:number;\n\tprivate _worldXZRatio:number;\n\n\t/**\n\t * Creates a new NormalHeightMapMethod method.\n\t *\n\t * @param heightMap The texture containing the height data. 0 means low, 1 means high.\n\t * @param worldWidth The width of the 'world'. This is used to map uv coordinates' u component to scene dimensions.\n\t * @param worldHeight The height of the 'world'. This is used to map the height map values to scene dimensions.\n\t * @param worldDepth The depth of the 'world'. This is used to map uv coordinates' v component to scene dimensions.\n\t */\n\tconstructor(heightMap:TextureBase, worldWidth:number, worldHeight:number, worldDepth:number)\n\t{\n\t\tsuper();\n\n\t\tthis.normalMap = heightMap;\n\t\tthis._worldXYRatio = worldWidth/worldHeight;\n\t\tthis._worldXZRatio = worldDepth/worldHeight;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = 1/(<Single2DTexture> this.normalMap).image2D.width;\n\t\tdata[index + 1] = 1/(<Single2DTexture> this.normalMap).image2D.height;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t\tdata[index + 4] = this._worldXYRatio;\n\t\tdata[index + 5] = this._worldXZRatio;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get tangentSpace():boolean\n\t{\n\t\treturn false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t\tsuper.copyFrom(method);\n\n\t\tthis._worldXYRatio = (<NormalHeightMapMethod> method)._worldXYRatio;\n\t\tthis._worldXZRatio = (<NormalHeightMapMethod> method)._worldXZRatio;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode+= methodVO.textureVO._iGetFragmentCode(shader, targetReg, registerCache, sharedRegisters, sharedRegisters.uvVarying) +\n\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg + \".xzzz\\n\" +\n\n\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, temp) +\n\n\t\t\t\"sub \" + targetReg + \".x, \" + targetReg + \".x, \" + temp + \".x\\n\" +\n\t\t\t\"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg + \".zyzz\\n\" +\n\n\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, temp) +\n\n\t\t\t\"sub \" + targetReg + \".z, \" + targetReg + \".z, \" + temp + \".x\\n\" +\n\t\t\t\"mov \" + targetReg + \".y, \" + dataReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".xz, \" + targetReg + \".xz, \" + dataReg2 + \".xy\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \".xyz\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\n\t\treturn code;\n\t}\n}\n\nexport = NormalHeightMapMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\n\n/**\n * NormalSimpleWaterMethod provides a basic normal map method to create water ripples by translating two wave normal maps.\n */\nclass NormalSimpleWaterMethod extends NormalBasicMethod\n{\n\tprivate _secondaryNormalMap:TextureBase;\n\tprivate _water1OffsetX:number = 0;\n\tprivate _water1OffsetY:number = 0;\n\tprivate _water2OffsetX:number = 0;\n\tprivate _water2OffsetY:number = 0;\n\n\t/**\n\t * Creates a new NormalSimpleWaterMethod object.\n\t * @param waveMap1 A normal map containing one layer of a wave structure.\n\t * @param waveMap2 A normal map containing a second layer of a wave structure.\n\t */\n\tconstructor(normalMap:TextureBase = null, secondaryNormalMap:TextureBase = null)\n\t{\n\t\tsuper(normalMap);\n\n\t\tthis._secondaryNormalMap = secondaryNormalMap;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = .5;\n\t\tdata[index + 1] = 0;\n\t\tdata[index + 2] = 0;\n\t\tdata[index + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shader, methodVO);\n\t\t\n\t\tif (this._secondaryNormalMap) {\n\t\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(this._secondaryNormalMap);\n\t\t\tshader.uvDependencies++;\n\t\t}\n\t}\n\n\t/**\n\t * The translation of the first wave layer along the X-axis.\n\t */\n\tpublic get water1OffsetX():number\n\t{\n\t\treturn this._water1OffsetX;\n\t}\n\n\tpublic set water1OffsetX(value:number)\n\t{\n\t\tthis._water1OffsetX = value;\n\t}\n\n\t/**\n\t * The translation of the first wave layer along the Y-axis.\n\t */\n\tpublic get water1OffsetY():number\n\t{\n\t\treturn this._water1OffsetY;\n\t}\n\n\tpublic set water1OffsetY(value:number)\n\t{\n\t\tthis._water1OffsetY = value;\n\t}\n\n\t/**\n\t * The translation of the second wave layer along the X-axis.\n\t */\n\tpublic get water2OffsetX():number\n\t{\n\t\treturn this._water2OffsetX;\n\t}\n\n\tpublic set water2OffsetX(value:number)\n\t{\n\t\tthis._water2OffsetX = value;\n\t}\n\n\t/**\n\t * The translation of the second wave layer along the Y-axis.\n\t */\n\tpublic get water2OffsetY():number\n\t{\n\t\treturn this._water2OffsetY;\n\t}\n\n\tpublic set water2OffsetY(value:number)\n\t{\n\t\tthis._water2OffsetY = value;\n\t}\n\n\t/**\n\t * A second normal map that will be combined with the first to create a wave-like animation pattern.\n\t */\n\tpublic get secondaryNormalMap():TextureBase\n\t{\n\t\treturn this._secondaryNormalMap;\n\t}\n\n\tpublic set secondaryNormalMap(value:TextureBase)\n\t{\n\t\tif (this._secondaryNormalMap == value)\n\t\t\treturn;\n\n\t\tthis._secondaryNormalMap = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\tthis._secondaryNormalMap = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\n\t\tdata[index + 4] = this._water1OffsetX;\n\t\tdata[index + 5] = this._water1OffsetY;\n\t\tdata[index + 6] = this._water2OffsetX;\n\t\tdata[index + 7] = this._water2OffsetY;\n\n\t\tif (this._secondaryNormalMap)\n\t\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tsuper.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\n\t\tif (this._secondaryNormalMap)\n\t\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg2:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode += \"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg2 + \".xyxy\\n\";\n\n\t\tif (this.normalMap)\n\t\t\tcode += methodVO.textureVO._iGetFragmentCode(shader, targetReg, registerCache, sharedRegisters, temp);\n\n\t\tcode += \"add \" + temp + \", \" + sharedRegisters.uvVarying + \", \" + dataReg2 + \".zwzw\\n\";\n\n\t\tif (this._secondaryNormalMap)\n\t\t\tcode += methodVO.secondaryTextureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, temp);\n\n\t\tcode +=\t\"add \" + targetReg + \", \" + targetReg + \", \" + temp + \"\t\t\\n\" +\n\t\t\t\"mul \" + targetReg + \", \" + targetReg + \", \" + dataReg + \".x\t\\n\" +\n\t\t\t\"sub \" + targetReg + \".xyz, \" + targetReg + \".xyz, \" + sharedRegisters.commons + \".xxx\t\\n\" +\n\t\t\t\"nrm \" + targetReg + \".xyz, \" + targetReg + \".xyz\t\t\t\t\t\t\t\\n\";\n\n\t\treturn code;\n\t}\n}\n\nexport = NormalSimpleWaterMethod;",
    "import AssetBase\t\t\t\t\t= require(\"awayjs-core/lib/library/AssetBase\");\n\nimport Camera\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShadingMethodEvent\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\n\n\n/**\n * ShadingMethodBase provides an abstract base method for shading methods, used by compiled passes to compile\n * the final shading program.\n */\nclass ShadingMethodBase extends AssetBase\n{\n\tpublic static assetType:string = \"[asset ShadingMethod]\";\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn ShadingMethodBase.assetType;\n\t}\n\n\t/**\n\t * Create a new ShadingMethodBase object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shader:ShaderBase):boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Initializes the properties for a MethodVO, including register and texture indices.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t *\n\t * @internal\n\t */\n\tpublic iInitVO(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\n\t}\n\n\t/**\n\t * Initializes unchanging shader constants using the data from a MethodVO.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t *\n\t * @internal\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\n\n\t}\n\n\t/**\n\t * Indicates whether or not this method expects normals in tangent space. Override for object-space normals.\n\t */\n\tpublic iUsesTangentSpace():boolean\n\t{\n\t\treturn true;\n\t}\n\n\t/**\n\t * Cleans up any resources used by the current object.\n\t */\n\tpublic dispose()\n\t{\n\n\t}\n\n\t/**\n\t * Resets the compilation state of the method.\n\t *\n\t * @internal\n\t */\n\tpublic iReset()\n\t{\n\t\tthis.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Resets the method's state for compilation.\n\t *\n\t * @internal\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t}\n\n\t/**\n\t * Get the vertex shader code for this method.\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t *\n\t * @internal\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the render state for this method.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param stage The Stage object currently used for rendering.\n\t *\n\t * @internal\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\n\t}\n\n\t/**\n\t * Sets the render state for a single renderable.\n\t *\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param renderable The renderable currently being rendered.\n\t * @param stage The Stage object currently used for rendering.\n\t * @param camera The camera from which the scene is currently rendered.\n\t *\n\t * @internal\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\n\t}\n\n\t/**\n\t * Clears the render state for this method.\n\t * @param vo The MethodVO object linking this method with the pass currently being compiled.\n\t * @param stage The Stage object currently used for rendering.\n\t *\n\t * @internal\n\t */\n\tpublic iDeactivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\n\t}\n\n\t/**\n\t * Marks the shader program as invalid, so it will be recompiled before the next render.\n\t *\n\t * @internal\n\t */\n\tpublic iInvalidateShaderProgram()\n\t{\n\t\tthis.dispatchEvent(new ShadingMethodEvent(ShadingMethodEvent.SHADER_INVALIDATED));\n\t}\n\n\t/**\n\t * Copies the state from a ShadingMethodBase object into the current object.\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\t}\n}\n\nexport = ShadingMethodBase;",
    "import Event\t\t\t\t\t\t\t= require(\"awayjs-core/lib/events/Event\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport CascadeShadowMapper\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/CascadeShadowMapper\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowCascadeMethod is a shadow map method to apply cascade shadow mapping on materials.\n * Must be used with a DirectionalLight with a CascadeShadowMapper assigned to its shadowMapper property.\n *\n * @see away.lights.CascadeShadowMapper\n */\nclass ShadowCascadeMethod extends ShadowMapMethodBase\n{\n\tprivate _baseMethod:ShadowMethodBase;\n\tprivate _cascadeShadowMapper:CascadeShadowMapper;\n\tprivate _depthMapCoordVaryings:Array<ShaderRegisterElement>;\n\tprivate _cascadeProjections:Array<ShaderRegisterElement>;\n\n\t/**\n\t * Creates a new ShadowCascadeMethod object.\n\t *\n\t * @param shadowMethodBase The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)\n\t */\n\tconstructor(shadowMethodBase:ShadowMethodBase)\n\t{\n\t\tsuper(shadowMethodBase.castingLight);\n\n\t\tthis._baseMethod = shadowMethodBase;\n\t\tif (!(this._pCastingLight instanceof DirectionalLight))\n\t\t\tthrow new Error(\"ShadowCascadeMethod is only compatible with DirectionalLight\");\n\n\t\tthis._cascadeShadowMapper = <CascadeShadowMapper> this._pCastingLight.shadowMapper;\n\n\t\tif (!this._cascadeShadowMapper)\n\t\t\tthrow new Error(\"ShadowCascadeMethod requires a light that has a CascadeShadowMapper instance assigned to shadowMapper.\");\n\n\t\tthis._cascadeShadowMapper.addEventListener(Event.CHANGE, (event:Event) => this.onCascadeChange(event));\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\t}\n\n\t/**\n\t * The shadow map sampling method used to sample individual cascades. These are typically those used in conjunction\n\t * with a DirectionalShadowMapper.\n\t *\n\t * @see ShadowHardMethod\n\t * @see ShadowSoftMethod\n\t */\n\tpublic get baseMethod():ShadowMethodBase\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:ShadowMethodBase)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, (event:ShadingMethodEvent) => this.onShaderInvalidated(event));\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tvar tempVO:MethodVO = new MethodVO(this._baseMethod);\n\t\tthis._baseMethod.iInitVO(shader, tempVO);\n\n\t\tmethodVO.needsGlobalVertexPos = true;\n\t\tmethodVO.needsProjection = true;\n\n\t\tmethodVO.textureVO = shader.getTextureVO(this._pCastingLight.shadowMapper.depthMap);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar vertexData:Float32Array = shader.vertexConstantData;\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index] = 1.0;\n\t\tfragmentData[index + 1] = 1/255.0;\n\t\tfragmentData[index + 2] = 1/65025.0;\n\t\tfragmentData[index + 3] = 1/16581375.0;\n\n\t\tfragmentData[index + 6] = .5;\n\t\tfragmentData[index + 7] = -.5;\n\n\t\tindex = methodVO.vertexConstantsIndex;\n\t\tvertexData[index] = .5;\n\t\tvertexData[index + 1] = -.5;\n\t\tvertexData[index + 2] = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._cascadeProjections = null;\n\t\tthis._depthMapCoordVaryings = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeVertexConstant();\n\n\t\tthis.initProjectionsRegs(registerCache);\n\t\tmethodVO.vertexConstantsIndex = dataReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeVertexVectorTemp();\n\n\t\tfor (var i:number = 0; i < this._cascadeShadowMapper.numCascades; ++i) {\n\t\t\tcode += \"m44 \" + temp + \", \" + sharedRegisters.globalPositionVertex + \", \" + this._cascadeProjections[i] + \"\\n\" +\n\t\t\t\t\"add \" + this._depthMapCoordVaryings[i] + \", \" + temp + \", \" + dataReg + \".zzwz\\n\";\n\t\t}\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Creates the registers for the cascades' projection coordinates.\n\t */\n\tprivate initProjectionsRegs(registerCache:ShaderRegisterCache)\n\t{\n\t\tthis._cascadeProjections = new Array<ShaderRegisterElement>(this._cascadeShadowMapper.numCascades);\n\t\tthis._depthMapCoordVaryings = new Array<ShaderRegisterElement>(this._cascadeShadowMapper.numCascades);\n\n\t\tfor (var i:number = 0; i < this._cascadeShadowMapper.numCascades; ++i) {\n\t\t\tthis._depthMapCoordVaryings[i] = registerCache.getFreeVarying();\n\t\t\tthis._cascadeProjections[i] = registerCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t\tregisterCache.getFreeVertexConstant();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar numCascades:number = this._cascadeShadowMapper.numCascades;\n\t\tvar decReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar planeDistanceReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar planeDistances:Array<string> = Array<string>( planeDistanceReg + \".x\", planeDistanceReg + \".y\", planeDistanceReg + \".z\", planeDistanceReg + \".w\" );\n\t\tvar code:string;\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tvar inQuad:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(inQuad, 1);\n\t\tvar uvCoord:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(uvCoord, 1);\n\n\t\t// assume lowest partition is selected, will be overwritten later otherwise\n\t\tcode = \"mov \" + uvCoord + \", \" + this._depthMapCoordVaryings[numCascades - 1] + \"\\n\";\n\n\t\tfor (var i:number = numCascades - 2; i >= 0; --i) {\n\t\t\tvar uvProjection:ShaderRegisterElement = this._depthMapCoordVaryings[i];\n\n\t\t\t// calculate if in texturemap (result == 0 or 1, only 1 for a single partition)\n\t\t\tcode += \"slt \" + inQuad + \".z, \" + sharedRegisters.projectionFragment + \".z, \" + planeDistances[i] + \"\\n\"; // z = x > minX, w = y > minY\n\n\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t\t// linearly interpolate between old and new uv coords using predicate value == conditional toggle to new value if predicate == 1 (true)\n\t\t\tcode += \"sub \" + temp + \", \" + uvProjection + \", \" + uvCoord + \"\\n\" +\n\t\t\t\t\"mul \" + temp + \", \" + temp + \", \" + inQuad + \".z\\n\" +\n\t\t\t\t\"add \" + uvCoord + \", \" + uvCoord + \", \" + temp + \"\\n\";\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(inQuad);\n\n\t\tcode += \"div \" + uvCoord + \", \" + uvCoord + \", \" + uvCoord + \".w\\n\" +\n\t\t\t\"mul \" + uvCoord + \".xy, \" + uvCoord + \".xy, \" + dataReg + \".zw\\n\" +\n\t\t\t\"add \" + uvCoord + \".xy, \" + uvCoord + \".xy, \" + dataReg + \".zz\\n\";\n\n\t\tcode += this._baseMethod._iGetCascadeFragmentCode(shader, methodVO, decReg, uvCoord, targetReg, registerCache, sharedRegisters) +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + dataReg + \".y\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(uvCoord);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tmethodVO.textureVO.activate(shader);\n\n\t\tvar vertexData:Float32Array = shader.vertexConstantData;\n\t\tvar vertexIndex:number = methodVO.vertexConstantsIndex;\n\n\t\tshader.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1/(this._cascadeShadowMapper.depth*this._pEpsilon);\n\n\t\tvar numCascades:number = this._cascadeShadowMapper.numCascades;\n\t\tvertexIndex += 4;\n\t\tfor (var k:number = 0; k < numCascades; ++k) {\n\t\t\tthis._cascadeShadowMapper.getDepthProjections(k).copyRawDataTo(vertexData, vertexIndex, true);\n\t\t\tvertexIndex += 16;\n\t\t}\n\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar fragmentIndex:number = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[fragmentIndex + 5] = 1 - this._pAlpha;\n\n\t\tvar nearPlaneDistances:Array<number> = this._cascadeShadowMapper._iNearPlaneDistances;\n\n\t\tfragmentIndex += 8;\n\t\tfor (var i:number = 0; i < numCascades; ++i)\n\t\t\tfragmentData[fragmentIndex + i] = nearPlaneDistances[i];\n\n\t\tthis._baseMethod.iActivateForCascade(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t}\n\n\t/**\n\t * Called when the shadow mappers cascade configuration changes.\n\t */\n\tprivate onCascadeChange(event:Event)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = ShadowCascadeMethod;",
    "import BitmapImage2D\t\t\t\t\t= require(\"awayjs-core/lib/data/BitmapImage2D\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowDitheredMethod provides a soft shadowing technique by randomly distributing sample points differently for each fragment.\n */\nclass ShadowDitheredMethod extends ShadowMethodBase\n{\n\tprivate static _grainTexture:Single2DTexture;\n\tprivate static _grainUsages:number /*int*/;\n\tprivate static _grainBitmapImage2D:BitmapImage2D;\n\tprivate _depthMapSize:number /*int*/;\n\tprivate _range:number;\n\tprivate _numSamples:number /*int*/;\n\n\t/**\n\t * Creates a new ShadowDitheredMethod object.\n\t * @param castingLight The light casting the shadows\n\t * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 24.\n\t */\n\tconstructor(castingLight:DirectionalLight, numSamples:number /*int*/ = 4, range:number = 1)\n\t{\n\t\tsuper(castingLight);\n\n\t\tthis._depthMapSize = this._pCastingLight.shadowMapper.depthMapSize;\n\n\t\tthis.numSamples = numSamples;\n\t\tthis.range = range;\n\n\t\t++ShadowDitheredMethod._grainUsages;\n\n\t\tif (!ShadowDitheredMethod._grainTexture)\n\t\t\tthis.initGrainTexture();\n\t}\n\n\t/**\n\t * The amount of samples to take for dithering. Minimum 1, maximum 24. The actual maximum may depend on the\n\t * complexity of the shader.\n\t */\n\tpublic get numSamples():number /*int*/\n\t{\n\t\treturn this._numSamples;\n\t}\n\n\tpublic set numSamples(value:number /*int*/)\n\t{\n\t\tif (value < 1)\n\t\t\tvalue = 1;\n\t\telse if (value > 24)\n\t\t\tvalue = 24;\n\n\t\tif (this._numSamples == value)\n\t\t\treturn;\n\n\t\tthis._numSamples = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitVO(shader, methodVO);\n\n\t\tmethodVO.needsProjection = true;\n\n\t\tmethodVO.secondaryTextureVO = shader.getTextureVO(ShadowDitheredMethod._grainTexture);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shader, methodVO);\n\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index + 8] = 1/this._numSamples;\n\t}\n\n\t/**\n\t * The range in the shadow map in which to distribute the samples.\n\t */\n\tpublic get range():number\n\t{\n\t\treturn this._range*2;\n\t}\n\n\tpublic set range(value:number)\n\t{\n\t\tthis._range = value/2;\n\t}\n\n\t/**\n\t * Creates a texture containing the dithering noise texture.\n\t */\n\tprivate initGrainTexture()\n\t{\n\t\tShadowDitheredMethod._grainBitmapImage2D = new BitmapImage2D(64, 64, false);\n\t\tvar vec:Array<number> /*uint*/ = new Array<number>();\n\t\tvar len:number /*uint*/ = 4096;\n\t\tvar step:number = 1/(this._depthMapSize*this._range);\n\t\tvar r:number, g:number;\n\n\t\tfor (var i:number /*uint*/ = 0; i < len; ++i) {\n\t\t\tr = 2*(Math.random() - .5);\n\t\t\tg = 2*(Math.random() - .5);\n\t\t\tif (r < 0)\n\t\t\t\tr -= step; else\n\t\t\t\tr += step;\n\t\t\tif (g < 0)\n\t\t\t\tg -= step; else\n\t\t\t\tg += step;\n\t\t\tif (r > 1)\n\t\t\t\tr = 1; else if (r < -1)\n\t\t\t\tr = -1;\n\t\t\tif (g > 1)\n\t\t\t\tg = 1; else if (g < -1)\n\t\t\t\tg = -1;\n\t\t\tvec[i] = (Math.floor((r*.5 + .5)*0xff) << 16) | (Math.floor((g*.5 + .5)*0xff) << 8);\n\t\t}\n\n\t\tShadowDitheredMethod._grainBitmapImage2D.setArray(ShadowDitheredMethod._grainBitmapImage2D.rect, vec);\n\t\tShadowDitheredMethod._grainTexture = new Single2DTexture(ShadowDitheredMethod._grainBitmapImage2D);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (--ShadowDitheredMethod._grainUsages == 0) {\n\t\t\tShadowDitheredMethod._grainTexture.dispose();\n\t\t\tShadowDitheredMethod._grainBitmapImage2D.dispose();\n\t\t\tShadowDitheredMethod._grainTexture = null;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.fragmentConstantsIndex;\n\t\tdata[index + 9] = (stage.width - 1)/63;\n\t\tdata[index + 10] = (stage.height - 1)/63;\n\t\tdata[index + 11] = 2*this._range/this._depthMapSize;\n\n\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tsuper.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\n\t\tmethodVO.secondaryTextureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\treturn this.getSampleCode(shader, methodVO, customDataReg, decReg, targetReg, regCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Get the actual shader code for shadow mapping\n\t * @param regCache The register cache managing the registers.\n\t * @param depthMapRegister The texture register containing the depth map.\n\t * @param decReg The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the shadow coverage.\n\t */\n\tprivate getSampleCode(shader:ShaderBase, methodVO:MethodVO, customDataReg:ShaderRegisterElement, decReg:ShaderRegisterElement, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar numSamples:number /*int*/ = this._numSamples;\n\t\tvar uvReg:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(temp, 1);\n\n\t\tvar projectionReg:ShaderRegisterElement = sharedRegisters.projectionFragment;\n\n\t\tcode += \"div \" + uvReg + \", \" + projectionReg + \", \" + projectionReg + \".w\\n\" +\n\t\t\t\"mul \" + uvReg + \".xy, \" + uvReg + \".xy, \" + customDataReg + \".yz\\n\";\n\n\t\twhile (numSamples > 0) {\n\t\t\tif (numSamples == this._numSamples) {\n\t\t\t\tcode += methodVO.secondaryTextureVO._iGetFragmentCode(shader, uvReg, regCache, sharedRegisters, uvReg);\n\t\t\t} else {\n\t\t\t\tcode += \"mov \" + temp + \", \" + uvReg + \".zwxy \\n\" +\n\t\t\t\t\tmethodVO.secondaryTextureVO._iGetFragmentCode(shader, uvReg, regCache, sharedRegisters, temp);\n\t\t\t}\n\n\t\t\t// keep grain in uvReg.zw\n\t\t\tcode += \"sub \" + uvReg + \".zw, \" + uvReg + \".xy, fc0.xx\\n\" + // uv-.5\n\t\t\t\t\"mul \" + uvReg + \".zw, \" + uvReg + \".zw, \" + customDataReg + \".w\\n\"; // (tex unpack scale and tex scale in one)\n\n\t\t\tif (numSamples == this._numSamples) {\n\t\t\t\t// first sample\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".zw, \" + this._pDepthMapCoordReg + \".xy\\n\" +\n\t\t\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, regCache, sharedRegisters, uvReg) +\n\t\t\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\t\t\"slt \" + targetReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\"; // 0 if in shadow\n\t\t\t} else {\n\t\t\t\tcode += this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\t\t\t}\n\n\t\t\tif (numSamples > 4)\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\n\t\t\tif (numSamples > 1)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\n\t\t\tif (numSamples > 5)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".zw\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\n\t\t\tif (numSamples > 2) {\n\t\t\t\tcode += \"neg \" + uvReg + \".w, \" + uvReg + \".w\\n\"; // will be rotated 90 degrees when being accessed as wz\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".wz, \" + this._pDepthMapCoordReg + \".xy\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\t\t\t}\n\n\t\t\tif (numSamples > 6)\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\n\t\t\tif (numSamples > 3)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\n\t\t\tif (numSamples > 7)\n\t\t\t\tcode += \"sub \" + uvReg + \".xy, \" + uvReg + \".xy, \" + uvReg + \".wz\\n\" + this.addSample(shader, methodVO, uvReg, decReg, targetReg, regCache, sharedRegisters);\n\n\t\t\tnumSamples -= 8;\n\t\t}\n\n\t\tregCache.removeFragmentTempUsage(temp);\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\t\tcode += \"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + customDataReg + \".x\\n\"; // average\n\t\treturn code;\n\t}\n\n\t/**\n\t * Adds the code for another tap to the shader code.\n\t * @param uvReg The uv register for the tap.\n\t * @param depthMapRegister The texture register containing the depth map.\n\t * @param decReg The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the tap comparison result.\n\t * @param regCache The register cache managing the registers.\n\t * @return\n\t */\n\tprivate addSample(shader:ShaderBase, methodVO:MethodVO, uvReg:ShaderRegisterElement, decReg:ShaderRegisterElement, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\treturn methodVO.textureVO._iGetFragmentCode(shader, temp, regCache, sharedRegisters, uvReg) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + temp + \".z, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\" + // 0 if in shadow\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + temp + \".z\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tdata[index] = 1/this._numSamples;\n\t\tdata[index + 1] = (stage.width - 1)/63;\n\t\tdata[index + 2] = (stage.height - 1)/63;\n\t\tdata[index + 3] = 2*this._range/this._depthMapSize;\n\n\t\tmethodVO.secondaryTextureVO.activate(shader);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pDepthMapCoordReg = depthProjection;\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn this.getSampleCode(shader, methodVO, dataReg, decodeRegister, targetRegister, registerCache, sharedRegisters);\n\t}\n}\n\nexport = ShadowDitheredMethod;",
    "import DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowFilteredMethod provides a softened shadowing technique by bilinearly interpolating shadow comparison\n * results of neighbouring pixels.\n */\nclass ShadowFilteredMethod extends ShadowMethodBase\n{\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t *\n\t * @param castingLight The light casting the shadow\n\t */\n\tconstructor(castingLight:DirectionalLight)\n\t{\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shader, methodVO);\n\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index + 8] = .5;\n\t\tvar size:number /*int*/ = this.castingLight.shadowMapper.depthMapSize;\n\t\tfragmentData[index + 9] = size;\n\t\tfragmentData[index + 10] = 1/size;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tregCache.getFreeFragmentConstant();\n\t\tvar customDataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tvar depthCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(depthCol, 1);\n\t\tvar uvReg:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tcode += \"mov \" + uvReg + \", \" + this._pDepthMapCoordReg + \"\\n\" +\n\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, depthCol, regCache, sharedRegisters, this._pDepthMapCoordReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"add \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".z\\n\" + \t// (1, 0)\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, depthCol, regCache, sharedRegisters, uvReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".y\\n\" +\n\t\t\t\"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" +\n\t\t\t\"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + uvReg + \".z\\n\" +\n\t\t\t\"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + uvReg + \".z, \" + uvReg + \".w\\n\" +\n\n\t\t\t\"mov \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x\\n\" +\n\t\t\t\"add \" + uvReg + \".y, \" + this._pDepthMapCoordReg + \".y, \" + customDataReg + \".z\\n\" +\t// (0, 1)\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, depthCol, regCache, sharedRegisters, uvReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t\"add \" + uvReg + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".z\\n\" +\t// (1, 1)\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, depthCol, regCache, sharedRegisters, uvReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\" +   // 0 if in shadow\n\n\t\t\t// recalculate fraction, since we ran out of registers :(\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".x, \" + customDataReg + \".y\\n\" +\n\t\t\t\"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" + \"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + uvReg + \".z\\n\" +\n\t\t\t\"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" +\n\t\t\t\"add \" + uvReg + \".w, \" + uvReg + \".z, \" + uvReg + \".w\\n\" +\n\n\t\t\t\"mul \" + depthCol + \".x, \" + this._pDepthMapCoordReg + \".y, \" + customDataReg + \".y\\n\" +\n\t\t\t\"frc \" + depthCol + \".x, \" + depthCol + \".x\\n\" +\n\t\t\t\"sub \" + uvReg + \".w, \" + uvReg + \".w, \" + targetReg + \".w\\n\" +\n\t\t\t\"mul \" + uvReg + \".w, \" + uvReg + \".w, \" + depthCol + \".x\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + targetReg + \".w, \" + uvReg + \".w\\n\";\n\n\t\tregCache.removeFragmentTempUsage(depthCol);\n\t\tregCache.removeFragmentTempUsage(uvReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar size:number /*int*/ = this.castingLight.shadowMapper.depthMapSize;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = size;\n\t\tdata[index + 1] = 1/size;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(temp, 1);\n\t\tvar predicate:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(predicate, 1);\n\n\t\tcode = methodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".x, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"add \" + depthProjection + \".x, \" + depthProjection + \".x, \" + dataReg + \".y\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".z, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"add \" + depthProjection + \".y, \" + depthProjection + \".y, \" + dataReg + \".y\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".w, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"sub \" + depthProjection + \".x, \" + depthProjection + \".x, \" + dataReg + \".y\\n\" +\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + predicate + \".y, \" + depthProjection + \".z, \" + temp + \".z\\n\" +\n\n\t\t\t\"mul \" + temp + \".xy, \" + depthProjection + \".xy, \" + dataReg + \".x\\n\" +\n\t\t\t\"frc \" + temp + \".xy, \" + temp + \".xy\\n\" +\n\n\t\t\t// some strange register juggling to prevent agal bugging out\n\t\t\t\"sub \" + depthProjection + \", \" + predicate + \".xyzw, \" + predicate + \".zwxy\\n\" +\n\t\t\t\"mul \" + depthProjection + \", \" + depthProjection + \", \" + temp + \".x\\n\" +\n\n\t\t\t\"add \" + predicate + \".xy, \" + predicate + \".xy, \" + depthProjection + \".zw\\n\" +\n\n\t\t\t\"sub \" + predicate + \".y, \" + predicate + \".y, \" + predicate + \".x\\n\" +\n\t\t\t\"mul \" + predicate + \".y, \" + predicate + \".y, \" + temp + \".y\\n\" +\n\t\t\t\"add \" + targetRegister + \".w, \" + predicate + \".x, \" + predicate + \".y\\n\";\n\n\t\tregisterCache.removeFragmentTempUsage(temp);\n\t\tregisterCache.removeFragmentTempUsage(predicate);\n\t\treturn code;\n\t}\n}\n\nexport = ShadowFilteredMethod;",
    "import LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowHardMethod provides the cheapest shadow map method by using a single tap without any filtering.\n */\nclass ShadowHardMethod extends ShadowMethodBase\n{\n\t/**\n\t * Creates a new ShadowHardMethod object.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tregCache.getFreeFragmentConstant();\n\n\t\tvar depthCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tcode += methodVO.textureVO._iGetFragmentCode(shader, depthCol, regCache, sharedRegisters, this._pDepthMapCoordReg) +\n\t\t\t\"dp4 \" + depthCol + \".z, \" + depthCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"slt \" + targetReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + depthCol + \".z\\n\"; // 0 if in shadow\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPointFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar epsReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar posReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tvar depthSampleCol:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(depthSampleCol, 1);\n\t\tvar lightDir:ShaderRegisterElement = regCache.getFreeFragmentVectorTemp();\n\t\tregCache.addFragmentTempUsages(lightDir, 1);\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\tcode += \"sub \" + lightDir + \", \" + sharedRegisters.globalPositionVarying + \", \" + posReg + \"\\n\" +\n\t\t\t\"dp3 \" + lightDir + \".w, \" + lightDir + \".xyz, \" + lightDir + \".xyz\\n\" +\n\t\t\t\"mul \" + lightDir + \".w, \" + lightDir + \".w, \" + posReg + \".w\\n\" +\n\t\t\t\"nrm \" + lightDir + \".xyz, \" + lightDir + \".xyz\\n\" +\n\n\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, depthSampleCol, regCache, sharedRegisters, lightDir) +\n\t\t\t\"dp4 \" + depthSampleCol + \".z, \" + depthSampleCol + \", \" + decReg + \"\\n\" +\n\t\t\t\"add \" + targetReg + \".w, \" + lightDir + \".w, \" + epsReg + \".x\\n\" +    // offset by epsilon\n\n\t\t\t\"slt \" + targetReg + \".w, \" + targetReg + \".w, \" + depthSampleCol + \".z\\n\"; // 0 if in shadow\n\n\t\tregCache.removeFragmentTempUsage(lightDir);\n\t\tregCache.removeFragmentTempUsage(depthSampleCol);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\treturn methodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, depthProjection) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + targetRegister + \".w, \" + depthProjection + \".z, \" + temp + \".z\\n\"; // 0 if in shadow\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t}\n}\n\nexport = ShadowHardMethod;",
    "import IAsset\t\t\t\t\t\t\t= require(\"awayjs-core/lib/library/IAsset\");\n\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport ShadowMapperBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/ShadowMapperBase\");\n\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * ShadowMapMethodBase provides an abstract base method for shadow map methods.\n */\nclass ShadowMapMethodBase extends ShadingMethodBase implements IAsset\n{\n\tpublic static assetType:string = \"[asset ShadowMapMethod]\";\n\n\tpublic _pCastingLight:LightBase;\n\tpublic _pShadowMapper:ShadowMapperBase;\n\n\tpublic _pEpsilon:number = .02;\n\tpublic _pAlpha:number = 1;\n\n\t/**\n\t * Creates a new ShadowMapMethodBase object.\n\t * @param castingLight The light used to cast shadows.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tsuper();\n\t\tthis._pCastingLight = castingLight;\n\t\tcastingLight.castsShadows = true;\n\t\tthis._pShadowMapper = castingLight.shadowMapper;\n\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get assetType():string\n\t{\n\t\treturn ShadowMapMethodBase.assetType;\n\t}\n\n\t/**\n\t * The \"transparency\" of the shadows. This allows making shadows less strong.\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._pAlpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._pAlpha = value;\n\t}\n\n\t/**\n\t * The light casting the shadows.\n\t */\n\tpublic get castingLight():LightBase\n\t{\n\t\treturn this._pCastingLight;\n\t}\n\n\t/**\n\t * A small value to counter floating point precision errors when comparing values in the shadow map with the\n\t * calculated depth value. Increase this if shadow banding occurs, decrease it if the shadow seems to be too detached.\n\t */\n\tpublic get epsilon():number\n\t{\n\t\treturn this._pEpsilon;\n\t}\n\n\tpublic set epsilon(value:number)\n\t{\n\t\tthis._pEpsilon = value;\n\t}\n}\n\nexport = ShadowMapMethodBase;",
    "import Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\nimport PointLight\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/PointLight\");\nimport DirectionalShadowMapper\t\t\t= require(\"awayjs-display/lib/materials/shadowmappers/DirectionalShadowMapper\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\n\n/**\n * ShadowMethodBase provides an abstract method for simple (non-wrapping) shadow map methods.\n */\nclass ShadowMethodBase extends ShadowMapMethodBase\n{\n\tpublic _pDepthMapCoordReg:ShaderRegisterElement;\n\tpublic _pUsePoint:boolean;\n\n\t/**\n\t * Creates a new ShadowMethodBase object.\n\t * @param castingLight The light used to cast shadows.\n\t */\n\tconstructor(castingLight:LightBase)\n\t{\n\t\tthis._pUsePoint = (castingLight instanceof PointLight);\n\n\t\tsuper(castingLight);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsView = true;\n\t\tmethodVO.needsGlobalVertexPos = true;\n\t\tmethodVO.needsGlobalFragmentPos = this._pUsePoint;\n\t\tmethodVO.needsNormals = shader.numLights > 0;\n\n\t\tmethodVO.textureVO = shader.getTextureVO(this._pCastingLight.shadowMapper.depthMap);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar vertexData:Float32Array = shader.vertexConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\t\tfragmentData[index] = 1.0;\n\t\tfragmentData[index + 1] = 1/255.0;\n\t\tfragmentData[index + 2] = 1/65025.0;\n\t\tfragmentData[index + 3] = 1/16581375.0;\n\n\t\tfragmentData[index + 6] = 0;\n\t\tfragmentData[index + 7] = 1;\n\n\t\tif (this._pUsePoint) {\n\t\t\tfragmentData[index + 8] = 0;\n\t\t\tfragmentData[index + 9] = 0;\n\t\t\tfragmentData[index + 10] = 0;\n\t\t\tfragmentData[index + 11] = 1;\n\t\t}\n\n\t\tindex = methodVO.vertexConstantsIndex;\n\t\tif (index != -1) {\n\t\t\tvertexData[index] = .5;\n\t\t\tvertexData[index + 1] = .5;\n\t\t\tvertexData[index + 2] = 0.0;\n\t\t\tvertexData[index + 3] = 1.0;\n\t\t}\n\t}\n\n\t/**\n\t * Wrappers that override the vertex shader need to set this explicitly\n\t */\n\tpublic get _iDepthMapCoordReg():ShaderRegisterElement\n\t{\n\t\treturn this._pDepthMapCoordReg;\n\t}\n\n\tpublic set _iDepthMapCoordReg(value:ShaderRegisterElement)\n\t{\n\t\tthis._pDepthMapCoordReg = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\n\t\tthis._pDepthMapCoordReg = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._pUsePoint? this._pGetPointVertexCode(methodVO, regCache, sharedRegisters):this.pGetPlanarVertexCode(methodVO, regCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Gets the vertex code for shadow mapping with a point light.\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic _pGetPointVertexCode(methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tmethodVO.vertexConstantsIndex = -1;\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Gets the vertex code for shadow mapping with a planar shadow map (fe: directional lights).\n\t *\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t */\n\tpublic pGetPlanarVertexCode(methodVO:MethodVO, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar temp:ShaderRegisterElement = regCache.getFreeVertexVectorTemp();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeVertexConstant();\n\t\tvar depthMapProj:ShaderRegisterElement = regCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tregCache.getFreeVertexConstant();\n\t\tthis._pDepthMapCoordReg = regCache.getFreeVarying();\n\t\tmethodVO.vertexConstantsIndex = dataReg.index*4;\n\n\t\t// todo: can epsilon be applied here instead of fragment shader?\n\n\t\tcode += \"m44 \" + temp + \", \" + sharedRegisters.globalPositionVertex + \", \" + depthMapProj + \"\\n\" +\n\t\t\t\"div \" + temp + \", \" + temp + \", \" + temp + \".w\\n\" +\n\t\t\t\"mul \" + temp + \".xy, \" + temp + \".xy, \" + dataReg + \".xy\\n\" +\n\t\t\t\"add \" + this._pDepthMapCoordReg + \", \" + temp + \", \" + dataReg + \".xxwz\\n\";\n\t\t//\"sub \" + this._pDepthMapCoordReg + \".z, \" + this._pDepthMapCoordReg + \".z, \" + this._pDepthMapCoordReg + \".w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._pUsePoint? this._pGetPointFragmentCode(shader, methodVO, targetReg, registerCache, sharedRegisters) : this._pGetPlanarFragmentCode(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\t\tcode += \"add \" + targetReg + \".w, \" + targetReg + \".w, fc\" + (methodVO.fragmentConstantsIndex/4 + 1) + \".y\\n\" +\n\t\t\t\"sat \" + targetReg + \".w, \" + targetReg + \".w\\n\";\n\t\treturn code;\n\t}\n\n\t/**\n\t * Gets the fragment code for shadow mapping with a planar shadow map.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _pGetPlanarFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Gets the fragment code for shadow mapping with a point light.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param targetReg The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _pGetPointFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new AbstractMethodError();\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (!this._pUsePoint)\n\t\t\t(<DirectionalShadowMapper> this._pShadowMapper).iDepthProjection.copyRawDataTo(shader.vertexConstantData, methodVO.vertexConstantsIndex + 4, true);\n\n\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * Gets the fragment code for combining this method with a cascaded shadow map method.\n\t * @param methodVO The MethodVO object linking this method with the pass currently being compiled.\n\t * @param regCache The register cache used during the compilation.\n\t * @param decodeRegister The register containing the data to decode the shadow map depth value.\n\t * @param depthTexture The texture containing the shadow map.\n\t * @param depthProjection The projection of the fragment relative to the light.\n\t * @param targetRegister The register to contain the shadow coverage\n\t * @return\n\t */\n\tpublic _iGetCascadeFragmentCode(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthrow new Error(\"This shadow method is incompatible with cascade shadows\");\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.fragmentConstantsIndex;\n\n\t\tif (this._pUsePoint)\n\t\t\tfragmentData[index + 4] = -Math.pow(1/((<PointLight> this._pCastingLight).fallOff*this._pEpsilon), 2);\n\t\telse\n\t\t\tshader.vertexConstantData[methodVO.vertexConstantsIndex + 3] = -1/((<DirectionalShadowMapper> this._pShadowMapper).depth*this._pEpsilon);\n\n\t\tfragmentData[index + 5] = 1 - this._pAlpha;\n\n\t\tif (this._pUsePoint) {\n\t\t\tvar pos:Vector3D = this._pCastingLight.scenePosition;\n\t\t\tfragmentData[index + 8] = pos.x;\n\t\t\tfragmentData[index + 9] = pos.y;\n\t\t\tfragmentData[index + 10] = pos.z;\n\t\t\t// used to decompress distance\n\t\t\tvar f:number = (<PointLight> this._pCastingLight).fallOff;\n\t\t\tfragmentData[index + 11] = 1/(2*f*f);\n\t\t}\n\n\t\tmethodVO.textureVO.activate(shader);\n\t}\n\n\t/**\n\t * Sets the method state for cascade shadow mapping.\n\t */\n\tpublic iActivateForCascade(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthrow new Error(\"This shadow method is incompatible with cascade shadows\");\n\t}\n}\n\nexport = ShadowMethodBase;",
    "import NearDirectionalShadowMapper\t\t= require(\"awayjs-display/lib/materials/shadowmappers/NearDirectionalShadowMapper\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n// TODO: shadow mappers references in materials should be an interface so that this class should NOT extend ShadowMapMethodBase just for some delegation work\n/**\n * ShadowNearMethod provides a shadow map method that restricts the shadowed area near the camera to optimize\n * shadow map usage. This method needs to be used in conjunction with a NearDirectionalShadowMapper.\n *\n * @see away.lights.NearDirectionalShadowMapper\n */\nclass ShadowNearMethod extends ShadowMethodBase\n{\n\tprivate _baseMethod:ShadowMethodBase;\n\n\tprivate _fadeRatio:number;\n\tprivate _nearShadowMapper:NearDirectionalShadowMapper;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new ShadowNearMethod object.\n\t * @param baseMethod The shadow map sampling method used to sample individual cascades (fe: ShadowHardMethod, ShadowSoftMethod)\n\t * @param fadeRatio The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.\n\t */\n\tconstructor(baseMethod:ShadowMethodBase, fadeRatio:number = .1)\n\t{\n\t\tsuper(baseMethod.castingLight);\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis._baseMethod = baseMethod;\n\t\tthis._fadeRatio = fadeRatio;\n\t\tthis._nearShadowMapper = <NearDirectionalShadowMapper> this._pCastingLight.shadowMapper;\n\t\tif (!this._nearShadowMapper)\n\t\t\tthrow new Error(\"ShadowNearMethod requires a light that has a NearDirectionalShadowMapper instance assigned to shadowMapper.\");\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * The base shadow map method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():ShadowMethodBase\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:ShadowMethodBase)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shader, methodVO);\n\t\tthis._baseMethod.iInitConstants(shader, methodVO);\n\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index + 2] = 0;\n\t\tfragmentData[index + 3] = 1;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitVO(shader, methodVO);\n\n\t\tmethodVO.needsProjection = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get alpha():number\n\t{\n\t\treturn this._baseMethod.alpha;\n\t}\n\n\tpublic set alpha(value:number)\n\t{\n\t\tthis._baseMethod.alpha = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get epsilon():number\n\t{\n\t\treturn this._baseMethod.epsilon;\n\t}\n\n\tpublic set epsilon(value:number)\n\t{\n\t\tthis._baseMethod.epsilon = value;\n\t}\n\n\t/**\n\t * The amount of shadow fading to the outer shadow area. A value of 1 would mean the shadows start fading from the camera's near plane.\n\t */\n\tpublic get fadeRatio():number\n\t{\n\t\treturn this._fadeRatio;\n\t}\n\n\tpublic set fadeRatio(value:number)\n\t{\n\t\tthis._fadeRatio = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._baseMethod.iGetFragmentCode(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentSingleTemp();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\tcode += \"abs \" + temp + \", \" + sharedRegisters.projectionFragment + \".w\\n\" +\n\t\t\t\"sub \" + temp + \", \" + temp + \", \" + dataReg + \".x\\n\" +\n\t\t\t\"mul \" + temp + \", \" + temp + \", \" + dataReg + \".y\\n\" +\n\t\t\t\"sat \" + temp + \", \" + temp + \"\\n\" +\n\t\t\t\"sub \" + temp + \", \" + dataReg + \".w,\" + temp + \"\\n\" +\n\t\t\t\"sub \" + targetReg + \".w, \" + dataReg + \".w,\" + targetReg + \".w\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + temp + \"\\n\" +\n\t\t\t\"sub \" + targetReg + \".w, \" + dataReg + \".w,\" + targetReg + \".w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iActivate(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iDeactivate(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:ShaderBase, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\t// todo: move this to activate (needs camera)\n\t\tvar near:number = camera.projection.near;\n\t\tvar d:number = camera.projection.far - near;\n\t\tvar maxDistance:number = this._nearShadowMapper.coverageRatio;\n\t\tvar minDistance:number = maxDistance*(1 - this._fadeRatio);\n\n\t\tmaxDistance = near + maxDistance*d;\n\t\tminDistance = near + minDistance*d;\n\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index] = minDistance;\n\t\tfragmentData[index + 1] = 1/(maxDistance - minDistance);\n\n\t\tthis._baseMethod.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetVertexCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis._baseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._baseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = ShadowNearMethod;",
    "import PoissonLookup\t\t\t\t\t= require(\"awayjs-core/lib/geom/PoissonLookup\");\n\nimport DirectionalLight\t\t\t\t\t= require(\"awayjs-display/lib/entities/DirectionalLight\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport ShadowMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMethodBase\");\n\n/**\n * ShadowSoftMethod provides a soft shadowing technique by randomly distributing sample points.\n */\nclass ShadowSoftMethod extends ShadowMethodBase\n{\n\tprivate _range:number = 1;\n\tprivate _numSamples:number /*int*/;\n\tprivate _offsets:Array<number>;\n\n\t/**\n\t * Creates a new DiffuseBasicMethod object.\n\t *\n\t * @param castingLight The light casting the shadows\n\t * @param numSamples The amount of samples to take for dithering. Minimum 1, maximum 32.\n\t */\n\tconstructor(castingLight:DirectionalLight, numSamples:number /*int*/ = 5, range:number = 1)\n\t{\n\t\tsuper(castingLight);\n\n\t\tthis.numSamples = numSamples;\n\t\tthis.range = range;\n\t}\n\n\t/**\n\t * The amount of samples to take for dithering. Minimum 1, maximum 32. The actual maximum may depend on the\n\t * complexity of the shader.\n\t */\n\tpublic get numSamples():number /*int*/\n\t{\n\t\treturn this._numSamples;\n\t}\n\n\tpublic set numSamples(value:number /*int*/)\n\t{\n\t\tthis._numSamples = value;\n\t\t\n\t\tif (this._numSamples < 1)\n\t\t\tthis._numSamples = 1;\n\t\telse if (this._numSamples > 32)\n\t\t\tthis._numSamples = 32;\n\n\t\tthis._offsets = PoissonLookup.getDistribution(this._numSamples);\n\t\t\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The range in the shadow map in which to distribute the samples.\n\t */\n\tpublic get range():number\n\t{\n\t\treturn this._range;\n\t}\n\n\tpublic set range(value:number)\n\t{\n\t\tthis._range = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tsuper.iInitConstants(shader, methodVO);\n\n\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex + 8] = 1/this._numSamples;\n\t\tshader.fragmentConstantData[methodVO.fragmentConstantsIndex + 9] = 0;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar texRange:number = .5*this._range/this._pCastingLight.shadowMapper.depthMapSize;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.fragmentConstantsIndex + 10;\n\t\tvar len:number /*uint*/ = this._numSamples << 1;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i)\n\t\t\tdata[index + i] = this._offsets[i]*texRange;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pGetPlanarFragmentCode(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, regCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\t// todo: move some things to super\n\t\tvar decReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\t\tregCache.getFreeFragmentConstant();\n\t\tvar dataReg:ShaderRegisterElement = regCache.getFreeFragmentConstant();\n\n\t\tmethodVO.fragmentConstantsIndex = decReg.index*4;\n\n\t\treturn this.getSampleCode(shader, methodVO, decReg, targetReg, regCache, sharedRegisters, dataReg);\n\t}\n\n\t/**\n\t * Adds the code for another tap to the shader code.\n\t * @param uv The uv register for the tap.\n\t * @param texture The texture register containing the depth map.\n\t * @param decode The register containing the depth map decoding data.\n\t * @param target The target register to add the tap comparison result.\n\t * @param regCache The register cache managing the registers.\n\t * @return\n\t */\n\tprivate addSample(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData, uvReg:ShaderRegisterElement):string\n\t{\n\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\treturn methodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, uvReg) +\n\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\"slt \" + uvReg + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\" + // 0 if in shadow\n\t\t\t\"add \" + targetRegister + \".w, \" + targetRegister + \".w, \" + uvReg + \".w\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivateForCascade(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar texRange:number = this._range/this._pCastingLight.shadowMapper.depthMapSize;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tvar index:number /*uint*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar len:number /*uint*/ = this._numSamples << 1;\n\t\tdata[index] = 1/this._numSamples;\n\t\tdata[index + 1] = 0;\n\t\tindex += 2;\n\n\t\tfor (var i:number /*int*/ = 0; i < len; ++i)\n\t\t\tdata[index + i] = this._offsets[i]*texRange;\n\n\t\tif (len%4 == 0) {\n\t\t\tdata[index + len] = 0;\n\t\t\tdata[index + len + 1] = 0;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetCascadeFragmentCode(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, depthProjection:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._pDepthMapCoordReg = depthProjection;\n\n\t\tvar dataReg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = dataReg.index*4;\n\n\t\treturn this.getSampleCode(shader, methodVO, decodeRegister, targetRegister, registerCache, sharedRegisters, dataReg);\n\t}\n\n\t/**\n\t * Get the actual shader code for shadow mapping\n\t * @param regCache The register cache managing the registers.\n\t * @param depthTexture The texture register containing the depth map.\n\t * @param decodeRegister The register containing the depth map decoding data.\n\t * @param targetReg The target register to add the shadow coverage.\n\t * @param dataReg The register containing additional data.\n\t */\n\tprivate getSampleCode(shader:ShaderBase, methodVO:MethodVO, decodeRegister:ShaderRegisterElement, targetRegister:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData, dataReg:ShaderRegisterElement):string\n\t{\n\t\tvar code:string;\n\t\tvar uvReg:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(uvReg, 1);\n\n\t\tvar offsets:Array<string> = new Array<string>(dataReg + \".zw\");\n\t\tvar numRegs:number /*int*/ = this._numSamples >> 1;\n\n\t\tfor (var i:number /*int*/ = 0; i < numRegs; ++i) {\n\t\t\tvar reg:ShaderRegisterElement = registerCache.getFreeFragmentConstant();\n\t\t\toffsets.push(reg + \".xy\");\n\t\t\toffsets.push(reg + \".zw\");\n\t\t}\n\n\t\tfor (i = 0; i < this._numSamples; ++i) {\n\t\t\tif (i == 0) {\n\t\t\t\tvar temp:ShaderRegisterElement = registerCache.getFreeFragmentVectorTemp();\n\n\t\t\t\tcode = \"add \" + uvReg + \", \" + this._pDepthMapCoordReg + \", \" + dataReg + \".zwyy\\n\" +\n\t\t\t\t\tmethodVO.textureVO._iGetFragmentCode(shader, temp, registerCache, sharedRegisters, uvReg) +\n\t\t\t\t\t\"dp4 \" + temp + \".z, \" + temp + \", \" + decodeRegister + \"\\n\" +\n\t\t\t\t\t\"slt \" + targetRegister + \".w, \" + this._pDepthMapCoordReg + \".z, \" + temp + \".z\\n\"; // 0 if in shadow;\n\t\t\t} else {\n\t\t\t\tcode += \"add \" + uvReg + \".xy, \" + this._pDepthMapCoordReg + \".xy, \" + offsets[i] + \"\\n\" +\n\t\t\t\t\tthis.addSample(shader, methodVO, decodeRegister, targetRegister, registerCache, sharedRegisters, uvReg);\n\t\t\t}\n\t\t}\n\n\t\tregisterCache.removeFragmentTempUsage(uvReg);\n\n\t\tcode += \"mul \" + targetRegister + \".w, \" + targetRegister + \".w, \" + dataReg + \".x\\n\"; // average\n\n\t\treturn code;\n\t}\n}\n\nexport = ShadowSoftMethod;",
    "import LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularAnisotropicMethod provides a specular method resulting in anisotropic highlights. These are typical for\n * surfaces with microfacet details such as tiny grooves. In particular, this uses the Heidrich-Seidel distrubution.\n * The tangent vectors are used as the surface groove directions.\n */\nclass SpecularAnisotropicMethod extends SpecularBasicMethod\n{\n\t/**\n\t * Creates a new SpecularAnisotropicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsTangents = true;\n\t\tmethodVO.needsView = true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight)\n\t\t\tt = this._pTotalLightColorReg;\n\t\telse {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\t// (sin(l,t) * sin(v,t) - cos(l,t)*cos(v,t)) ^ k\n\n\t\tcode += \"nrm \" + t + \".xyz, \" + sharedRegisters.tangentVarying + \".xyz\\n\" +\n\t\t\t\"dp3 \" + t + \".w, \" + t + \".xyz, \" + lightDirReg + \".xyz\\n\" +\n\t\t\t\"dp3 \" + t + \".z, \" + t + \".xyz, \" + sharedRegisters.viewDirFragment + \".xyz\\n\";\n\n\t\t// (sin(t.w) * sin(t.z) - cos(t.w)*cos(t.z)) ^ k\n\t\tcode += \"sin \" + t + \".x, \" + t + \".w\\n\" +\n\t\t\t\"sin \" + t + \".y, \" + t + \".z\\n\" +\n\t\t\t// (t.x * t.y - cos(t.w)*cos(t.z)) ^ k\n\t\t\t\"mul \" + t + \".x, \" + t + \".x, \" + t + \".y\\n\" +\n\t\t\t// (t.x - cos(t.w)*cos(t.z)) ^ k\n\t\t\t\"cos \" + t + \".z, \" + t + \".z\\n\" +\n\t\t\t\"cos \" + t + \".w, \" + t + \".w\\n\" +\n\t\t\t// (t.x - t.w*t.z) ^ k\n\t\t\t\"mul \" + t + \".w, \" + t + \".w, \" + t + \".z\\n\" +\n\t\t\t// (t.x - t.w) ^ k\n\t\t\t\"sub \" + t + \".w, \" + t + \".x, \" + t + \".w\\n\";\n\n\t\tif (this.texture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\n\t\t// attenuate\n\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \".xyz, \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n}\n\nexport = SpecularAnisotropicMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport ShadingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadingMethodBase\");\n\n/**\n * SpecularBasicMethod provides the default shading method for Blinn-Phong specular highlights (an optimized but approximated\n * version of Phong specularity).\n */\nclass SpecularBasicMethod extends LightingMethodBase\n{\n\tpublic _pTotalLightColorReg:ShaderRegisterElement;\n\tpublic _pSpecularTexData:ShaderRegisterElement;\n\tpublic _pSpecularDataRegister:ShaderRegisterElement;\n\n\tprivate _texture:TextureBase;\n\n\tprivate _gloss:number = 50;\n\tprivate _specular:number = 1;\n\tprivate _specularColor:number = 0xffffff;\n\tpublic _iSpecularR:number = 1;\n\tpublic _iSpecularG:number = 1;\n\tpublic _iSpecularB:number = 1;\n\tpublic _pIsFirstLight:boolean;\n\n\t/**\n\t * Creates a new SpecularBasicMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tpublic iIsUsed(shader:LightingShader):boolean\n\t{\n\t\tif (!shader.numLights)\n\t\t\treturn false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tmethodVO.needsNormals = shader.numLights > 0;\n\t\tmethodVO.needsView = shader.numLights > 0;\n\n\t\tif (this._texture) {\n\t\t\tmethodVO.textureVO = shader.getTextureVO(this._texture);\n\t\t\tshader.uvDependencies++;\n\t\t} else if (methodVO.textureVO) {\n\t\t\tmethodVO.textureVO.dispose();\n\t\t\tmethodVO.textureVO = null;\n\t\t}\n\t}\n\n\t/**\n\t * The sharpness of the specular highlight.\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._gloss = value;\n\t}\n\n\t/**\n\t * The overall strength of the specular highlights.\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tif (value == this._specular)\n\t\t\treturn;\n\n\t\tthis._specular = value;\n\t\tthis.updateSpecular();\n\t}\n\n\t/**\n\t * The colour of the specular reflection of the surface.\n\t */\n\tpublic get specularColor():number\n\t{\n\t\treturn this._specularColor;\n\t}\n\n\tpublic set specularColor(value:number)\n\t{\n\t\tif (this._specularColor == value)\n\t\t\treturn;\n\n\t\t// specular is now either enabled or disabled\n\t\tif (this._specularColor == 0 || value == 0)\n\t\t\tthis.iInvalidateShaderProgram();\n\n\t\tthis._specularColor = value;\n\t\tthis.updateSpecular();\n\t}\n\n\t/**\n\t * The bitmapData that encodes the specular highlight strength per texel in the red channel, and the sharpness\n\t * in the green channel. You can use SpecularTextureBase if you want to easily set specular and gloss maps\n\t * from grayscale images, but prepared images are preferred.\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tif (this._texture == value)\n\t\t\treturn;\n\n\t\tthis._texture = value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic copyFrom(method:ShadingMethodBase)\n\t{\n\n\t\tvar m:any = method;\n\t\tvar bsm:SpecularBasicMethod = <SpecularBasicMethod> method;\n\n\t\tvar spec:SpecularBasicMethod = bsm;//SpecularBasicMethod(method);\n\t\tthis.texture = spec.texture;\n\t\tthis.specular = spec.specular;\n\t\tthis.specularColor = spec.specularColor;\n\t\tthis.gloss = spec.gloss;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._pTotalLightColorReg = null;\n\t\tthis._pSpecularTexData = null;\n\t\tthis._pSpecularDataRegister = null;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tthis._pIsFirstLight = true;\n\n\t\tthis._pSpecularDataRegister = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.fragmentConstantsIndex = this._pSpecularDataRegister.index*4;\n\n\t\tif (this._texture) {\n\n\t\t\tthis._pSpecularTexData = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(this._pSpecularTexData, 1);\n\n\t\t\tcode += methodVO.textureVO._iGetFragmentCode(shader, this._pSpecularTexData, registerCache, sharedRegisters, sharedRegisters.uvVarying);\n\t\t}\n\n\t\tthis._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp();\n\t\tregisterCache.addFragmentTempUsages(this._pTotalLightColorReg, 1);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\n\t\t// blinn-phong half vector model\n\t\tcode += \"add \" + t + \", \" + lightDirReg + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"nrm \" + t + \".xyz, \" + t + \"\\n\" +\n\t\t\t\t\"dp3 \" + t + \".w, \" + normalReg + \", \" + t + \"\\n\" +\n\t\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\";\n\n\t\tif (this._texture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else {\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\t\t}\n\n\t\t// attenuate\n\t\tif (shader.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \", \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerProbe(shader:LightingShader, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\t// write in temporary if not first light, so we can add to total diffuse colour\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar normalReg:ShaderRegisterElement = sharedRegisters.normalFragment;\n\t\tvar viewDirReg:ShaderRegisterElement = sharedRegisters.viewDirFragment;\n\n\t\tcode += \"dp3 \" + t + \".w, \" + normalReg + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + t + \".w\\n\" +\n\t\t\t\t\"mul \" + t + \", \" + t + \".w, \" + normalReg + \"\\n\" +\n\t\t\t\t\"sub \" + t + \", \" + t + \", \" + viewDirReg + \"\\n\" +\n\t\t\t\t\"tex \" + t + \", \" + t + \", \" + cubeMapReg + \" <cube,\" + (shader.useSmoothTextures? \"linear\":\"nearest\") + \",miplinear>\\n\" +\n\t\t\t\t\"mul \" + t + \".xyz, \" + t + \", \" + weightRegister + \"\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + t + \"\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (sharedRegisters.shadowTarget)\n\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + sharedRegisters.shadowTarget + \".w\\n\";\n\n\t\tif (this._texture) {\n\t\t\t// apply strength modulation from texture\n\t\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + this._pSpecularTexData + \".x\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(this._pSpecularTexData);\n\t\t}\n\n\t\t// apply material's specular reflection\n\t\tcode += \"mul \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \", \" + this._pSpecularDataRegister + \"\\n\" +\n\t\t\t\"add \" + targetReg + \".xyz, \" + targetReg + \", \" + this._pTotalLightColorReg + \"\\n\";\n\t\tregisterCache.removeFragmentTempUsage(this._pTotalLightColorReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tif (this._texture)\n\t\t\tmethodVO.textureVO.activate(shader);\n\n\t\tvar index:number = methodVO.fragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = this._iSpecularR;\n\t\tdata[index + 1] = this._iSpecularG;\n\t\tdata[index + 2] = this._iSpecularB;\n\t\tdata[index + 3] = this._gloss;\n\t}\n\n\tpublic iSetRenderState(shader:LightingShader, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tif (this._texture)\n\t\t\tmethodVO.textureVO._setRenderState(renderable, shader);\n\t}\n\n\t/**\n\t * Updates the specular color data used by the render state.\n\t */\n\tprivate updateSpecular()\n\t{\n\t\tthis._iSpecularR = (( this._specularColor >> 16) & 0xff)/0xff*this._specular;\n\t\tthis._iSpecularG = (( this._specularColor >> 8) & 0xff)/0xff*this._specular;\n\t\tthis._iSpecularB = ( this._specularColor & 0xff)/0xff*this._specular;\n\t}\n}\n\nexport = SpecularBasicMethod;",
    "import Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport SpecularCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCompositeMethod\");\n\n/**\n * SpecularCelMethod provides a shading method to add specular cel (cartoon) shading.\n */\nclass SpecularCelMethod extends SpecularCompositeMethod\n{\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _smoothness:number = .1;\n\tprivate _specularCutOff:number = .1;\n\n\t/**\n\t * Creates a new SpecularCelMethod object.\n\t * @param specularCutOff The threshold at which the specular highlight should be shown.\n\t * @param baseMethod An optional specular method on which the cartoon shading is based. If ommitted, SpecularBasicMethod is used.\n\t */\n\tconstructor(specularCutOff:number = .5, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.clampSpecular(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._specularCutOff = specularCutOff;\n\t}\n\n\t/**\n\t * The smoothness of the highlight edge.\n\t */\n\tpublic get smoothness():number\n\t{\n\t\treturn this._smoothness;\n\t}\n\n\tpublic set smoothness(value:number)\n\t{\n\t\tthis._smoothness = value;\n\t}\n\n\t/**\n\t * The threshold at which the specular highlight should be shown.\n\t */\n\tpublic get specularCutOff():number\n\t{\n\t\treturn this._specularCutOff;\n\t}\n\n\tpublic set specularCutOff(value:number)\n\t{\n\t\tthis._specularCutOff = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar index:number /*int*/ = methodVO.secondaryFragmentConstantsIndex;\n\t\tvar data:Float32Array = shader.fragmentConstantData;\n\t\tdata[index] = this._smoothness;\n\t\tdata[index + 1] = this._specularCutOff;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * Snaps the specular shading strength of the wrapped method to zero or one, depending on whether or not it exceeds the specularCutOff\n\t * @param vo The MethodVO used to compile the current shader.\n\t * @param t The register containing the specular strength in the \"w\" component, and either the half-vector or the reflection vector in \"xyz\".\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared register data for this shader.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate clampSpecular(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn \"sub \" + targetReg + \".y, \" + targetReg + \".w, \" + this._dataReg + \".y\\n\" + // x - cutoff\n\t\t\t\"div \" + targetReg + \".y, \" + targetReg + \".y, \" + this._dataReg + \".x\\n\" + // (x - cutoff)/epsilon\n\t\t\t\"sat \" + targetReg + \".y, \" + targetReg + \".y\\n\" +\n\t\t\t\"sge \" + targetReg + \".w, \" + targetReg + \".w, \" + this._dataReg + \".y\\n\" +\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n}\n\nexport = SpecularCelMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularCompositeMethod provides a base class for specular methods that wrap a specular method to alter the\n * calculated specular reflection strength.\n */\nclass SpecularCompositeMethod extends SpecularBasicMethod\n{\n\tprivate _baseMethod:SpecularBasicMethod;\n\n\tprivate _onShaderInvalidatedDelegate:Function;\n\n\t/**\n\t * Creates a new <code>SpecularCompositeMethod</code> object.\n\t *\n\t * @param modulateMethod The method which will add the code to alter the base method's strength. It needs to have the signature modSpecular(t:ShaderRegisterElement, regCache:ShaderRegisterCache):string, in which t.w will contain the specular strength and t.xyz will contain the half-vector or the reflection vector.\n\t * @param baseMethod The base specular method on which this method's shading is based.\n\t */\n\tconstructor(modulateMethod:(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => string, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\tsuper();\n\n\t\tthis._onShaderInvalidatedDelegate = (event:ShadingMethodEvent) => this.onShaderInvalidated(event);\n\n\t\tthis._baseMethod = baseMethod || new SpecularBasicMethod();\n\t\tthis._baseMethod._iModulateMethod = modulateMethod;\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitVO(shader:LightingShader, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitVO(shader, methodVO);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tthis._baseMethod.iInitConstants(shader, methodVO);\n\t}\n\n\t/**\n\t * The base specular method on which this method's shading is based.\n\t */\n\tpublic get baseMethod():SpecularBasicMethod\n\t{\n\t\treturn this._baseMethod;\n\t}\n\n\tpublic set baseMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._baseMethod == value)\n\t\t\treturn;\n\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis._baseMethod = value;\n\n\t\tthis._baseMethod.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get gloss():number\n\t{\n\t\treturn this._baseMethod.gloss;\n\t}\n\n\tpublic set gloss(value:number)\n\t{\n\t\tthis._baseMethod.gloss = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get specular():number\n\t{\n\t\treturn this._baseMethod.specular;\n\t}\n\n\tpublic set specular(value:number)\n\t{\n\t\tthis._baseMethod.specular = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tthis._baseMethod.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onShaderInvalidatedDelegate);\n\t\tthis._baseMethod.dispose();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic get texture():TextureBase\n\t{\n\t\treturn this._baseMethod.texture;\n\t}\n\n\tpublic set texture(value:TextureBase)\n\t{\n\t\tthis._baseMethod.texture = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iActivate(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iSetRenderState(shader:LightingShader, methodVO:MethodVO, renderable:RenderableBase, stage:Stage, camera:Camera)\n\t{\n\t\tthis._baseMethod.iSetRenderState(shader, methodVO, renderable, stage, camera);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iDeactivate(shader:ShaderBase, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tthis._baseMethod.iDeactivate(shader, methodVO, stage);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetVertexCode(shader:ShaderBase, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetVertexCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentCodePerLight(shader, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @return\n\t */\n\tpublic iGetFragmentCodePerProbe(shader:LightingShader, methodVO:MethodVO, cubeMapReg:ShaderRegisterElement, weightRegister:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentCodePerProbe(shader, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPostLightingCode(shader:LightingShader, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._baseMethod.iGetFragmentPostLightingCode(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iReset()\n\t{\n\t\tthis._baseMethod.iReset();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._baseMethod.iCleanCompilationData();\n\t}\n\n\t/**\n\t * Called when the base method's shader code is invalidated.\n\t */\n\tprivate onShaderInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.iInvalidateShaderProgram();\n\t}\n}\n\nexport = SpecularCompositeMethod;",
    "import Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport SpecularCompositeMethod\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularCompositeMethod\");\n\n/**\n * SpecularFresnelMethod provides a specular shading method that causes stronger highlights on grazing view angles.\n */\nclass SpecularFresnelMethod extends SpecularCompositeMethod\n{\n\tprivate _dataReg:ShaderRegisterElement;\n\tprivate _incidentLight:boolean;\n\tprivate _fresnelPower:number = 5;\n\tprivate _normalReflectance:number = .028; // default value for skin\n\n\t/**\n\t * Creates a new SpecularFresnelMethod object.\n\t * @param basedOnSurface Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.\n\t * @param baseMethod The specular method to which the fresnel equation. Defaults to SpecularBasicMethod.\n\t */\n\tconstructor(basedOnSurface:boolean = true, baseMethod:SpecularBasicMethod = null)\n\t{\n\t\t// may want to offer diff speculars\n\t\tsuper(null, baseMethod);\n\n\t\tthis.baseMethod._iModulateMethod = (shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData) => this.modulateSpecular(shader, methodVO, targetReg, registerCache, sharedRegisters);\n\n\t\tthis._incidentLight = !basedOnSurface;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iInitConstants(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\n\t\tvar index:number = methodVO.secondaryFragmentConstantsIndex;\n\t\tshader.fragmentConstantData[index + 2] = 1;\n\t\tshader.fragmentConstantData[index + 3] = 0;\n\t}\n\n\t/**\n\t * Defines whether the fresnel effect should be based on the view angle on the surface (if true), or on the angle between the light and the view.\n\t */\n\tpublic get basedOnSurface():boolean\n\t{\n\t\treturn !this._incidentLight;\n\t}\n\n\tpublic set basedOnSurface(value:boolean)\n\t{\n\t\tif (this._incidentLight != value)\n\t\t\treturn;\n\n\t\tthis._incidentLight = !value;\n\n\t\tthis.iInvalidateShaderProgram();\n\t}\n\n\t/**\n\t * The power used in the Fresnel equation. Higher values make the fresnel effect more pronounced. Defaults to 5.\n\t */\n\tpublic get fresnelPower():number\n\t{\n\t\treturn this._fresnelPower;\n\t}\n\n\tpublic set fresnelPower(value:number)\n\t{\n\t\tthis._fresnelPower = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iCleanCompilationData()\n\t{\n\t\tsuper.iCleanCompilationData();\n\t\tthis._dataReg = null;\n\t}\n\n\t/**\n\t * The minimum amount of reflectance, ie the reflectance when the view direction is normal to the surface or light direction.\n\t */\n\tpublic get normalReflectance():number\n\t{\n\t\treturn this._normalReflectance;\n\t}\n\n\tpublic set normalReflectance(value:number)\n\t{\n\t\tthis._normalReflectance = value;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iActivate(shader:LightingShader, methodVO:MethodVO, stage:Stage)\n\t{\n\t\tsuper.iActivate(shader, methodVO, stage);\n\n\t\tvar fragmentData:Float32Array = shader.fragmentConstantData;\n\n\t\tvar index:number = methodVO.secondaryFragmentConstantsIndex;\n\t\tfragmentData[index] = this._normalReflectance;\n\t\tfragmentData[index + 1] = this._fresnelPower;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentPreLightingCode(shader:LightingShader, methodVO:MethodVO, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tthis._dataReg = registerCache.getFreeFragmentConstant();\n\n\t\tmethodVO.secondaryFragmentConstantsIndex = this._dataReg.index*4;\n\n\t\treturn super.iGetFragmentPreLightingCode(shader, methodVO, registerCache, sharedRegisters);\n\t}\n\n\t/**\n\t * Applies the fresnel effect to the specular strength.\n\t *\n\t * @param vo The MethodVO object containing the method data for the currently compiled material pass.\n\t * @param target The register containing the specular strength in the \"w\" component, and the half-vector/reflection vector in \"xyz\".\n\t * @param regCache The register cache used for the shader compilation.\n\t * @param sharedRegisters The shared registers created by the compiler.\n\t * @return The AGAL fragment code for the method.\n\t */\n\tprivate modulateSpecular(shader:ShaderBase, methodVO:MethodVO, targetReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string;\n\n\t\tcode = \"dp3 \" + targetReg + \".y, \" + sharedRegisters.viewDirFragment + \".xyz, \" + (this._incidentLight? targetReg : sharedRegisters.normalFragment) + \".xyz\\n\" +   // dot(V, H)\n\t\t\t\"sub \" + targetReg + \".y, \" + this._dataReg + \".z, \" + targetReg + \".y\\n\" +             // base = 1-dot(V, H)\n\t\t\t\"pow \" + targetReg + \".x, \" + targetReg + \".y, \" + this._dataReg + \".y\\n\" +             // exp = pow(base, 5)\n\t\t\t\"sub \" + targetReg + \".y, \" + this._dataReg + \".z, \" + targetReg + \".y\\n\" +             // 1 - exp\n\t\t\t\"mul \" + targetReg + \".y, \" + this._dataReg + \".x, \" + targetReg + \".y\\n\" +             // f0*(1 - exp)\n\t\t\t\"add \" + targetReg + \".y, \" + targetReg + \".x, \" + targetReg + \".y\\n\" +          // exp + f0*(1 - exp)\n\t\t\t\"mul \" + targetReg + \".w, \" + targetReg + \".w, \" + targetReg + \".y\\n\";\n\n\t\treturn code;\n\t}\n\n}\n\nexport = SpecularFresnelMethod;",
    "import LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * SpecularPhongMethod provides a specular method that provides Phong highlights.\n */\nclass SpecularPhongMethod extends SpecularBasicMethod\n{\n\t/**\n\t * Creates a new SpecularPhongMethod object.\n\t */\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic iGetFragmentCodePerLight(shader:LightingShader, methodVO:MethodVO, lightDirReg:ShaderRegisterElement, lightColReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar t:ShaderRegisterElement;\n\n\t\tif (this._pIsFirstLight) {\n\t\t\tt = this._pTotalLightColorReg;\n\t\t} else {\n\t\t\tt = registerCache.getFreeFragmentVectorTemp();\n\t\t\tregisterCache.addFragmentTempUsages(t, 1);\n\t\t}\n\n\t\tvar viewDirReg:ShaderRegisterElement =sharedRegisters.viewDirFragment;\n\t\tvar normalReg:ShaderRegisterElement =sharedRegisters.normalFragment;\n\n\t\t// phong model\n\t\tcode += \"dp3 \" + t + \".w, \" + lightDirReg + \", \" + normalReg + \"\\n\" + // sca1 = light.normal\n\n\t\t\t//find the reflected light vector R\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" + t + \".w\\n\" + // sca1 = sca1*2\n\t\t\t\"mul \" + t + \".xyz, \" + normalReg + \", \" + t + \".w\\n\" + // vec1 = normal*sca1\n\t\t\t\"sub \" + t + \".xyz, \" + t + \", \" + lightDirReg + \"\\n\" + // vec1 = vec1 - light (light vector is negative)\n\n\t\t\t//smooth the edge as incidence angle approaches 90\n\t\t\t\"add \" + t + \".w, \" + t + \".w, \" +sharedRegisters.commons + \".w\\n\" + // sca1 = sca1 + smoothtep;\n\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\" + // sca1 range 0 - 1\n\t\t\t\"mul \" + t + \".xyz, \" + t + \", \" + t + \".w\\n\" + // vec1 = vec1*sca1\n\n\t\t\t//find the dot product between R and V\n\t\t\t\"dp3 \" + t + \".w, \" + t + \", \" + viewDirReg + \"\\n\" + // sca1 = vec1.view\n\t\t\t\"sat \" + t + \".w, \" + t + \".w\\n\";\n\n\t\tif (this.texture) {\n\t\t\t// apply gloss modulation from texture\n\t\t\tcode += \"mul \" + this._pSpecularTexData + \".w, \" + this._pSpecularTexData + \".y, \" + this._pSpecularDataRegister + \".w\\n\" +\n\t\t\t\t\"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularTexData + \".w\\n\";\n\t\t} else\n\t\t\tcode += \"pow \" + t + \".w, \" + t + \".w, \" + this._pSpecularDataRegister + \".w\\n\";\n\n\t\t// attenuate\n\t\tif (shader.usesLightFallOff)\n\t\t\tcode += \"mul \" + t + \".w, \" + t + \".w, \" + lightDirReg + \".w\\n\";\n\n\t\tif (this._iModulateMethod != null)\n\t\t\tcode += this._iModulateMethod(shader, methodVO, t, registerCache, sharedRegisters);\n\n\t\tcode += \"mul \" + t + \".xyz, \" + lightColReg + \".xyz, \" + t + \".w\\n\";\n\n\t\tif (!this._pIsFirstLight) {\n\t\t\tcode += \"add \" + this._pTotalLightColorReg + \".xyz, \" + this._pTotalLightColorReg + \".xyz, \" + t + \".xyz\\n\";\n\t\t\tregisterCache.removeFragmentTempUsage(t);\n\t\t}\n\n\t\tthis._pIsFirstLight = false;\n\n\t\treturn code;\n\t}\n}\n\nexport = SpecularPhongMethod;",
    "import BlendMode\t\t\t\t\t\t= require(\"awayjs-core/lib/data/BlendMode\");\nimport ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Matrix3DUtils\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IRenderOwner\t\t\t\t\t\t= require(\"awayjs-display/lib/base/IRenderOwner\");\nimport StaticLightPicker\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/StaticLightPicker\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\nimport ContextGLCompareMode\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLCompareMode\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/IRenderableClass\");\nimport RenderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/RenderBase\");\nimport RenderPool\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/RenderPool\");\n\nimport MethodMaterial\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterial\");\nimport MethodMaterialMode\t\t\t\t= require(\"awayjs-methodmaterials/lib/MethodMaterialMode\");\nimport MethodPassMode\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/render/passes/MethodPassMode\");\nimport MethodPass\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/render/passes/MethodPass\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\n\n/**\n * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,\n * using material methods to define their appearance.\n */\nclass MethodMaterialRender extends RenderBase\n{\n\tprivate _material:MethodMaterial;\n\tprivate _pass:MethodPass;\n\tprivate _casterLightPass:MethodPass;\n\tprivate _nonCasterLightPasses:Array<MethodPass>;\n\t\n\t/**\n\t * The maximum total number of lights provided by the light picker.\n\t */\n\tprivate get numLights():number\n\t{\n\t\treturn this._material.lightPicker? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights + this._material.lightPicker.numCastingDirectionalLights + this._material.lightPicker.numCastingPointLights : 0;\n\t}\n\n\t/**\n\t * The amount of lights that don't cast shadows.\n\t */\n\tprivate get numNonCasters():number\n\t{\n\t\treturn this._material.lightPicker? this._material.lightPicker.numLightProbes + this._material.lightPicker.numDirectionalLights + this._material.lightPicker.numPointLights : 0;\n\t}\n\n\t/**\n\t * Creates a new CompiledPass object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(pool:RenderPool, material:MethodMaterial, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(pool, material, renderableClass, stage);\n\n\t\tthis._material = material;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _pUpdateRender()\n\t{\n\t\tsuper._pUpdateRender();\n\n\t\tthis.initPasses();\n\n\t\tthis.setBlendAndCompareModes();\n\n\t\tthis._pClearPasses();\n\n\t\tif (this._material.mode == MethodMaterialMode.MULTI_PASS) {\n\t\t\tif (this._casterLightPass)\n\t\t\t\tthis._pAddPass(this._casterLightPass);\n\n\t\t\tif (this._nonCasterLightPasses)\n\t\t\t\tfor (var i:number = 0; i < this._nonCasterLightPasses.length; ++i)\n\t\t\t\t\tthis._pAddPass(this._nonCasterLightPasses[i]);\n\t\t}\n\n\t\tif (this._pass)\n\t\t\tthis._pAddPass(this._pass);\n\t}\n\n\t/**\n\t * Initializes all the passes and their dependent passes.\n\t */\n\tprivate initPasses()\n\t{\n\t\t// let the effects pass handle everything if there are no lights, when there are effect methods applied\n\t\t// after shading, or when the material mode is single pass.\n\t\tif (this.numLights == 0 || this._material.numEffectMethods > 0 || this._material.mode == MethodMaterialMode.SINGLE_PASS)\n\t\t\tthis.initEffectPass();\n\t\telse if (this._pass)\n\t\t\tthis.removeEffectPass();\n\n\t\t// only use a caster light pass if shadows need to be rendered\n\t\tif (this._material.shadowMethod && this._material.mode == MethodMaterialMode.MULTI_PASS)\n\t\t\tthis.initCasterLightPass();\n\t\telse if (this._casterLightPass)\n\t\t\tthis.removeCasterLightPass();\n\n\t\t// only use non caster light passes if there are lights that don't cast\n\t\tif (this.numNonCasters > 0 && this._material.mode == MethodMaterialMode.MULTI_PASS)\n\t\t\tthis.initNonCasterLightPasses();\n\t\telse if (this._nonCasterLightPasses)\n\t\t\tthis.removeNonCasterLightPasses();\n\t}\n\n\t/**\n\t * Sets up the various blending modes for all screen passes, based on whether or not there are previous passes.\n\t */\n\tprivate setBlendAndCompareModes()\n\t{\n\t\tvar forceSeparateMVP:boolean = Boolean(this._casterLightPass || this._pass);\n\n\t\t// caster light pass is always first if it exists, hence it uses normal blending\n\t\tif (this._casterLightPass) {\n\t\t\tthis._casterLightPass.forceSeparateMVP = forceSeparateMVP;\n\t\t\tthis._casterLightPass.shader.setBlendMode(BlendMode.NORMAL);\n\t\t\tthis._casterLightPass.shader.depthCompareMode = this._material.depthCompareMode;\n\t\t}\n\n\t\tif (this._nonCasterLightPasses) {\n\t\t\tvar firstAdditiveIndex:number = 0;\n\n\t\t\t// if there's no caster light pass, the first non caster light pass will be the first\n\t\t\t// and should use normal blending\n\t\t\tif (!this._casterLightPass) {\n\t\t\t\tthis._nonCasterLightPasses[0].forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._nonCasterLightPasses[0].shader.setBlendMode(BlendMode.NORMAL);\n\t\t\t\tthis._nonCasterLightPasses[0].shader.depthCompareMode = this._material.depthCompareMode;\n\t\t\t\tfirstAdditiveIndex = 1;\n\t\t\t}\n\n\t\t\t// all lighting passes following the first light pass should use additive blending\n\t\t\tfor (var i:number = firstAdditiveIndex; i < this._nonCasterLightPasses.length; ++i) {\n\t\t\t\tthis._nonCasterLightPasses[i].forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._nonCasterLightPasses[i].shader.setBlendMode(BlendMode.ADD);\n\t\t\t\tthis._nonCasterLightPasses[i].shader.depthCompareMode = ContextGLCompareMode.LESS_EQUAL;\n\t\t\t}\n\t\t}\n\n\t\tif (this._casterLightPass || this._nonCasterLightPasses) {\n\t\t\t//cannot be blended by blendmode property if multipass enabled\n\t\t\tthis._pRequiresBlending = false;\n\n\t\t\t// there are light passes, so this should be blended in\n\t\t\tif (this._pass) {\n\t\t\t\tthis._pass.mode = MethodPassMode.EFFECTS;\n\t\t\t\tthis._pass.forceSeparateMVP = forceSeparateMVP;\n\t\t\t\tthis._pass.shader.depthCompareMode = ContextGLCompareMode.LESS_EQUAL;\n\t\t\t\tthis._pass.shader.setBlendMode(BlendMode.LAYER);\n\t\t\t}\n\n\t\t} else if (this._pass) {\n\t\t\tthis._pRequiresBlending = (this._material.blendMode != BlendMode.NORMAL || this._material.alphaBlending || (this._material.colorTransform && this._material.colorTransform.alphaMultiplier < 1));\n\t\t\t// effects pass is the only pass, so it should just blend normally\n\t\t\tthis._pass.mode = MethodPassMode.SUPER_SHADER;\n\t\t\tthis._pass.preserveAlpha = this._pRequiresBlending;\n\t\t\tthis._pass.forceSeparateMVP = false;\n\t\t\tthis._pass.colorTransform = this._material.colorTransform;\n\t\t\tthis._pass.shader.setBlendMode((this._material.blendMode == BlendMode.NORMAL && this._pRequiresBlending)? BlendMode.LAYER : this._material.blendMode);\n\t\t\tthis._pass.shader.depthCompareMode = this._material.depthCompareMode;\n\t\t}\n\t}\n\n\tprivate initCasterLightPass()\n\t{\n\n\t\tif (this._casterLightPass == null)\n\t\t\tthis._casterLightPass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);\n\n\t\tthis._casterLightPass.lightPicker = new StaticLightPicker([this._material.shadowMethod.castingLight]);\n\t\tthis._casterLightPass.shadowMethod = this._material.shadowMethod;\n\t\tthis._casterLightPass.diffuseMethod = this._material.diffuseMethod;\n\t\tthis._casterLightPass.ambientMethod = this._material.ambientMethod;\n\t\tthis._casterLightPass.normalMethod = this._material.normalMethod;\n\t\tthis._casterLightPass.specularMethod = this._material.specularMethod;\n\t}\n\n\tprivate removeCasterLightPass()\n\t{\n\t\tthis._casterLightPass.dispose();\n\t\tthis._pRemovePass(this._casterLightPass);\n\t\tthis._casterLightPass = null;\n\t}\n\n\tprivate initNonCasterLightPasses()\n\t{\n\t\tthis.removeNonCasterLightPasses();\n\t\tvar pass:MethodPass;\n\t\tvar numDirLights:number = this._material.lightPicker.numDirectionalLights;\n\t\tvar numPointLights:number = this._material.lightPicker.numPointLights;\n\t\tvar numLightProbes:number = this._material.lightPicker.numLightProbes;\n\t\tvar dirLightOffset:number = 0;\n\t\tvar pointLightOffset:number = 0;\n\t\tvar probeOffset:number = 0;\n\n\t\tif (!this._casterLightPass) {\n\t\t\tnumDirLights += this._material.lightPicker.numCastingDirectionalLights;\n\t\t\tnumPointLights += this._material.lightPicker.numCastingPointLights;\n\t\t}\n\n\t\tthis._nonCasterLightPasses = new Array<MethodPass>();\n\n\t\twhile (dirLightOffset < numDirLights || pointLightOffset < numPointLights || probeOffset < numLightProbes) {\n\t\t\tpass = new MethodPass(MethodPassMode.LIGHTING, this, this._material, this._renderableClass, this._stage);\n\t\t\tpass.includeCasters = this._material.shadowMethod == null;\n\t\t\tpass.directionalLightsOffset = dirLightOffset;\n\t\t\tpass.pointLightsOffset = pointLightOffset;\n\t\t\tpass.lightProbesOffset = probeOffset;\n\t\t\tpass.lightPicker = this._material.lightPicker;\n\t\t\tpass.diffuseMethod = this._material.diffuseMethod;\n\t\t\tpass.ambientMethod = this._material.ambientMethod;\n\t\t\tpass.normalMethod = this._material.normalMethod;\n\t\t\tpass.specularMethod = this._material.specularMethod;\n\t\t\tthis._nonCasterLightPasses.push(pass);\n\n\t\t\tdirLightOffset += pass.numDirectionalLights;\n\t\t\tpointLightOffset += pass.numPointLights;\n\t\t\tprobeOffset += pass.numLightProbes;\n\t\t}\n\t}\n\n\tprivate removeNonCasterLightPasses()\n\t{\n\t\tif (!this._nonCasterLightPasses)\n\t\t\treturn;\n\n\t\tfor (var i:number = 0; i < this._nonCasterLightPasses.length; ++i)\n\t\t\tthis._pRemovePass(this._nonCasterLightPasses[i]);\n\n\t\tthis._nonCasterLightPasses = null;\n\t}\n\n\tprivate removeEffectPass()\n\t{\n\t\tif (this._pass.ambientMethod != this._material.ambientMethod)\n\t\t\tthis._pass.ambientMethod.dispose();\n\n\t\tif (this._pass.diffuseMethod != this._material.diffuseMethod)\n\t\t\tthis._pass.diffuseMethod.dispose();\n\n\t\tif (this._pass.specularMethod != this._material.specularMethod)\n\t\t\tthis._pass.specularMethod.dispose();\n\n\t\tif (this._pass.normalMethod != this._material.normalMethod)\n\t\t\tthis._pass.normalMethod.dispose();\n\n\t\tthis._pRemovePass(this._pass);\n\t\tthis._pass = null;\n\t}\n\n\tprivate initEffectPass()\n\t{\n\t\tif (this._pass == null)\n\t\t\tthis._pass = new MethodPass(MethodPassMode.SUPER_SHADER, this, this._material, this._renderableClass, this._stage);\n\n\t\tif (this._material.mode == MethodMaterialMode.SINGLE_PASS) {\n\t\t\tthis._pass.ambientMethod = this._material.ambientMethod;\n\t\t\tthis._pass.diffuseMethod = this._material.diffuseMethod;\n\t\t\tthis._pass.specularMethod = this._material.specularMethod;\n\t\t\tthis._pass.normalMethod = this._material.normalMethod;\n\t\t\tthis._pass.shadowMethod = this._material.shadowMethod;\n\t\t} else if (this._material.mode == MethodMaterialMode.MULTI_PASS) {\n\t\t\tif (this.numLights == 0) {\n\t\t\t\tthis._pass.ambientMethod = this._material.ambientMethod;\n\t\t\t} else {\n\t\t\t\tthis._pass.ambientMethod = null;\n\t\t\t}\n\n\t\t\tthis._pass.preserveAlpha = false;\n\t\t\tthis._pass.normalMethod = this._material.normalMethod;\n\t\t}\n\n\t\t//update effect methods\n\t\tvar i:number = 0;\n\t\tvar effectMethod:EffectMethodBase;\n\t\tvar len:number = Math.max(this._material.numEffectMethods, this._pass.numEffectMethods);\n\n\t\twhile (i < len) {\n\t\t\teffectMethod = this._material.getEffectMethodAt(i);\n\t\t\tif (effectMethod != this._pass.getEffectMethodAt(i)) {\n\t\t\t\tthis._pass.removeEffectMethodAt(i);\n\n\t\t\t\tif (effectMethod != null) {\n\t\t\t\t\tif (i < this._pass.numEffectMethods)\n\t\t\t\t\t\tthis._pass.addEffectMethodAt(effectMethod, i);\n\t\t\t\t\telse\n\t\t\t\t\t\tthis._pass.addEffectMethod(effectMethod);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t}\n\t\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tsuper.dispose();\n\n\t\t//TODO\n\t}\n}\n\nexport = MethodMaterialRender;",
    "class PassMode\n{\n\t/**\n\t *\n\t */\n\tpublic static EFFECTS:number = 0x01;\n\n\t/**\n\t *\n\t */\n\tpublic static LIGHTING:number = 0x02;\n\n\t/**\n\t *\n\t */\n\tpublic static SUPER_SHADER:number = 0x03;\n}\n\nexport = PassMode;",
    "import ColorTransform\t\t\t\t\t= require(\"awayjs-core/lib/geom/ColorTransform\");\nimport Matrix\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\nimport Matrix3DUtils\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3DUtils\");\nimport Vector3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Vector3D\");\nimport AbstractMethodError\t\t\t\t= require(\"awayjs-core/lib/errors/AbstractMethodError\");\nimport Event\t\t\t\t\t\t\t= require(\"awayjs-core/lib/events/Event\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\n\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport IRenderOwner\t\t\t\t\t\t= require(\"awayjs-display/lib/base/IRenderOwner\");\nimport LightPickerBase\t\t\t\t\t= require(\"awayjs-display/lib/materials/lightpickers/LightPickerBase\");\nimport LightSources\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/LightSources\");\n\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport LightingShader\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/LightingShader\");\nimport ShadingMethodEvent\t\t\t\t= require(\"awayjs-renderergl/lib/events/ShadingMethodEvent\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport ShaderRegisterElement\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterElement\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport PassBase\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/passes/PassBase\");\nimport ILightingPass\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/passes/ILightingPass\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/IRenderableClass\");\n\nimport MethodVO\t\t\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/data/MethodVO\");\nimport AmbientBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/AmbientBasicMethod\");\nimport DiffuseBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/DiffuseBasicMethod\");\nimport EffectColorTransformMethod\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectColorTransformMethod\");\nimport EffectMethodBase\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/EffectMethodBase\");\nimport LightingMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/LightingMethodBase\");\nimport NormalBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/NormalBasicMethod\");\nimport ShadowMapMethodBase\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/ShadowMapMethodBase\");\nimport SpecularBasicMethod\t\t\t\t= require(\"awayjs-methodmaterials/lib/methods/SpecularBasicMethod\");\nimport MethodPassMode\t\t\t\t\t= require(\"awayjs-methodmaterials/lib/render/passes/MethodPassMode\");\nimport MethodMaterialRender\t\t\t\t= require(\"awayjs-methodmaterials/lib/render/MethodMaterialRender\");\n\n/**\n * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,\n * using material methods to define their appearance.\n */\nclass MethodPass extends PassBase implements ILightingPass\n{\n\tprivate _maxLights:number = 3;\n\n\tprivate _mode:number = 0x03;\n\tprivate _material:MaterialBase;\n\tprivate _lightPicker:LightPickerBase;\n\n\tprivate _includeCasters:boolean = true;\n\n\tpublic _iColorTransformMethodVO:MethodVO;\n\tpublic _iNormalMethodVO:MethodVO;\n\tpublic _iAmbientMethodVO:MethodVO;\n\tpublic _iShadowMethodVO:MethodVO;\n\tpublic _iDiffuseMethodVO:MethodVO;\n\tpublic _iSpecularMethodVO:MethodVO;\n\tpublic _iMethodVOs:Array<MethodVO> = new Array<MethodVO>();\n\n\tpublic _numEffectDependencies:number = 0;\n\n\tprivate _onLightsChangeDelegate:(event:Event) => void;\n\tprivate _onMethodInvalidatedDelegate:(event:ShadingMethodEvent) => void;\n\n\tpublic numDirectionalLights:number = 0;\n\n\tpublic numPointLights:number = 0;\n\n\tpublic numLightProbes:number = 0;\n\n\tpublic pointLightsOffset:number = 0;\n\t\n\tpublic directionalLightsOffset:number= 0;\n\t\n\tpublic lightProbesOffset:number = 0;\n\t\n\t/**\n\t *\n\t */\n\tpublic get mode():number\n\t{\n\t\treturn this._mode;\n\t}\n\n\tpublic set mode(value:number)\n\t{\n\t\tif (this._mode == value)\n\t\t\treturn;\n\t\t\n\t\tthis._mode = value;\n\n\t\tthis._updateLights();\n\t}\n\n\t/**\n\t * Indicates whether or not shadow casting lights need to be included.\n\t */\n\tpublic get includeCasters():boolean\n\t{\n\t\treturn this._includeCasters;\n\t}\n\n\tpublic set includeCasters(value:boolean)\n\t{\n\t\tif (this._includeCasters == value)\n\t\t\treturn;\n\n\t\tthis._includeCasters = value;\n\n\t\tthis._updateLights();\n\t}\n\n\t/**\n\t * \n\t * @returns {LightPickerBase}\n\t */\n\tpublic get lightPicker():LightPickerBase\n\t{\n\t\treturn this._lightPicker;\n\t}\n\n\tpublic set lightPicker(value:LightPickerBase)\n\t{\n\t\t//if (this._lightPicker == value)\n\t\t//\treturn;\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.removeEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\tthis._lightPicker = value;\n\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.addEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\tthis._updateLights();\n\t}\n\t\n\t/**\n\t * Whether or not to use fallOff and radius properties for lights. This can be used to improve performance and\n\t * compatibility for constrained mode.\n\t */\n\tpublic get enableLightFallOff():boolean\n\t{\n\t\treturn this._material.enableLightFallOff;\n\t}\n\n\t/**\n\t * Define which light source types to use for diffuse reflections. This allows choosing between regular lights\n\t * and/or light probes for diffuse reflections.\n\t *\n\t * @see away3d.materials.LightSources\n\t */\n\tpublic get diffuseLightSources():number\n\t{\n\t\treturn this._material.diffuseLightSources;\n\t}\n\n\t/**\n\t * Define which light source types to use for specular reflections. This allows choosing between regular lights\n\t * and/or light probes for specular reflections.\n\t *\n\t * @see away3d.materials.LightSources\n\t */\n\tpublic get specularLightSources():number\n\t{\n\t\treturn this._material.specularLightSources;\n\t}\n\n\t/**\n\t * Creates a new CompiledPass object.\n\t *\n\t * @param material The material to which this pass belongs.\n\t */\n\tconstructor(mode:number, render:MethodMaterialRender, renderOwner:MaterialBase, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(render, renderOwner, renderableClass, stage);\n\n\t\tthis._mode = mode;\n\n\t\tthis._material = renderOwner;\n\n\t\tthis._onLightsChangeDelegate = (event:Event) => this.onLightsChange(event);\n\t\t\n\t\tthis._onMethodInvalidatedDelegate = (event:ShadingMethodEvent) => this.onMethodInvalidated(event);\n\n\t\tthis.lightPicker = renderOwner.lightPicker;\n\n\t\tif (this._shader == null)\n\t\t\tthis._updateShader();\n\t}\n\n\tprivate _updateShader()\n\t{\n\t\tif ((this.numDirectionalLights || this.numPointLights || this.numLightProbes) && !(this._shader instanceof LightingShader)) {\n\t\t\tif (this._shader != null)\n\t\t\t\tthis._shader.dispose();\n\n\t\t\tthis._shader = new LightingShader(this._renderableClass, this, this._stage);\n\t\t} else if (!(this._shader instanceof ShaderBase)) {\n\t\t\tif (this._shader != null)\n\t\t\t\tthis._shader.dispose();\n\n\t\t\tthis._shader = new ShaderBase(this._renderableClass, this, this._stage);\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the unchanging constant data for this material.\n\t */\n\tpublic _iInitConstantData(shader:ShaderBase)\n\t{\n\t\tsuper._iInitConstantData(shader);\n\n\t\t//Updates method constants if they have changed.\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tthis._iMethodVOs[i].method.iInitConstants(shader, this._iMethodVOs[i]);\n\t}\n\n\t/**\n\t * The ColorTransform object to transform the colour of the material with. Defaults to null.\n\t */\n\tpublic get colorTransform():ColorTransform\n\t{\n\t\treturn this.colorTransformMethod? this.colorTransformMethod.colorTransform : null;\n\t}\n\n\tpublic set colorTransform(value:ColorTransform)\n\t{\n\t\tif (value) {\n\t\t\tif (this.colorTransformMethod == null)\n\t\t\t\tthis.colorTransformMethod = new EffectColorTransformMethod();\n\n\t\t\tthis.colorTransformMethod.colorTransform = value;\n\n\t\t} else if (!value) {\n\t\t\tif (this.colorTransformMethod)\n\t\t\t\tthis.colorTransformMethod = null;\n\t\t}\n\t}\n\n\t/**\n\t * The EffectColorTransformMethod object to transform the colour of the material with. Defaults to null.\n\t */\n\tpublic get colorTransformMethod():EffectColorTransformMethod\n\t{\n\t\treturn this._iColorTransformMethodVO? <EffectColorTransformMethod> this._iColorTransformMethodVO.method : null;\n\t}\n\n\tpublic set colorTransformMethod(value:EffectColorTransformMethod)\n\t{\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iColorTransformMethodVO) {\n\t\t\tthis._removeDependency(this._iColorTransformMethodVO);\n\t\t\tthis._iColorTransformMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iColorTransformMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iColorTransformMethodVO);\n\t\t}\n\t}\n\n\tprivate _removeDependency(methodVO:MethodVO, effectsDependency:boolean = false)\n\t{\n\t\tvar index:number = this._iMethodVOs.indexOf(methodVO);\n\n\t\tif (!effectsDependency)\n\t\t\tthis._numEffectDependencies--;\n\n\t\tmethodVO.method.removeEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onMethodInvalidatedDelegate);\n\t\tthis._iMethodVOs.splice(index, 1);\n\n\t\tthis.invalidatePass();\n\t}\n\n\tprivate _addDependency(methodVO:MethodVO, effectsDependency:boolean = false, index:number = -1)\n\t{\n\t\tmethodVO.method.addEventListener(ShadingMethodEvent.SHADER_INVALIDATED, this._onMethodInvalidatedDelegate);\n\n\t\tif (effectsDependency) {\n\t\t\tif (index != -1)\n\t\t\t\tthis._iMethodVOs.splice(index + this._iMethodVOs.length - this._numEffectDependencies, 0, methodVO);\n\t\t\telse\n\t\t\t\tthis._iMethodVOs.push(methodVO);\n\t\t\tthis._numEffectDependencies++;\n\t\t} else {\n\t\t\tthis._iMethodVOs.splice(this._iMethodVOs.length - this._numEffectDependencies, 0, methodVO);\n\t\t}\n\n\t\tthis.invalidatePass();\n\t}\n\n\t/**\n\t * Appends an \"effect\" shading method to the shader. Effect methods are those that do not influence the lighting\n\t * but modulate the shaded colour, used for fog, outlines, etc. The method will be applied to the result of the\n\t * methods added prior.\n\t */\n\tpublic addEffectMethod(method:EffectMethodBase)\n\t{\n\t\tthis._addDependency(new MethodVO(method), true);\n\t}\n\n\t/**\n\t * The number of \"effect\" methods added to the material.\n\t */\n\tpublic get numEffectMethods():number\n\t{\n\t\treturn this._numEffectDependencies;\n\t}\n\n\t/**\n\t * Queries whether a given effects method was added to the material.\n\t *\n\t * @param method The method to be queried.\n\t * @return true if the method was added to the material, false otherwise.\n\t */\n\tpublic hasEffectMethod(method:EffectMethodBase):boolean\n\t{\n\t\treturn this.getDependencyForMethod(method) != null;\n\t}\n\n\t/**\n\t * Returns the method added at the given index.\n\t * @param index The index of the method to retrieve.\n\t * @return The method at the given index.\n\t */\n\tpublic getEffectMethodAt(index:number):EffectMethodBase\n\t{\n\t\tif (index < 0 || index > this._numEffectDependencies - 1)\n\t\t\treturn null;\n\n\t\treturn <EffectMethodBase> this._iMethodVOs[index + this._iMethodVOs.length - this._numEffectDependencies].method;\n\t}\n\n\t/**\n\t * Adds an effect method at the specified index amongst the methods already added to the material. Effect\n\t * methods are those that do not influence the lighting but modulate the shaded colour, used for fog, outlines,\n\t * etc. The method will be applied to the result of the methods with a lower index.\n\t */\n\tpublic addEffectMethodAt(method:EffectMethodBase, index:number)\n\t{\n\t\tthis._addDependency(new MethodVO(method), true, index);\n\t}\n\n\t/**\n\t * Removes an effect method from the material.\n\t * @param method The method to be removed.\n\t */\n\tpublic removeEffectMethod(method:EffectMethodBase)\n\t{\n\t\tvar methodVO:MethodVO = this.getDependencyForMethod(method);\n\n\t\tif (methodVO != null)\n\t\t\tthis._removeDependency(methodVO, true);\n\t}\n\n\n\t/**\n\t * remove an effect method at the specified index from the material.\n\t */\n\tpublic removeEffectMethodAt(index:number)\n\t{\n\t\tif (index < 0 || index > this._numEffectDependencies - 1)\n\t\t\treturn;\n\n\t\tvar methodVO:MethodVO = this._iMethodVOs[index + this._iMethodVOs.length - this._numEffectDependencies];\n\n\t\tif (methodVO != null)\n\t\t\tthis._removeDependency(methodVO, true);\n\t}\n\n\n\tprivate getDependencyForMethod(method:EffectMethodBase):MethodVO\n\t{\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i)\n\t\t\tif (this._iMethodVOs[i].method == method)\n\t\t\t\treturn this._iMethodVOs[i];\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * The method used to generate the per-pixel normals. Defaults to NormalBasicMethod.\n\t */\n\tpublic get normalMethod():NormalBasicMethod\n\t{\n\t\treturn this._iNormalMethodVO? <NormalBasicMethod> this._iNormalMethodVO.method : null;\n\t}\n\n\tpublic set normalMethod(value:NormalBasicMethod)\n\t{\n\t\tif (this._iNormalMethodVO && this._iNormalMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iNormalMethodVO) {\n\t\t\tthis._removeDependency(this._iNormalMethodVO);\n\t\t\tthis._iNormalMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iNormalMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iNormalMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the ambient lighting contribution. Defaults to AmbientBasicMethod.\n\t */\n\tpublic get ambientMethod():AmbientBasicMethod\n\t{\n\t\treturn this._iAmbientMethodVO? <AmbientBasicMethod> this._iAmbientMethodVO.method : null;\n\t}\n\n\tpublic set ambientMethod(value:AmbientBasicMethod)\n\t{\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iAmbientMethodVO) {\n\t\t\tthis._removeDependency(this._iAmbientMethodVO);\n\t\t\tthis._iAmbientMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iAmbientMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iAmbientMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method used to render shadows cast on this surface, or null if no shadows are to be rendered. Defaults to null.\n\t */\n\tpublic get shadowMethod():ShadowMapMethodBase\n\t{\n\t\treturn this._iShadowMethodVO? <ShadowMapMethodBase> this._iShadowMethodVO.method : null;\n\t}\n\n\tpublic set shadowMethod(value:ShadowMapMethodBase)\n\t{\n\t\tif (this._iShadowMethodVO && this._iShadowMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iShadowMethodVO) {\n\t\t\tthis._removeDependency(this._iShadowMethodVO);\n\t\t\tthis._iShadowMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iShadowMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iShadowMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the diffuse lighting contribution. Defaults to DiffuseBasicMethod.\n\t */\n\tpublic get diffuseMethod():DiffuseBasicMethod\n\t{\n\t\treturn this._iDiffuseMethodVO? <DiffuseBasicMethod> this._iDiffuseMethodVO.method : null;\n\t}\n\n\tpublic set diffuseMethod(value:DiffuseBasicMethod)\n\t{\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iDiffuseMethodVO) {\n\t\t\tthis._removeDependency(this._iDiffuseMethodVO);\n\t\t\tthis._iDiffuseMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iDiffuseMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iDiffuseMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * The method that provides the specular lighting contribution. Defaults to SpecularBasicMethod.\n\t */\n\tpublic get specularMethod():SpecularBasicMethod\n\t{\n\t\treturn this._iSpecularMethodVO? <SpecularBasicMethod> this._iSpecularMethodVO.method : null;\n\t}\n\n\tpublic set specularMethod(value:SpecularBasicMethod)\n\t{\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.method == value)\n\t\t\treturn;\n\n\t\tif (this._iSpecularMethodVO) {\n\t\t\tthis._removeDependency(this._iSpecularMethodVO);\n\t\t\tthis._iSpecularMethodVO = null;\n\t\t}\n\n\t\tif (value) {\n\t\t\tthis._iSpecularMethodVO = new MethodVO(value);\n\t\t\tthis._addDependency(this._iSpecularMethodVO);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._lightPicker)\n\t\t\tthis._lightPicker.removeEventListener(Event.CHANGE, this._onLightsChangeDelegate);\n\n\t\twhile (this._iMethodVOs.length)\n\t\t\tthis._removeDependency(this._iMethodVOs[0]);\n\n\t\tsuper.dispose();\n\n\t\tthis._iMethodVOs = null;\n\t}\n\n\t/**\n\t * Called when any method's shader code is invalidated.\n\t */\n\tprivate onMethodInvalidated(event:ShadingMethodEvent)\n\t{\n\t\tthis.invalidatePass();\n\t}\n\n\t// RENDER LOOP\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera)\n\t{\n\t\tsuper._iActivate(camera);\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iActivate(this._shader, methodVO, this._stage);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t *\n\t * @param renderable\n\t * @param stage\n\t * @param camera\n\t */\n\tpublic _iRender(renderable:RenderableBase, camera:Camera, viewProjection:Matrix3D)\n\t{\n\t\tsuper._iRender(renderable, camera, viewProjection);\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iSetRenderState(this._shader, methodVO, renderable, this._stage, camera);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iDeactivate()\n\t{\n\t\tsuper._iDeactivate();\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod)\n\t\t\t\tmethodVO.method.iDeactivate(this._shader, methodVO, this._stage);\n\t\t}\n\t}\n\n\tpublic _iIncludeDependencies(shader:LightingShader)\n\t{\n\t\tsuper._iIncludeDependencies(shader);\n\n\t\t//TODO: fragment animtion should be compatible with lighting pass\n\t\tshader.usesFragmentAnimation = Boolean(this._mode == MethodPassMode.SUPER_SHADER);\n\n\t\tif (shader.useAlphaPremultiplied && shader.usesBlending)\n\t\t\tshader.usesCommonData = true;\n\n\t\tvar i:number;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (i = 0; i < len; ++i)\n\t\t\tthis.setupAndCountDependencies(shader, this._iMethodVOs[i]);\n\n\t\tvar usesTangentSpace:boolean = true;\n\n\t\tvar methodVO:MethodVO;\n\t\tfor (i = 0; i < len; ++i) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif ((methodVO.useMethod = methodVO.method.iIsUsed(shader)) && !methodVO.method.iUsesTangentSpace())\n\t\t\t\tusesTangentSpace = false;\n\t\t}\n\n\t\tshader.outputsNormals = this._iNormalMethodVO && this._iNormalMethodVO.useMethod;\n\t\tshader.outputsTangentNormals = shader.outputsNormals && (<NormalBasicMethod> this._iNormalMethodVO.method).iOutputsTangentNormals();\n\t\tshader.usesTangentSpace = shader.outputsTangentNormals && !shader.usesProbes && usesTangentSpace;\n\n\t\tif (!shader.usesTangentSpace) {\n\t\t\tif (shader.viewDirDependencies > 0) {\n\t\t\t\tshader.globalPosDependencies++;\n\t\t\t} else if (this.numPointLights > 0 && shader.usesLights) {\n\t\t\t\tshader.globalPosDependencies++;\n\t\t\t\tif (Boolean(this._mode & MethodPassMode.EFFECTS))\n\t\t\t\t\tshader.usesGlobalPosFragment = true;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Counts the dependencies for a given method.\n\t * @param method The method to count the dependencies for.\n\t * @param methodVO The method's data for this material.\n\t */\n\tprivate setupAndCountDependencies(shader:ShaderBase, methodVO:MethodVO)\n\t{\n\t\tmethodVO.reset();\n\n\t\tmethodVO.method.iInitVO(shader, methodVO);\n\n\t\tif (methodVO.needsProjection)\n\t\t\tshader.projectionDependencies++;\n\n\t\tif (methodVO.needsGlobalVertexPos || methodVO.needsGlobalFragmentPos) {\n\n\t\t\tshader.globalPosDependencies++;\n\n\t\t\tif (methodVO.needsGlobalFragmentPos)\n\t\t\t\tshader.usesGlobalPosFragment = true;\n\n\t\t}\n\n\t\tif (methodVO.needsNormals)\n\t\t\tshader.normalDependencies++;\n\n\t\tif (methodVO.needsTangents)\n\t\t\tshader.tangentDependencies++;\n\n\t\tif (methodVO.needsView)\n\t\t\tshader.viewDirDependencies++;\n\t}\n\n\tpublic _iGetPreLightingVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.useMethod)\n\t\t\tcode += this._iAmbientMethodVO.method.iGetVertexCode(shader, this._iAmbientMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod)\n\t\t\tcode += this._iDiffuseMethodVO.method.iGetVertexCode(shader, this._iDiffuseMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod)\n\t\t\tcode += this._iSpecularMethodVO.method.iGetVertexCode(shader, this._iSpecularMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPreLightingFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iAmbientMethodVO && this._iAmbientMethodVO.useMethod) {\n\t\t\tcode += this._iAmbientMethodVO.method.iGetFragmentCode(shader, this._iAmbientMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\n\t\t\tif (this._iAmbientMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\n\t\t\tif (this._iAmbientMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod)\n\t\t\tcode += (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentPreLightingCode(<LightingShader> shader, this._iDiffuseMethodVO, registerCache, sharedRegisters);\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod)\n\t\t\tcode += (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentPreLightingCode(<LightingShader> shader, this._iSpecularMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPerLightDiffuseFragmentCode(shader:LightingShader, lightDirReg:ShaderRegisterElement, diffuseColorReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentCodePerLight(shader, this._iDiffuseMethodVO, lightDirReg, diffuseColorReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerLightSpecularFragmentCode(shader:LightingShader, lightDirReg:ShaderRegisterElement, specularColorReg:ShaderRegisterElement, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentCodePerLight(shader, this._iSpecularMethodVO, lightDirReg, specularColorReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerProbeDiffuseFragmentCode(shader:LightingShader, texReg:ShaderRegisterElement, weightReg:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentCodePerProbe(shader, this._iDiffuseMethodVO, texReg, weightReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPerProbeSpecularFragmentCode(shader:LightingShader, texReg:ShaderRegisterElement, weightReg:string, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentCodePerProbe(shader, this._iSpecularMethodVO, texReg, weightReg, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetPostLightingVertexCode(shader:LightingShader, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tcode += this._iShadowMethodVO.method.iGetVertexCode(shader, this._iShadowMethodVO, registerCache, sharedRegisters);\n\n\t\treturn code;\n\t}\n\n\tpublic _iGetPostLightingFragmentCode(shader:LightingShader, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\tif (shader.useAlphaPremultiplied && shader.usesBlending) {\n\t\t\tcode += \"add \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.commons + \".z\\n\" +\n\t\t\t\"div \" + sharedRegisters.shadedTarget + \".xyz, \" + sharedRegisters.shadedTarget + \", \" + sharedRegisters.shadedTarget + \".w\\n\" +\n\t\t\t\"sub \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.shadedTarget + \".w, \" + sharedRegisters.commons + \".z\\n\" +\n\t\t\t\"sat \" + sharedRegisters.shadedTarget + \".xyz, \" + sharedRegisters.shadedTarget + \"\\n\";\n\t\t}\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tcode += this._iShadowMethodVO.method.iGetFragmentCode(shader, this._iShadowMethodVO, sharedRegisters.shadowTarget, registerCache, sharedRegisters);\n\n\t\tif (this._iDiffuseMethodVO && this._iDiffuseMethodVO.useMethod) {\n\t\t\tcode += (<LightingMethodBase> this._iDiffuseMethodVO.method).iGetFragmentPostLightingCode(shader, this._iDiffuseMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\n\t\t\t// resolve other dependencies as well?\n\t\t\tif (this._iDiffuseMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\n\t\t\tif (this._iDiffuseMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iSpecularMethodVO && this._iSpecularMethodVO.useMethod) {\n\t\t\tcode += (<LightingMethodBase> this._iSpecularMethodVO.method).iGetFragmentPostLightingCode(shader, this._iSpecularMethodVO, sharedRegisters.shadedTarget, registerCache, sharedRegisters);\n\t\t\tif (this._iSpecularMethodVO.needsNormals)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.normalFragment);\n\t\t\tif (this._iSpecularMethodVO.needsView)\n\t\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\t\t}\n\n\t\tif (this._iShadowMethodVO)\n\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.shadowTarget);\n\n\t\treturn code;\n\t}\n\n\n\tpublic _iGetNormalVertexCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\treturn this._iNormalMethodVO.method.iGetVertexCode(shader, this._iNormalMethodVO, registerCache, sharedRegisters);\n\t}\n\n\tpublic _iGetNormalFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = this._iNormalMethodVO.method.iGetFragmentCode(shader, this._iNormalMethodVO, sharedRegisters.normalFragment, registerCache, sharedRegisters);\n\n\t\tif (this._iNormalMethodVO.needsView)\n\t\t\tregisterCache.removeFragmentTempUsage(sharedRegisters.viewDirFragment);\n\n\t\tif (this._iNormalMethodVO.needsGlobalFragmentPos || this._iNormalMethodVO.needsGlobalVertexPos)\n\t\t\tregisterCache.removeVertexTempUsage(sharedRegisters.globalPositionVertex);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetVertexCode(shader:ShaderBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = len - this._numEffectDependencies; i < len; i++) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod) {\n\t\t\t\tcode += methodVO.method.iGetVertexCode(shader, methodVO, regCache, sharedReg);\n\n\t\t\t\tif (methodVO.needsGlobalVertexPos || methodVO.needsGlobalFragmentPos)\n\t\t\t\t\tregCache.removeVertexTempUsage(sharedReg.globalPositionVertex);\n\t\t\t}\n\t\t}\n\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.useMethod)\n\t\t\tcode += this._iColorTransformMethodVO.method.iGetVertexCode(shader, this._iColorTransformMethodVO, regCache, sharedReg);\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shader:ShaderBase, regCache:ShaderRegisterCache, sharedReg:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\t\tvar alphaReg:ShaderRegisterElement;\n\n\t\tif (this.preserveAlpha && this._numEffectDependencies > 0) {\n\t\t\talphaReg = regCache.getFreeFragmentSingleTemp();\n\t\t\tregCache.addFragmentTempUsages(alphaReg, 1);\n\t\t\tcode += \"mov \" + alphaReg + \", \" + sharedReg.shadedTarget + \".w\\n\";\n\t\t}\n\n\t\tvar methodVO:MethodVO;\n\t\tvar len:number = this._iMethodVOs.length;\n\t\tfor (var i:number = len - this._numEffectDependencies; i < len; i++) {\n\t\t\tmethodVO = this._iMethodVOs[i];\n\t\t\tif (methodVO.useMethod) {\n\t\t\t\tcode += methodVO.method.iGetFragmentCode(shader, methodVO, sharedReg.shadedTarget, regCache, sharedReg);\n\n\t\t\t\tif (methodVO.needsNormals)\n\t\t\t\t\tregCache.removeFragmentTempUsage(sharedReg.normalFragment);\n\n\t\t\t\tif (methodVO.needsView)\n\t\t\t\t\tregCache.removeFragmentTempUsage(sharedReg.viewDirFragment);\n\n\t\t\t}\n\t\t}\n\n\t\tif (this.preserveAlpha && this._numEffectDependencies > 0) {\n\t\t\tcode += \"mov \" + sharedReg.shadedTarget + \".w, \" + alphaReg + \"\\n\";\n\t\t\tregCache.removeFragmentTempUsage(alphaReg);\n\t\t}\n\n\t\tif (this._iColorTransformMethodVO && this._iColorTransformMethodVO.useMethod)\n\t\t\tcode += this._iColorTransformMethodVO.method.iGetFragmentCode(shader, this._iColorTransformMethodVO, sharedReg.shadedTarget, regCache, sharedReg);\n\n\t\treturn code;\n\t}\n\t/**\n\t * Indicates whether the shader uses any shadows.\n\t */\n\tpublic _iUsesShadows(shader:ShaderBase):boolean\n\t{\n\t\treturn Boolean(this._iShadowMethodVO && (this._lightPicker.castingDirectionalLights.length > 0 || this._lightPicker.castingPointLights.length > 0));\n\t}\n\n\t/**\n\t * Indicates whether the shader uses any specular component.\n\t */\n\tpublic _iUsesSpecular(shader:ShaderBase):boolean\n\t{\n\t\treturn Boolean(this._iSpecularMethodVO);\n\t}\n\n\t/**\n\t * Indicates whether the shader uses any specular component.\n\t */\n\tpublic _iUsesDiffuse(shader:ShaderBase):boolean\n\t{\n\t\treturn Boolean(this._iDiffuseMethodVO);\n\t}\n\n\n\tprivate onLightsChange(event:Event)\n\t{\n\t\tthis._updateLights();\n\t}\n\n\tprivate _updateLights()\n\t{\n\t\tvar numDirectionalLightsOld:number = this.numDirectionalLights;\n\t\tvar numPointLightsOld:number = this.numPointLights;\n\t\tvar numLightProbesOld:number = this.numLightProbes;\n\n\t\tif (this._lightPicker && (this._mode & MethodPassMode.LIGHTING)) {\n\t\t\tthis.numDirectionalLights = this.calculateNumDirectionalLights(this._lightPicker.numDirectionalLights);\n\t\t\tthis.numPointLights = this.calculateNumPointLights(this._lightPicker.numPointLights);\n\t\t\tthis.numLightProbes = this.calculateNumProbes(this._lightPicker.numLightProbes);\n\n\t\t\tif (this._includeCasters) {\n\t\t\t\tthis.numDirectionalLights += this._lightPicker.numCastingDirectionalLights;\n\t\t\t\tthis.numPointLights += this._lightPicker.numCastingPointLights;\n\t\t\t}\n\n\t\t} else {\n\t\t\tthis.numDirectionalLights = 0;\n\t\t\tthis.numPointLights = 0;\n\t\t\tthis.numLightProbes = 0;\n\t\t}\n\n\t\tif (numDirectionalLightsOld != this.numDirectionalLights || numPointLightsOld != this.numPointLights || numLightProbesOld != this.numLightProbes) {\n\t\t\tthis._updateShader();\n\n\t\t\tthis.invalidatePass();\n\t\t}\n\t}\n\n\t/**\n\t * Calculates the amount of directional lights this material will support.\n\t * @param numDirectionalLights The maximum amount of directional lights to support.\n\t * @return The amount of directional lights this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumDirectionalLights(numDirectionalLights:number):number\n\t{\n\t\treturn Math.min(numDirectionalLights - this.directionalLightsOffset, this._maxLights);\n\t}\n\n\t/**\n\t * Calculates the amount of point lights this material will support.\n\t * @param numDirectionalLights The maximum amount of point lights to support.\n\t * @return The amount of point lights this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumPointLights(numPointLights:number):number\n\t{\n\t\tvar numFree:number = this._maxLights - this.numDirectionalLights;\n\t\treturn Math.min(numPointLights - this.pointLightsOffset, numFree);\n\t}\n\n\t/**\n\t * Calculates the amount of light probes this material will support.\n\t * @param numDirectionalLights The maximum amount of light probes to support.\n\t * @return The amount of light probes this material will support, bounded by the amount necessary.\n\t */\n\tprivate calculateNumProbes(numLightProbes:number):number\n\t{\n\t\tvar numChannels:number = 0;\n\n\t\tif ((this.specularLightSources & LightSources.PROBES) != 0)\n\t\t\t++numChannels;\n\n\t\tif ((this.diffuseLightSources & LightSources.PROBES) != 0)\n\t\t\t++numChannels;\n\n\t\t// 4 channels available\n\t\treturn Math.min(numLightProbes - this.lightProbesOffset, (4/numChannels) | 0);\n\t}\n}\n\nexport = MethodPass;",
    "import Image2D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/data/Image2D\");\nimport Matrix3D\t\t\t\t\t\t\t= require(\"awayjs-core/lib/geom/Matrix3D\");\n\nimport LightBase\t\t\t\t\t\t= require(\"awayjs-display/lib/base/LightBase\");\nimport TriangleSubGeometry\t\t\t\t= require(\"awayjs-display/lib/base/TriangleSubGeometry\");\nimport Camera\t\t\t\t\t\t\t= require(\"awayjs-display/lib/entities/Camera\");\nimport MaterialBase\t\t\t\t\t\t= require(\"awayjs-display/lib/materials/MaterialBase\");\nimport IRenderOwner\t\t\t\t\t\t= require(\"awayjs-display/lib/base/IRenderOwner\");\nimport Single2DTexture\t\t\t\t\t= require(\"awayjs-display/lib/textures/Single2DTexture\");\nimport TextureBase\t\t\t\t\t\t= require(\"awayjs-display/lib/textures/TextureBase\");\n\nimport ContextGLDrawMode\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLDrawMode\");\nimport ContextGLProgramType\t\t\t\t= require(\"awayjs-stagegl/lib/base/ContextGLProgramType\");\nimport IContextGL\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/IContextGL\");\nimport Stage\t\t\t\t\t\t\t= require(\"awayjs-stagegl/lib/base/Stage\");\n\nimport RendererBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/RendererBase\");\nimport ShaderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderBase\");\nimport ShaderRegisterCache\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterCache\");\nimport ShaderRegisterData\t\t\t\t= require(\"awayjs-renderergl/lib/shaders/ShaderRegisterData\");\nimport PassBase\t\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/passes/PassBase\");\nimport IRenderableClass\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/IRenderableClass\");\nimport RenderableBase\t\t\t\t\t= require(\"awayjs-renderergl/lib/renderables/RenderableBase\");\nimport RenderBase\t\t\t\t\t\t= require(\"awayjs-renderergl/lib/render/RenderBase\");\nimport SubGeometryVOBase\t\t\t\t= require(\"awayjs-renderergl/lib/vos/SubGeometryVOBase\");\nimport SubGeometryVOPool\t\t\t\t= require(\"awayjs-renderergl/lib/vos/SubGeometryVOPool\");\n\n/**\n * The SingleObjectDepthPass provides a material pass that renders a single object to a depth map from the point\n * of view from a light.\n */\nclass SingleObjectDepthPass extends PassBase\n{\n\tprivate _subGeometryVOPool:SubGeometryVOPool;\n\tprivate _textures:Object;\n\tprivate _projections:Object;\n\tprivate _textureSize:number /*uint*/ = 512;\n\tprivate _polyOffset:Float32Array = new Float32Array([15, 0, 0, 0]);\n\tprivate _enc:Float32Array;\n\tprivate _projectionTexturesInvalid:Boolean = true;\n\n\t/**\n\t * The size of the depth map texture to render to.\n\t */\n\tpublic get textureSize():number\n\t{\n\t\treturn this._textureSize;\n\t}\n\n\tpublic set textureSize(value:number)\n\t{\n\t\tthis._textureSize = value;\n\t}\n\n\t/**\n\t * The amount by which the rendered object will be inflated, to prevent depth map rounding errors.\n\t */\n\tpublic get polyOffset():number\n\t{\n\t\treturn this._polyOffset[0];\n\t}\n\n\tpublic set polyOffset(value:number)\n\t{\n\t\tthis._polyOffset[0] = value;\n\t}\n\n\t/**\n\t * Creates a new SingleObjectDepthPass object.\n\t */\n\tconstructor(render:RenderBase, renderOwner:IRenderOwner, renderableClass:IRenderableClass, stage:Stage)\n\t{\n\t\tsuper(render, renderOwner, renderableClass, stage);\n\n\t\t//this._pNumUsedStreams = 2;\n\t\t//this._pNumUsedVertexConstants = 7;\n\t\t//this._enc = Array<number>(1.0, 255.0, 65025.0, 16581375.0, 1.0/255.0, 1.0/255.0, 1.0/255.0, 0.0);\n\t\t//\n\t\t//this._pAnimatableAttributes = Array<string>(\"va0\", \"va1\");\n\t\t//this._pAnimationTargetRegisters = Array<string>(\"vt0\", \"vt1\");\n\t\tthis._subGeometryVOPool = SubGeometryVOPool.getPool();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic dispose()\n\t{\n\t\tif (this._textures) {\n\t\t\tfor (var key in this._textures) {\n\t\t\t\tvar texture:TextureBase = this._textures[key];\n\t\t\t\ttexture.dispose();\n\t\t\t}\n\t\t\tthis._textures = null;\n\t\t}\n\t}\n\n\t/**\n\t * Updates the projection textures used to contain the depth renders.\n\t */\n\tprivate updateProjectionTextures()\n\t{\n\t\tif (this._textures) {\n\t\t\tfor (var key in this._textures) {\n\t\t\t\tvar texture:TextureBase = this._textures[key];\n\t\t\t\ttexture.dispose();\n\t\t\t}\n\t\t}\n\n\t\tthis._textures = new Object();\n\t\tthis._projections = new Object();\n\t\tthis._projectionTexturesInvalid = false;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetVertexCode():string\n\t{\n\t\tvar code:string;\n\t\t// offset\n\t\tcode = \"mul vt7, vt1, vc4.x\t\\n\" +\n\t\t\t\t\"add vt7, vt7, vt0\\n\" +\n\t\t\t\t\"mov vt7.w, vt0.w\\n\";\n\t\t// project\n\t\tcode += \"m44 vt2, vt7, vc0\\n\" +\n\t\t\t\t\"mov op, vt2\\n\";\n\n\t\t// perspective divide\n\t\tcode += \"div v0, vt2, vt2.w\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iGetFragmentCode(shader:ShaderBase, registerCache:ShaderRegisterCache, sharedRegisters:ShaderRegisterData):string\n\t{\n\t\tvar code:string = \"\";\n\n\t\t// encode float -> rgba\n\t\tcode += \"mul ft0, fc0, v0.z\\n\" +\n\t\t\t\t\"frc ft0, ft0\\n\" +\n\t\t\t\t\"mul ft1, ft0.yzww, fc1\\n\" +\n\t\t\t\t\"sub ft0, ft0, ft1\\n\" +\n\t\t\t\t\"mov oc, ft0\\n\";\n\n\t\treturn code;\n\t}\n\n\t/**\n\t * Gets the depth maps rendered for this object from all lights.\n\t * @param renderable The renderable for which to retrieve the depth maps.\n\t * @param stage3DProxy The Stage3DProxy object currently used for rendering.\n\t * @return A list of depth map textures for all supported lights.\n\t */\n\tpublic _iGetDepthMap(renderable:RenderableBase):TextureBase\n\t{\n\t\treturn this._textures[renderable.renderableOwner.id];\n\t}\n\n\t/**\n\t * Retrieves the depth map projection maps for all lights.\n\t * @param renderable The renderable for which to retrieve the projection maps.\n\t * @return A list of projection maps for all supported lights.\n\t */\n\tpublic _iGetProjection(renderable:RenderableBase):Matrix3D\n\t{\n\t\treturn this._projections[renderable.renderableOwner.id];\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iRender(renderable:RenderableBase, camera:Camera, viewProjection:Matrix3D)\n\t{\n\t\tvar matrix:Matrix3D;\n\t\tvar context:IContextGL = this._stage.context;\n\t\tvar len:number /*uint*/;\n\t\tvar light:LightBase;\n\t\tvar lights:Array<LightBase> = this._renderOwner.lightPicker.allPickedLights;\n\t\tvar rId:number = renderable.renderableOwner.id;\n\n\t\tif (!this._textures[rId])\n\t\t\tthis._textures[rId] = new Single2DTexture(new Image2D(this._textureSize, this._textureSize));\n\n\t\tif (!this._projections[rId])\n\t\t\tthis._projections[rId] = new Matrix3D();\n\n\t\tlen = lights.length;\n\n\t\t// local position = enough\n\t\tlight = lights[0];\n\n\t\tmatrix = light.iGetObjectProjectionMatrix(renderable.sourceEntity, camera, this._projections[rId]);\n\n\t\tthis._stage.setRenderTarget(this._textures[rId], true);\n\t\tcontext.clear(1.0, 1.0, 1.0);\n\t\tcontext.setProgramConstantsFromMatrix(ContextGLProgramType.VERTEX, 0, matrix, true);\n\t\tcontext.setProgramConstantsFromArray(ContextGLProgramType.FRAGMENT, 0, this._enc, 2);\n\n\t\tvar subGeometryVO:SubGeometryVOBase = renderable.subGeometryVO;\n\t\tvar subGeom:TriangleSubGeometry = <TriangleSubGeometry> subGeometryVO.subGeometry;\n\n\t\tsubGeometryVO.activateVertexBufferVO(0, subGeom.positions, this._stage);\n\t\tsubGeometryVO.activateVertexBufferVO(1, subGeom.normals, this._stage);\n\t\tsubGeometryVO.getIndexBufferVO(this._stage).draw(ContextGLDrawMode.TRIANGLES, 0, subGeometryVO.subGeometry.numElements);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic _iActivate(camera:Camera)\n\t{\n\t\tif (this._projectionTexturesInvalid)\n\t\t\tthis.updateProjectionTextures();\n\n\t\t// never scale\n\t\tsuper._iActivate(camera);\n\n\t\tthis._stage.context.setProgramConstantsFromArray(ContextGLProgramType.VERTEX, 4, this._polyOffset, 1);\n\t}\n}\n\nexport = SingleObjectDepthPass;"
  ],
  "sourceRoot": ""
}
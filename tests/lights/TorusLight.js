var Vector3D = require("awayjs-core/lib/geom/Vector3D");
var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var AwayEvent = require("awayjs-core/lib/events/Event");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var PerspectiveProjection = require("awayjs-core/lib/projections/PerspectiveProjection");
var ImageTexture = require("awayjs-core/lib/textures/ImageTexture");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug = require("awayjs-core/lib/utils/Debug");
var View = require("awayjs-display/lib/containers/View");
var DirectionalLight = require("awayjs-display/lib/entities/DirectionalLight");
var StaticLightPicker = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitiveTorusPrefab = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial = require("awayjs-methodmaterials/lib/MethodMaterial");
var MethodRendererPool = require("awayjs-methodmaterials/lib/pool/MethodRendererPool");
var TorusLight = (function () {
    function TorusLight() {
        Debug.THROW_ERRORS = false;
        Debug.ENABLE_LOG = false;
        Debug.LOG_PI_ERRORS = false;
        this._view = new View(new DefaultRenderer(MethodRendererPool));
        this._view.camera.projection = new PerspectiveProjection(60);
        this._torus = new PrimitiveTorusPrefab(220, 80, 32, 16, false);
        this.loadResources();
    }
    TorusLight.prototype.loadResources = function () {
        var _this = this;
        var urlRequest = new URLRequest("assets/dots.png");
        var urlLoader = new URLLoader();
        urlLoader.dataFormat = URLLoaderDataFormat.BLOB;
        urlLoader.addEventListener(AwayEvent.COMPLETE, function (event) { return _this.imageCompleteHandler(event); });
        urlLoader.load(urlRequest);
    };
    TorusLight.prototype.imageCompleteHandler = function (event) {
        var _this = this;
        var imageLoader = event.target;
        this._image = ParserUtils.blobToImage(imageLoader.data);
        this._image.onload = function (event) { return _this.onLoadComplete(event); };
    };
    TorusLight.prototype.onLoadComplete = function (event) {
        var _this = this;
        var ts = new ImageTexture(this._image);
        var light = new DirectionalLight();
        light.direction = new Vector3D(0, 0, 1);
        light.diffuse = .7;
        light.specular = 1;
        this._view.scene.addChild(light);
        var lightPicker = new StaticLightPicker([light]);
        var matTx = new MethodMaterial(ts, true, true, false);
        matTx.lightPicker = lightPicker;
        this._torus.material = matTx;
        this._mesh = this._torus.getNewObject();
        this._view.scene.addChild(this._mesh);
        this._raf = new RequestAnimationFrame(this.render, this);
        this._raf.start();
        window.onresize = function (event) { return _this.resize(event); };
        this.resize();
    };
    TorusLight.prototype.render = function (dt) {
        if (dt === void 0) { dt = null; }
        this._mesh.rotationY += 1;
        this._view.render();
    };
    TorusLight.prototype.resize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    return TorusLight;
})();

//# sourceMappingURL=data:application/json;base64,
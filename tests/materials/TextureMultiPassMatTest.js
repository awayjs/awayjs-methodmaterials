"use strict";
var Vector3D_1 = require("awayjs-core/lib/geom/Vector3D");
var URLLoader_1 = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat_1 = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var URLLoaderEvent_1 = require("awayjs-core/lib/events/URLLoaderEvent");
var ParserUtils_1 = require("awayjs-core/lib/parsers/ParserUtils");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var View_1 = require("awayjs-display/lib/View");
var PointLight_1 = require("awayjs-display/lib/display/PointLight");
var ElementsType_1 = require("awayjs-display/lib/graphics/ElementsType");
var PrimitiveTorusPrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var BasicMaterial_1 = require("awayjs-display/lib/materials/BasicMaterial");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var TextureMultiPassMatTest = (function () {
    function TextureMultiPassMatTest() {
        var _this = this;
        this.counter = 0;
        this.center = new Vector3D_1.default();
        var pngURLRequest = new URLRequest_1.default('assets/256x256.png');
        this.pngLoader = new URLLoader_1.default();
        this.pngLoader.dataFormat = URLLoaderDataFormat_1.default.BLOB;
        this.pngLoader.addEventListener(URLLoaderEvent_1.default.LOAD_COMPLETE, function (event) { return _this.pngLoaderComplete(event); });
        this.pngLoader.load(pngURLRequest);
    }
    TextureMultiPassMatTest.prototype.pngLoaderComplete = function (event) {
        var _this = this;
        var imageLoader = event.target;
        this.image = ParserUtils_1.default.blobToImage(imageLoader.data);
        this.image.onload = function (event) { return _this.onLoadComplete(event); };
    };
    TextureMultiPassMatTest.prototype.onLoadComplete = function (event) {
        var _this = this;
        Debug_1.default.THROW_ERRORS = false;
        Debug_1.default.LOG_PI_ERRORS = false;
        this.light = new PointLight_1.default();
        this.view = new View_1.default(new DefaultRenderer_1.default());
        this.view.camera.z = -1000;
        this.view.backgroundColor = 0x000000;
        var mat = new BasicMaterial_1.default(ParserUtils_1.default.imageToBitmapImage2D(this.image));
        var torus = new PrimitiveTorusPrefab_1.default(mat, ElementsType_1.default.TRIANGLE, 50, 10, 32, 32, false);
        var l = 20;
        var radius = 500;
        for (var c = 0; c < l; c++) {
            var t = Math.PI * 2 * c / l;
            var m = torus.getNewObject();
            m.x = Math.cos(t) * radius;
            m.y = 0;
            m.z = Math.sin(t) * radius;
            this.view.scene.addChild(m);
        }
        this.view.scene.addChild(this.light);
        this.view.y = this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
        console.log("renderer ", this.view.renderer);
        console.log("scene ", this.view.scene);
        console.log("view ", this.view);
        this.view.render();
        window.onresize = function (event) { return _this.onResize(event); };
        this.raf = new RequestAnimationFrame_1.default(this.tick, this);
        this.raf.start();
    };
    TextureMultiPassMatTest.prototype.tick = function (dt) {
        this.counter += 0.005;
        this.view.camera.lookAt(this.center);
        this.view.camera.x = Math.cos(this.counter) * 800;
        this.view.camera.z = Math.sin(this.counter) * 800;
        this.view.render();
    };
    TextureMultiPassMatTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return TextureMultiPassMatTest;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFscy9UZXh0dXJlTXVsdGlQYXNzTWF0VGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUJBQTBCLCtCQUErQixDQUFDLENBQUE7QUFDMUQsMEJBQTBCLCtCQUErQixDQUFDLENBQUE7QUFDMUQsb0NBQWtDLHlDQUF5QyxDQUFDLENBQUE7QUFDNUUsMkJBQTJCLGdDQUFnQyxDQUFDLENBQUE7QUFDNUQsK0JBQThCLHVDQUF1QyxDQUFDLENBQUE7QUFDdEUsNEJBQTRCLHFDQUFxQyxDQUFDLENBQUE7QUFDbEUsc0NBQW1DLDZDQUE2QyxDQUFDLENBQUE7QUFDakYsc0JBQXVCLDZCQUE2QixDQUFDLENBQUE7QUFFckQscUJBQXVCLHlCQUF5QixDQUFDLENBQUE7QUFFakQsMkJBQTJCLHVDQUF1QyxDQUFDLENBQUE7QUFDbkUsNkJBQTZCLDBDQUEwQyxDQUFDLENBQUE7QUFDeEUscUNBQW1DLGlEQUFpRCxDQUFDLENBQUE7QUFDckYsOEJBQTZCLDRDQUE0QyxDQUFDLENBQUE7QUFFMUUsZ0NBQStCLHVDQUF1QyxDQUFDLENBQUE7QUFFdkU7SUFVQztRQVZELGlCQXdGQztRQW5GUSxZQUFPLEdBQVUsQ0FBQyxDQUFDO1FBQ25CLFdBQU0sR0FBWSxJQUFJLGtCQUFRLEVBQUUsQ0FBQztRQU14QyxJQUFJLGFBQWEsR0FBYyxJQUFJLG9CQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVwRSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksbUJBQVMsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLDZCQUFtQixDQUFDLElBQUksQ0FBQztRQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLHdCQUFjLENBQUMsYUFBYSxFQUFFLFVBQUMsS0FBb0IsSUFBSyxPQUFBLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDO1FBQ3ZILElBQUksQ0FB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SUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2QyxDQUFDO0lBQ0YsOEJBQUM7QUFBRCxDQXhGQSxBQXdGQyxJQUFBIiwiZmlsZSI6Im1hdGVyaWFscy9UZXh0dXJlTXVsdGlQYXNzTWF0VGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWZWN0b3IzRFx0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiO1xuaW1wb3J0IFVSTExvYWRlclx0XHRcdFx0XHRmcm9tIFwiYXdheWpzLWNvcmUvbGliL25ldC9VUkxMb2FkZXJcIjtcbmltcG9ydCBVUkxMb2FkZXJEYXRhRm9ybWF0XHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMTG9hZGVyRGF0YUZvcm1hdFwiO1xuaW1wb3J0IFVSTFJlcXVlc3RcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi9uZXQvVVJMUmVxdWVzdFwiO1xuaW1wb3J0IFVSTExvYWRlckV2ZW50XHRcdFx0XHRmcm9tIFwiYXdheWpzLWNvcmUvbGliL2V2ZW50cy9VUkxMb2FkZXJFdmVudFwiO1xuaW1wb3J0IFBhcnNlclV0aWxzXHRcdFx0XHRcdGZyb20gXCJhd2F5anMtY29yZS9saWIvcGFyc2Vycy9QYXJzZXJVdGlsc1wiO1xuaW1wb3J0IFJlcXVlc3RBbmltYXRpb25GcmFtZVx0XHRmcm9tIFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL1JlcXVlc3RBbmltYXRpb25GcmFtZVwiO1xuaW1wb3J0IERlYnVnXHRcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi91dGlscy9EZWJ1Z1wiO1xuXG5pbXBvcnQgVmlld1x0XHRcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9WaWV3XCI7XG5pbXBvcnQgU3ByaXRlXHRcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9kaXNwbGF5L1Nwcml0ZVwiO1xuaW1wb3J0IFBvaW50TGlnaHRcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9kaXNwbGF5L1BvaW50TGlnaHRcIjtcbmltcG9ydCBFbGVtZW50c1R5cGVcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9ncmFwaGljcy9FbGVtZW50c1R5cGVcIjtcbmltcG9ydCBQcmltaXRpdmVUb3J1c1ByZWZhYlx0XHRcdGZyb20gXCJhd2F5anMtZGlzcGxheS9saWIvcHJlZmFicy9QcmltaXRpdmVUb3J1c1ByZWZhYlwiO1xuaW1wb3J0IEJhc2ljTWF0ZXJpYWxcdFx0XHRcdGZyb20gXCJhd2F5anMtZGlzcGxheS9saWIvbWF0ZXJpYWxzL0Jhc2ljTWF0ZXJpYWxcIjtcblxuaW1wb3J0IERlZmF1bHRSZW5kZXJlclx0XHRcdFx0ZnJvbSBcImF3YXlqcy1yZW5kZXJlcmdsL2xpYi9EZWZhdWx0UmVuZGVyZXJcIjtcblxuY2xhc3MgVGV4dHVyZU11bHRpUGFzc01hdFRlc3Rcbntcblx0cHJpdmF0ZSB2aWV3OlZpZXc7XG5cdHByaXZhdGUgbGlnaHQ6UG9pbnRMaWdodDtcblx0cHJpdmF0ZSByYWY6UmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXHRwcml2YXRlIGNvdW50ZXI6bnVtYmVyID0gMDtcblx0cHJpdmF0ZSBjZW50ZXI6VmVjdG9yM0QgPSBuZXcgVmVjdG9yM0QoKTtcblx0cHJpdmF0ZSBwbmdMb2FkZXIgICA6IFVSTExvYWRlcjtcblx0cHJpdmF0ZSBpbWFnZTpIVE1MSW1hZ2VFbGVtZW50O1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHZhciBwbmdVUkxSZXF1ZXN0OlVSTFJlcXVlc3QgPSBuZXcgVVJMUmVxdWVzdCgnYXNzZXRzLzI1NngyNTYucG5nJyk7XG5cblx0XHR0aGlzLnBuZ0xvYWRlciA9IG5ldyBVUkxMb2FkZXIoKTtcblx0XHR0aGlzLnBuZ0xvYWRlci5kYXRhRm9ybWF0ID0gVVJMTG9hZGVyRGF0YUZvcm1hdC5CTE9CO1xuXHRcdHRoaXMucG5nTG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoVVJMTG9hZGVyRXZlbnQuTE9BRF9DT01QTEVURSwgKGV2ZW50OlVSTExvYWRlckV2ZW50KSA9PiB0aGlzLnBuZ0xvYWRlckNvbXBsZXRlKGV2ZW50KSk7XG5cdFx0dGhpcy5wbmdMb2FkZXIubG9hZChwbmdVUkxSZXF1ZXN0KTtcblx0fVxuXG5cdHByaXZhdGUgcG5nTG9hZGVyQ29tcGxldGUoZXZlbnQ6VVJMTG9hZGVyRXZlbnQpXG5cdHtcblx0XHR2YXIgaW1hZ2VMb2FkZXI6VVJMTG9hZGVyID0gZXZlbnQudGFyZ2V0O1xuXHRcdHRoaXMuaW1hZ2UgPSBQYXJzZXJVdGlscy5ibG9iVG9JbWFnZShpbWFnZUxvYWRlci5kYXRhKTtcblx0XHR0aGlzLmltYWdlLm9ubG9hZCA9IChldmVudCkgPT4gdGhpcy5vbkxvYWRDb21wbGV0ZShldmVudCk7XG5cdH1cblxuXHRwcml2YXRlIG9uTG9hZENvbXBsZXRlKGV2ZW50KVxuXHR7XG5cdFx0RGVidWcuVEhST1dfRVJST1JTICAgICA9IGZhbHNlO1xuXHRcdERlYnVnLkxPR19QSV9FUlJPUlMgICAgPSBmYWxzZTtcblxuXHRcdHRoaXMubGlnaHQgPSBuZXcgUG9pbnRMaWdodCgpO1xuXHRcdHRoaXMudmlldyA9IG5ldyBWaWV3KG5ldyBEZWZhdWx0UmVuZGVyZXIoKSk7XG5cdFx0dGhpcy52aWV3LmNhbWVyYS56ID0gLTEwMDA7XG5cdFx0dGhpcy52aWV3LmJhY2tncm91bmRDb2xvciA9IDB4MDAwMDAwO1xuXHRcdHZhciBtYXQ6QmFzaWNNYXRlcmlhbCA9IG5ldyBCYXNpY01hdGVyaWFsKFBhcnNlclV0aWxzLmltYWdlVG9CaXRtYXBJbWFnZTJEKHRoaXMuaW1hZ2UpKTtcblx0XHR2YXIgdG9ydXM6UHJpbWl0aXZlVG9ydXNQcmVmYWIgPSBuZXcgUHJpbWl0aXZlVG9ydXNQcmVmYWIobWF0LCBFbGVtZW50c1R5cGUuVFJJQU5HTEUsIDUwICwgMTAsIDMyICwgMzIgLCBmYWxzZSk7XG5cblx0XHR2YXIgbDpudW1iZXIgPSAyMDtcblx0XHR2YXIgcmFkaXVzOm51bWJlciA9IDUwMDtcblxuXHRcdGZvciAodmFyIGM6bnVtYmVyID0gMDsgYyA8IGwgOyBjKyspIHtcblx0XHRcdHZhciB0Om51bWJlciA9IE1hdGguUEkqMipjL2w7XG5cdFx0XHR2YXIgbTpTcHJpdGUgPSA8U3ByaXRlPiB0b3J1cy5nZXROZXdPYmplY3QoKTtcblxuXHRcdFx0bS54ID0gTWF0aC5jb3ModCkqcmFkaXVzO1xuXHRcdFx0bS55ID0gMDtcblx0XHRcdG0ueiA9IE1hdGguc2luKHQpKnJhZGl1cztcblxuXHRcdFx0dGhpcy52aWV3LnNjZW5lLmFkZENoaWxkKG0pO1xuXHRcdH1cblxuXHRcdHRoaXMudmlldy5zY2VuZS5hZGRDaGlsZCh0aGlzLmxpZ2h0KTtcblxuXHRcdHRoaXMudmlldy55ID0gdGhpcy52aWV3LnggPSAwO1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cblx0XHRjb25zb2xlLmxvZyhcInJlbmRlcmVyIFwiLCB0aGlzLnZpZXcucmVuZGVyZXIpO1xuXHRcdGNvbnNvbGUubG9nKFwic2NlbmUgXCIsIHRoaXMudmlldy5zY2VuZSk7XG5cdFx0Y29uc29sZS5sb2coXCJ2aWV3IFwiLCB0aGlzLnZpZXcpO1xuXG5cdFx0dGhpcy52aWV3LnJlbmRlcigpO1xuXG5cdFx0d2luZG93Lm9ucmVzaXplID0gKGV2ZW50OlVJRXZlbnQpID0+IHRoaXMub25SZXNpemUoZXZlbnQpO1xuXG5cdFx0dGhpcy5yYWYgPSBuZXcgUmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudGljaywgdGhpcyk7XG5cdFx0dGhpcy5yYWYuc3RhcnQoKTtcblx0fVxuXG5cdHByaXZhdGUgdGljayhkdDpudW1iZXIpXG5cdHtcblx0XHR0aGlzLmNvdW50ZXIgKz0gMC4wMDU7XG5cdFx0dGhpcy52aWV3LmNhbWVyYS5sb29rQXQodGhpcy5jZW50ZXIpO1xuXHRcdHRoaXMudmlldy5jYW1lcmEueCA9IE1hdGguY29zKHRoaXMuY291bnRlcikqODAwO1xuXHRcdHRoaXMudmlldy5jYW1lcmEueiA9IE1hdGguc2luKHRoaXMuY291bnRlcikqODAwO1xuXG5cdFx0dGhpcy52aWV3LnJlbmRlcigpO1xuXHR9XG5cblx0cHVibGljIG9uUmVzaXplKGV2ZW50OlVJRXZlbnQgPSBudWxsKVxuXHR7XG5cdFx0dGhpcy52aWV3LnkgPSAwO1xuXHRcdHRoaXMudmlldy54ID0gMDtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXHR9XG59Il0sInNvdXJjZVJvb3QiOiIuL3Rlc3RzIn0=

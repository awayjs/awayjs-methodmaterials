"use strict";
var Sampler2D_1 = require("awayjs-core/lib/image/Sampler2D");
var URLLoaderEvent_1 = require("awayjs-core/lib/events/URLLoaderEvent");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var View_1 = require("awayjs-display/lib/View");
var PrimitivePlanePrefab_1 = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var BasicMaterial_1 = require("awayjs-display/lib/materials/BasicMaterial");
var URLLoader_1 = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat_1 = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var ParserUtils_1 = require("awayjs-core/lib/parsers/ParserUtils");
var ElementsType_1 = require("awayjs-display/lib/graphics/ElementsType");
var MipMapSoftwareTest = (function () {
    function MipMapSoftwareTest() {
        var _this = this;
        this.c = 100;
        var pngURLRequest = new URLRequest_1.default('assets/dots.png');
        this.pngLoader = new URLLoader_1.default();
        this.pngLoader.dataFormat = URLLoaderDataFormat_1.default.BLOB;
        this.pngLoader.addEventListener(URLLoaderEvent_1.default.LOAD_COMPLETE, function (event) { return _this.pngLoaderComplete(event); });
        this.pngLoader.load(pngURLRequest);
    }
    MipMapSoftwareTest.prototype.pngLoaderComplete = function (event) {
        var _this = this;
        var imageLoader = event.target;
        this.image = ParserUtils_1.default.blobToImage(imageLoader.data);
        this.image.onload = function (event) { return _this.onLoadComplete(event); };
    };
    MipMapSoftwareTest.prototype.onLoadComplete = function (event) {
        var _this = this;
        Debug_1.default.LOG_PI_ERRORS = false;
        Debug_1.default.THROW_ERRORS = false;
        var defaultRenderer = new DefaultRenderer_1.default(null, false, "baseline", "software");
        defaultRenderer.antiAlias = 2;
        this.view = new View_1.default(defaultRenderer);
        //this.view = new View(new DefaultRenderer(null, false, "baseline"));
        this.raf = new RequestAnimationFrame_1.default(this.render, this);
        this.view.backgroundColor = 0x222222;
        window.onresize = function (event) { return _this.onResize(event); };
        this.initSpritees();
        this.raf.start();
        this.onResize();
    };
    MipMapSoftwareTest.prototype.initSpritees = function () {
        //var material:BasicMaterial = new BasicMaterial(DefaultMaterialManager.getDefaultTexture());
        var material = new BasicMaterial_1.default(ParserUtils_1.default.imageToBitmapImage2D(this.image));
        material.style.sampler = new Sampler2D_1.default(true, true, true);
        var plane = new PrimitivePlanePrefab_1.default(material, ElementsType_1.default.TRIANGLE, 1000, 1000, 1000);
        //var plane:PrimitiveCubePrefab = new PrimitiveCubePrefab();
        plane.material = material;
        var sprite = plane.getNewObject();
        sprite.y = -100;
        this.view.scene.addChild(sprite);
    };
    MipMapSoftwareTest.prototype.render = function () {
        if (this.c > 10) {
            this.c = 0;
            this.view.render();
        }
        this.c++;
    };
    MipMapSoftwareTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return MipMapSoftwareTest;
}());

//# sourceMappingURL=data:application/json;base64,

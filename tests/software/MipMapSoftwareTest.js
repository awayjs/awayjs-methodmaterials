var Sampler2D = require("awayjs-core/lib/image/Sampler2D");
var URLLoaderEvent = require("awayjs-core/lib/events/URLLoaderEvent");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug = require("awayjs-core/lib/utils/Debug");
var View = require("awayjs-display/lib/View");
var PrimitivePlanePrefab = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var DefaultRenderer = require("awayjs-renderergl/lib/DefaultRenderer");
var BasicMaterial = require("awayjs-display/lib/materials/BasicMaterial");
var URLLoader = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var ParserUtils = require("awayjs-core/lib/parsers/ParserUtils");
var ElementsType = require("awayjs-display/lib/graphics/ElementsType");
var MipMapSoftwareTest = (function () {
    function MipMapSoftwareTest() {
        var _this = this;
        this.c = 100;
        var pngURLRequest = new URLRequest('assets/dots.png');
        this.pngLoader = new URLLoader();
        this.pngLoader.dataFormat = URLLoaderDataFormat.BLOB;
        this.pngLoader.addEventListener(URLLoaderEvent.LOAD_COMPLETE, function (event) { return _this.pngLoaderComplete(event); });
        this.pngLoader.load(pngURLRequest);
    }
    MipMapSoftwareTest.prototype.pngLoaderComplete = function (event) {
        var _this = this;
        var imageLoader = event.target;
        this.image = ParserUtils.blobToImage(imageLoader.data);
        this.image.onload = function (event) { return _this.onLoadComplete(event); };
    };
    MipMapSoftwareTest.prototype.onLoadComplete = function (event) {
        var _this = this;
        Debug.LOG_PI_ERRORS = false;
        Debug.THROW_ERRORS = false;
        var defaultRenderer = new DefaultRenderer(null, false, "baseline", "software");
        defaultRenderer.antiAlias = 2;
        this.view = new View(defaultRenderer);
        //this.view = new View(new DefaultRenderer(null, false, "baseline"));
        this.raf = new RequestAnimationFrame(this.render, this);
        this.view.backgroundColor = 0x222222;
        window.onresize = function (event) { return _this.onResize(event); };
        this.initMeshes();
        this.raf.start();
        this.onResize();
    };
    MipMapSoftwareTest.prototype.initMeshes = function () {
        //var material:BasicMaterial = new BasicMaterial(DefaultMaterialManager.getDefaultTexture());
        var material = new BasicMaterial(ParserUtils.imageToBitmapImage2D(this.image));
        material.style.sampler = new Sampler2D(true, true, true);
        var plane = new PrimitivePlanePrefab(material, ElementsType.TRIANGLE, 1000, 1000, 1000);
        //var plane:PrimitiveCubePrefab = new PrimitiveCubePrefab();
        plane.material = material;
        var mesh = plane.getNewObject();
        mesh.y = -100;
        this.view.scene.addChild(mesh);
    };
    MipMapSoftwareTest.prototype.render = function () {
        if (this.c > 10) {
            this.c = 0;
            this.view.render();
        }
        this.c++;
    };
    MipMapSoftwareTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return MipMapSoftwareTest;
})();

//# sourceMappingURL=data:application/json;base64,